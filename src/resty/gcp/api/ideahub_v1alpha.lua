local decode = require("cjson").new().decode
return assert(decode([===[
{ "id": "ideahub:v1alpha", "kind": "discovery#restDescription", "basePath": "", "baseUrl": "https://ideahub.googleapis.com/", "revision": "20220711", "title": "Idea Hub API", "ownerDomain": "google.com", "name": "ideahub", "discoveryVersion": "v1", "icons": { "x32": "http://www.google.com/images/icons/product/search-32.gif", "x16": "http://www.google.com/images/icons/product/search-16.gif" }, "version_module": true, "resources": { "platforms": { "resources": { "properties": { "resources": { "topicStates": { "methods": { "patch": { "request": { "$ref": "GoogleSearchIdeahubV1alphaTopicState" }, "id": "ideahub.platforms.properties.topicStates.patch", "path": "v1alpha/{+name}", "response": { "$ref": "GoogleSearchIdeahubV1alphaTopicState" }, "parameters": { "name": { "required": true, "location": "path", "pattern": "^platforms/[^/]+/properties/[^/]+/topicStates/[^/]+$", "type": "string", "description": "Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}" }, "updateMask": { "format": "google-fieldmask", "location": "query", "type": "string", "description": "The list of fields to be updated." } }, "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/topicStates/{topicStatesId}", "httpMethod": "PATCH", "description": "Update a topic state resource.", "parameterOrder": [ "name" ] } } }, "ideas": { "methods": { "list": { "path": "v1alpha/{+parent}/ideas", "id": "ideahub.platforms.properties.ideas.list", "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/ideas", "parameters": { "filter": { "type": "string", "location": "query", "description": "Allows filtering. Supported syntax: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Filter expressions are made up of one or more restrictions. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Restrictions are implicitly combined, as if the `AND` operator was always used. The `OR` operator is currently unsupported. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Supported functions: - `saved(bool)`: If set to true, fetches only saved ideas. If set to false, fetches all except saved ideas. Can't be simultaneously used with `dismissed(bool)`. - `dismissed(bool)`: If set to true, fetches only dismissed ideas. Can't be simultaneously used with `saved(bool)`. The `false` value is currently unsupported. Examples: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `saved(true)` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `saved(false)` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `dismissed(true)` The length of this field should be no more than 500 characters." }, "parent": { "pattern": "^platforms/[^/]+/properties/[^/]+$", "type": "string", "location": "path", "description": "If defined, specifies the creator for which to filter by. Format: publishers/{publisher}/properties/{property}", "required": true }, "orderBy": { "type": "string", "location": "query", "description": "Order semantics described below." }, "pageSize": { "format": "int32", "description": "The maximum number of ideas per page. If unspecified, at most 10 ideas will be returned. The maximum value is 2000; values above 2000 will be coerced to 2000.", "type": "integer", "location": "query" }, "pageToken": { "type": "string", "description": "Used to fetch next page.", "location": "query" } }, "description": "List ideas for a given Creator and filter and sort options.", "httpMethod": "GET", "parameterOrder": [ "parent" ], "response": { "$ref": "GoogleSearchIdeahubV1alphaListIdeasResponse" } } } }, "ideaStates": { "methods": { "patch": { "request": { "$ref": "GoogleSearchIdeahubV1alphaIdeaState" }, "response": { "$ref": "GoogleSearchIdeahubV1alphaIdeaState" }, "httpMethod": "PATCH", "id": "ideahub.platforms.properties.ideaStates.patch", "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/ideaStates/{ideaStatesId}", "parameterOrder": [ "name" ], "path": "v1alpha/{+name}", "parameters": { "name": { "description": "Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state}", "type": "string", "location": "path", "pattern": "^platforms/[^/]+/properties/[^/]+/ideaStates/[^/]+$", "required": true }, "updateMask": { "type": "string", "location": "query", "format": "google-fieldmask", "description": "The list of fields to be updated." } }, "description": "Update an idea state resource." } } }, "locales": { "methods": { "list": { "path": "v1alpha/{+parent}/locales", "id": "ideahub.platforms.properties.locales.list", "response": { "$ref": "GoogleSearchIdeahubV1alphaListAvailableLocalesResponse" }, "parameters": { "pageToken": { "location": "query", "description": "A page token, received from a previous `ListAvailableLocales` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListAvailableLocales` must match the call that provided the page token.", "type": "string" }, "parent": { "description": "Required. The web property to check idea availability for Format: platforms/{platform}/property/{property}", "required": true, "pattern": "^platforms/[^/]+/properties/[^/]+$", "location": "path", "type": "string" }, "pageSize": { "description": "The maximum number of locales to return. The service may return fewer than this value. If unspecified, at most 100 locales will be returned. The maximum value is 100; values above 100 will be coerced to 100.", "format": "int32", "type": "integer", "location": "query" } }, "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/locales", "description": "Returns which locales ideas are available in for a given Creator.", "httpMethod": "GET", "parameterOrder": [ "parent" ] } } }, "ideaActivities": { "methods": { "create": { "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/ideaActivities", "httpMethod": "POST", "request": { "$ref": "GoogleSearchIdeahubV1alphaIdeaActivity" }, "description": "Creates an idea activity entry.", "id": "ideahub.platforms.properties.ideaActivities.create", "parameters": { "parent": { "required": true, "type": "string", "pattern": "^platforms/[^/]+/properties/[^/]+$", "location": "path", "description": "Required. The parent resource where this idea activity will be created. Format: platforms/{platform}/property/{property}" } }, "path": "v1alpha/{+parent}/ideaActivities", "response": { "$ref": "GoogleSearchIdeahubV1alphaIdeaActivity" }, "parameterOrder": [ "parent" ] } } } } } } }, "ideas": { "methods": { "list": { "parameters": { "orderBy": { "description": "Order semantics described below.", "location": "query", "type": "string" }, "filter": { "location": "query", "description": "Allows filtering. Supported syntax: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Filter expressions are made up of one or more restrictions. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Restrictions are implicitly combined, as if the `AND` operator was always used. The `OR` operator is currently unsupported. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Supported functions: - `saved(bool)`: If set to true, fetches only saved ideas. If set to false, fetches all except saved ideas. Can't be simultaneously used with `dismissed(bool)`. - `dismissed(bool)`: If set to true, fetches only dismissed ideas. Can't be simultaneously used with `saved(bool)`. The `false` value is currently unsupported. Examples: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `saved(true)` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `saved(false)` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `dismissed(true)` The length of this field should be no more than 500 characters.", "type": "string" }, "pageToken": { "type": "string", "description": "Used to fetch next page.", "location": "query" }, "parent": { "description": "If defined, specifies the creator for which to filter by. Format: publishers/{publisher}/properties/{property}", "location": "query", "type": "string" }, "pageSize": { "description": "The maximum number of ideas per page. If unspecified, at most 10 ideas will be returned. The maximum value is 2000; values above 2000 will be coerced to 2000.", "type": "integer", "location": "query", "format": "int32" } }, "description": "List ideas for a given Creator and filter and sort options.", "id": "ideahub.ideas.list", "flatPath": "v1alpha/ideas", "httpMethod": "GET", "response": { "$ref": "GoogleSearchIdeahubV1alphaListIdeasResponse" }, "path": "v1alpha/ideas", "parameterOrder": [] } } } }, "servicePath": "", "canonicalName": "Ideahub", "description": "This is an invitation-only API.", "ownerName": "Google", "batchPath": "batch", "fullyEncodeReservedExpansion": true, "mtlsRootUrl": "https://ideahub.mtls.googleapis.com/", "schemas": { "GoogleSearchIdeahubV1alphaTopicState": { "type": "object", "properties": { "name": { "description": "Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state}", "type": "string" }, "saved": { "type": "boolean", "description": "Whether the topic is saved." }, "dismissed": { "description": "Whether the topic is dismissed.", "type": "boolean" } }, "description": "Represents topic state specific to a web property.", "id": "GoogleSearchIdeahubV1alphaTopicState" }, "GoogleSearchIdeahubV1alphaIdea": { "id": "GoogleSearchIdeahubV1alphaIdea", "properties": { "text": { "type": "string", "description": "The idea’s text." }, "name": { "type": "string", "description": "Unique identifier for the idea. Format: ideas/{ideaId}" }, "topics": { "type": "array", "items": { "$ref": "GoogleSearchIdeahubV1alphaTopic" }, "description": "The Topics that match the idea." } }, "description": "A single Idea that we want to show the end user.", "type": "object" }, "GoogleSearchIdeahubV1alphaTopic": { "type": "object", "description": "Represents a Topic umbrella for a list of questions that a Creator may want to respond to.", "properties": { "mid": { "type": "string", "description": "The mID of the topic." }, "name": { "type": "string", "description": "Unique identifier for the topic. Format: topics/{topic}" }, "displayName": { "description": "String displayed to the creator indicating the name of the Topic.", "type": "string" } }, "id": "GoogleSearchIdeahubV1alphaTopic" }, "GoogleSearchIdeahubV1alphaListIdeasResponse": { "id": "GoogleSearchIdeahubV1alphaListIdeasResponse", "type": "object", "properties": { "ideas": { "items": { "$ref": "GoogleSearchIdeahubV1alphaIdea" }, "type": "array", "description": "Results for the ListIdeasRequest." }, "nextPageToken": { "type": "string", "description": "Used to fetch the next page in a subsequent request." } } }, "GoogleSearchIdeahubV1alphaListAvailableLocalesResponse": { "id": "GoogleSearchIdeahubV1alphaListAvailableLocalesResponse", "properties": { "nextPageToken": { "type": "string", "description": "A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages." }, "availableLocales": { "type": "array", "description": "Locales for which ideas are available for the given Creator.", "items": { "$ref": "GoogleSearchIdeahubV1alphaAvailableLocale" } } }, "type": "object", "description": "Response for whether ideas are available for a given web property on a platform, for the currently logged-in user." }, "GoogleSearchIdeahubV1alphaAvailableLocale": { "type": "object", "description": "Represents locales that are available for a web property.", "id": "GoogleSearchIdeahubV1alphaAvailableLocale", "properties": { "name": { "type": "string", "description": "A string in BCP 47 format, prefixed with the platform and property name, and \"locales/\". Format: platforms/{platform}/properties/{property}/locales/{locale}" }, "locale": { "description": "A string in BCP 47 format, without a resource prefix.", "type": "string" } } }, "GoogleSearchIdeahubV1alphaIdeaActivity": { "id": "GoogleSearchIdeahubV1alphaIdeaActivity", "properties": { "ideas": { "items": { "type": "string" }, "description": "The Idea IDs for this entry. If empty, topics should be set.", "type": "array" }, "name": { "type": "string", "description": "Unique identifier for the idea activity. The name is ignored when creating an idea activity. Format: platforms/{platform}/properties/{property}/ideaActivities/{idea_activity}" }, "uri": { "description": "The uri the activity relates to.", "type": "string" }, "type": { "type": "string", "enum": [ "TYPE_UNSPECIFIED", "POST_DRAFTED", "POST_PUBLISHED", "POST_DELETED", "POST_UNPUBLISHED" ], "description": "The type of activity performed.", "enumDescriptions": [ "An unspecified, unknown type of idea activity.", "An idea activity type indicating a post has been drafted.", "An idea activity type indicating a post has been published.", "An idea activity type indicating a post has been deleted.", "An idea activity type indicating a post has been unpublished." ] }, "topics": { "type": "array", "description": "The Topic IDs for this entry. If empty, ideas should be set.", "items": { "type": "string" } } }, "description": "An idea activity entry.", "type": "object" }, "GoogleSearchIdeahubV1alphaIdeaState": { "properties": { "dismissed": { "type": "boolean", "description": "Whether the idea is dismissed." }, "name": { "type": "string", "description": "Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state}" }, "saved": { "description": "Whether the idea is saved.", "type": "boolean" } }, "type": "object", "description": "Represents idea state specific to a web property.", "id": "GoogleSearchIdeahubV1alphaIdeaState" } }, "protocol": "rest", "version": "v1alpha", "rootUrl": "https://ideahub.googleapis.com/", "parameters": { "prettyPrint": { "description": "Returns response with indentations and line breaks.", "type": "boolean", "default": "true", "location": "query" }, "quotaUser": { "location": "query", "type": "string", "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters." }, "upload_protocol": { "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location": "query", "type": "string" }, "access_token": { "type": "string", "description": "OAuth access token.", "location": "query" }, "alt": { "enum": [ "json", "media", "proto" ], "type": "string", "location": "query", "default": "json", "enumDescriptions": [ "Responses with Content-Type of application/json", "Media download with context-dependent Content-Type", "Responses with Content-Type of application/x-protobuf" ], "description": "Data format for response." }, "$.xgafv": { "location": "query", "type": "string", "enumDescriptions": [ "v1 error format", "v2 error format" ], "enum": [ "1", "2" ], "description": "V1 error format." }, "key": { "type": "string", "location": "query", "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token." }, "uploadType": { "type": "string", "location": "query", "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")." }, "oauth_token": { "type": "string", "location": "query", "description": "OAuth 2.0 token for the current user." }, "callback": { "type": "string", "description": "JSONP", "location": "query" }, "fields": { "type": "string", "description": "Selector specifying which fields to include in a partial response.", "location": "query" } }, "documentationLink": "https://console.cloud.google.com/apis/library/ideahub.googleapis.com" }
]===]))
