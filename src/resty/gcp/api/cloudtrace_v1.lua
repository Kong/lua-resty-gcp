local decode = require("cjson").new().decode
return assert(decode([===[
{ "auth": { "oauth2": { "scopes": { "https://www.googleapis.com/auth/cloud-platform": { "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account." }, "https://www.googleapis.com/auth/trace.readonly": { "description": "Read Trace data for a project or application" }, "https://www.googleapis.com/auth/trace.append": { "description": "Write Trace data for a project or application" } } } }, "mtlsRootUrl": "https://cloudtrace.mtls.googleapis.com/", "baseUrl": "https://cloudtrace.googleapis.com/", "servicePath": "", "schemas": { "Empty": { "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }", "type": "object", "id": "Empty", "properties": {} }, "TraceSpan": { "properties": { "kind": { "enumDescriptions": [ "Unspecified.", "Indicates that the span covers server-side handling of an RPC or other remote network request.", "Indicates that the span covers the client-side wrapper around an RPC or other remote request." ], "description": "Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `RPC_CLIENT` and `RPC_SERVER` to identify queueing latency associated with the span.", "type": "string", "enum": [ "SPAN_KIND_UNSPECIFIED", "RPC_SERVER", "RPC_CLIENT" ] }, "name": { "type": "string", "description": "Name of the span. Must be less than 128 bytes. The span name is sanitized and displayed in the Trace tool in the Google Cloud Platform Console. The name may be a method name or some other per-call site name. For the same executable and the same call point, a best practice is to use a consistent name, which makes it easier to correlate cross-trace spans." }, "endTime": { "type": "string", "format": "google-datetime", "description": "End time of the span in nanoseconds from the UNIX epoch." }, "labels": { "additionalProperties": { "type": "string" }, "description": "Collection of labels associated with the span. Label keys must be less than 128 bytes. Label values must be less than 16 kilobytes (10MB for `/stacktrace` values). Some predefined label keys exist, or you may create your own. When creating your own, we recommend the following formats: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/category/product/key` for agents of well-known products (e.g. `/db/mongodb/read_size`). LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `short_host/path/key` for domain-specific keys (e.g. `foo.com/myproduct/bar`) Predefined labels include: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/agent` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/component` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/error/message` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/error/name` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/client_city` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/client_country` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/client_protocol` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/client_region` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/host` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/method` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/path` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/redirected_url` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/request/size` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/response/size` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/route` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/status_code` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/url` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/http/user_agent` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/pid` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/stacktrace` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `/tid`", "type": "object" }, "startTime": { "description": "Start time of the span in nanoseconds from the UNIX epoch.", "type": "string", "format": "google-datetime" }, "spanId": { "description": "Identifier for the span. Must be a 64-bit integer other than 0 and unique within a trace. For example, `2205310701640571284`.", "format": "uint64", "type": "string" }, "parentSpanId": { "format": "uint64", "description": "Optional. ID of the parent span, if any.", "type": "string" } }, "description": "A span represents a single timed event within a trace. Spans can be nested and form a trace tree. Often, a trace contains a root span that describes the end-to-end latency of an operation and, optionally, one or more subspans for its suboperations. Spans do not need to be contiguous. There may be gaps between spans in a trace.", "id": "TraceSpan", "type": "object" }, "ListTracesResponse": { "description": "The response message for the `ListTraces` method.", "id": "ListTracesResponse", "properties": { "nextPageToken": { "type": "string", "description": "If defined, indicates that there are more traces that match the request and that this value should be passed to the next request to continue retrieving additional traces." }, "traces": { "type": "array", "description": "List of trace records as specified by the view parameter.", "items": { "$ref": "Trace" } } }, "type": "object" }, "Trace": { "type": "object", "properties": { "projectId": { "type": "string", "description": "Project ID of the Cloud project where the trace data is stored." }, "traceId": { "type": "string", "description": "Globally unique identifier for the trace. This identifier is a 128-bit numeric value formatted as a 32-byte hex string. For example, `382d4f4c6b7bb2f4a972559d9085001d`. The numeric value should not be zero." }, "spans": { "description": "Collection of spans in the trace.", "items": { "$ref": "TraceSpan" }, "type": "array" } }, "id": "Trace", "description": "A trace describes how long it takes for an application to perform an operation. It consists of a set of spans, each of which represent a single timed event within the operation." }, "Traces": { "id": "Traces", "type": "object", "properties": { "traces": { "type": "array", "items": { "$ref": "Trace" }, "description": "List of traces." } }, "description": "List of new or updated traces." } }, "title": "Cloud Trace API", "id": "cloudtrace:v1", "icons": { "x16": "http://www.google.com/images/icons/product/search-16.gif", "x32": "http://www.google.com/images/icons/product/search-32.gif" }, "parameters": { "access_token": { "description": "OAuth access token.", "location": "query", "type": "string" }, "key": { "location": "query", "type": "string", "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token." }, "oauth_token": { "type": "string", "description": "OAuth 2.0 token for the current user.", "location": "query" }, "fields": { "location": "query", "description": "Selector specifying which fields to include in a partial response.", "type": "string" }, "prettyPrint": { "type": "boolean", "location": "query", "default": "true", "description": "Returns response with indentations and line breaks." }, "alt": { "type": "string", "location": "query", "description": "Data format for response.", "default": "json", "enum": [ "json", "media", "proto" ], "enumDescriptions": [ "Responses with Content-Type of application/json", "Media download with context-dependent Content-Type", "Responses with Content-Type of application/x-protobuf" ] }, "callback": { "description": "JSONP", "type": "string", "location": "query" }, "quotaUser": { "location": "query", "type": "string", "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters." }, "upload_protocol": { "type": "string", "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location": "query" }, "$.xgafv": { "location": "query", "enumDescriptions": [ "v1 error format", "v2 error format" ], "enum": [ "1", "2" ], "description": "V1 error format.", "type": "string" }, "uploadType": { "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type": "string", "location": "query" } }, "version_module": true, "version": "v1", "canonicalName": "Cloud Trace", "batchPath": "batch", "fullyEncodeReservedExpansion": true, "kind": "discovery#restDescription", "protocol": "rest", "documentationLink": "https://cloud.google.com/trace", "ownerName": "Google", "description": "Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenTelemetry. ", "name": "cloudtrace", "basePath": "", "rootUrl": "https://cloudtrace.googleapis.com/", "ownerDomain": "google.com", "discoveryVersion": "v1", "revision": "20220622", "resources": { "projects": { "resources": { "traces": { "methods": { "list": { "parameterOrder": [ "projectId" ], "id": "cloudtrace.projects.traces.list", "response": { "$ref": "ListTracesResponse" }, "path": "v1/projects/{projectId}/traces", "description": "Returns a list of traces that match the specified filter conditions.", "httpMethod": "GET", "flatPath": "v1/projects/{projectId}/traces", "parameters": { "endTime": { "location": "query", "format": "google-datetime", "description": "End of the time interval (inclusive) during which the trace data was collected from the application.", "type": "string" }, "pageToken": { "description": "Token identifying the page of results to return. If provided, use the value of the `next_page_token` field from a previous request.", "location": "query", "type": "string" }, "startTime": { "format": "google-datetime", "type": "string", "description": "Start of the time interval (inclusive) during which the trace data was collected from the application.", "location": "query" }, "view": { "type": "string", "enumDescriptions": [ "Default is `MINIMAL` if unspecified.", "Minimal view of the trace record that contains only the project and trace IDs.", "Root span view of the trace record that returns the root spans along with the minimal trace data.", "Complete view of the trace record that contains the actual trace data. This is equivalent to calling the REST `get` or RPC `GetTrace` method using the ID of each listed trace." ], "enum": [ "VIEW_TYPE_UNSPECIFIED", "MINIMAL", "ROOTSPAN", "COMPLETE" ], "location": "query", "description": "Optional. Type of data returned for traces in the list. Default is `MINIMAL`." }, "orderBy": { "description": "Optional. Field used to sort the returned traces. Can be one of the following: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `trace_id` LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `name` (`name` field of root span in the trace) LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `duration` (difference between `end_time` and `start_time` fields of the root span) LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `start` (`start_time` field of the root span) Descending order can be specified by appending `desc` to the sort field (for example, `name desc`). Only one sort field is permitted.", "location": "query", "type": "string" }, "projectId": { "location": "path", "description": "Required. ID of the Cloud project where the trace data is stored.", "required": true, "type": "string" }, "filter": { "type": "string", "description": "Optional. A filter against labels for the request. By default, searches use prefix matching. To specify exact match, prepend a plus symbol (`+`) to the search term. Multiple terms are ANDed. Syntax: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root span starts with `NAME_PREFIX`. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `+root:NAME` or `+NAME`: Return traces where any root span's name is exactly `NAME`. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `span:NAME_PREFIX`: Return traces where any span starts with `NAME_PREFIX`. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `+span:NAME`: Return traces where any span's name is exactly `NAME`. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `latency:DURATION`: Return traces whose overall latency is greater or equal to than `DURATION`. Accepted units are nanoseconds (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For example, `latency:24ms` returns traces whose overall latency is greater than or equal to 24 milliseconds. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `label:LABEL_KEY`: Return all traces containing the specified label key (exact match, case-sensitive) regardless of the key:value pair's value (including empty values). LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified label key (exact match, case-sensitive) whose value starts with `VALUE_PREFIX`. Both a key and a value must be specified. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair exactly matching the specified text. Both a key and a value must be specified. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `method:VALUE`: Equivalent to `/http/method:VALUE`. LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh `url:VALUE`: Equivalent to `/http/url:VALUE`.", "location": "query" }, "pageSize": { "type": "integer", "location": "query", "format": "int32", "description": "Optional. Maximum number of traces to return. If not specified or \u003c= 0, the implementation selects a reasonable value. The implementation may return fewer traces than the requested page size." } }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/trace.readonly" ] }, "get": { "parameterOrder": [ "projectId", "traceId" ], "id": "cloudtrace.projects.traces.get", "httpMethod": "GET", "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/trace.readonly" ], "description": "Gets a single trace by its ID.", "parameters": { "projectId": { "location": "path", "type": "string", "description": "Required. ID of the Cloud project where the trace data is stored.", "required": true }, "traceId": { "location": "path", "description": "Required. ID of the trace to return.", "type": "string", "required": true } }, "response": { "$ref": "Trace" }, "flatPath": "v1/projects/{projectId}/traces/{traceId}", "path": "v1/projects/{projectId}/traces/{traceId}" } } } }, "methods": { "patchTraces": { "description": "Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created.", "parameters": { "projectId": { "type": "string", "required": true, "description": "Required. ID of the Cloud project where the trace data is stored.", "location": "path" } }, "flatPath": "v1/projects/{projectId}/traces", "request": { "$ref": "Traces" }, "path": "v1/projects/{projectId}/traces", "parameterOrder": [ "projectId" ], "httpMethod": "PATCH", "response": { "$ref": "Empty" }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/trace.append" ], "id": "cloudtrace.projects.patchTraces" } } } } }
]===]))
