local decode = require("cjson").new().decode
return assert(decode([===[
{ "version": "v1p1beta1", "mtlsRootUrl": "https://vision.mtls.googleapis.com/", "rootUrl": "https://vision.googleapis.com/", "schemas": { "GoogleCloudVisionV1p3beta1GcsDestination": { "description": "The Google Cloud Storage location where the output will be written to.", "type": "object", "properties": { "uri": { "type": "string", "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files." } }, "id": "GoogleCloudVisionV1p3beta1GcsDestination" }, "Page": { "description": "Detected page from OCR.", "properties": { "blocks": { "type": "array", "description": "List of blocks of text, images etc on this page.", "items": { "$ref": "Block" } }, "width": { "type": "integer", "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.", "format": "int32" }, "property": { "description": "Additional information detected on the page.", "$ref": "TextProperty" }, "height": { "format": "int32", "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.", "type": "integer" }, "confidence": { "description": "Confidence of the OCR results on the page. Range [0, 1].", "type": "number", "format": "float" } }, "id": "Page", "type": "object" }, "AsyncBatchAnnotateImagesResponse": { "description": "Response to an async batch image annotation request.", "id": "AsyncBatchAnnotateImagesResponse", "properties": { "outputConfig": { "$ref": "OutputConfig", "description": "The output location and metadata from AsyncBatchAnnotateImagesRequest." } }, "type": "object" }, "GoogleCloudVisionV1p1beta1OperationMetadata": { "type": "object", "properties": { "updateTime": { "type": "string", "description": "The time when the operation result was last updated.", "format": "google-datetime" }, "createTime": { "description": "The time when the batch request was received.", "format": "google-datetime", "type": "string" }, "state": { "type": "string", "description": "Current state of the batch operation.", "enum": [ "STATE_UNSPECIFIED", "CREATED", "RUNNING", "DONE", "CANCELLED" ], "enumDescriptions": [ "Invalid.", "Request is received.", "Request is actively being processed.", "The batch processing is done.", "The batch processing was cancelled." ] } }, "description": "Contains metadata for the BatchAnnotateImages operation.", "id": "GoogleCloudVisionV1p1beta1OperationMetadata" }, "GoogleCloudVisionV1p1beta1BatchAnnotateImagesResponse": { "id": "GoogleCloudVisionV1p1beta1BatchAnnotateImagesResponse", "type": "object", "properties": { "responses": { "description": "Individual responses to image annotation requests within the batch.", "items": { "$ref": "GoogleCloudVisionV1p1beta1AnnotateImageResponse" }, "type": "array" } }, "description": "Response to a batch image annotation request." }, "GoogleCloudVisionV1p4beta1Word": { "description": "A word representation.", "id": "GoogleCloudVisionV1p4beta1Word", "properties": { "boundingBox": { "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly", "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "property": { "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty", "description": "Additional information detected for the word." }, "symbols": { "type": "array", "description": "List of symbols in the word. The order of the symbols follows the natural reading order.", "items": { "$ref": "GoogleCloudVisionV1p4beta1Symbol" } }, "confidence": { "type": "number", "description": "Confidence of the OCR results for the word. Range [0, 1].", "format": "float" } }, "type": "object" }, "GoogleCloudVisionV1p4beta1EntityAnnotation": { "type": "object", "description": "Set of detected entity features.", "id": "GoogleCloudVisionV1p4beta1EntityAnnotation", "properties": { "confidence": { "format": "float", "type": "number", "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1]." }, "boundingPoly": { "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features.", "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly" }, "locale": { "type": "string", "description": "The language code for the locale in which the entity textual `description` is expressed." }, "locations": { "items": { "$ref": "GoogleCloudVisionV1p4beta1LocationInfo" }, "type": "array", "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks." }, "score": { "format": "float", "description": "Overall score of the result. Range [0, 1].", "type": "number" }, "properties": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1Property" }, "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity." }, "mid": { "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).", "type": "string" }, "topicality": { "format": "float", "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].", "type": "number" }, "description": { "type": "string", "description": "Entity textual description, expressed in its `locale` language." } } }, "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateImagesRequest": { "id": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateImagesRequest", "type": "object", "properties": { "outputConfig": { "description": "Required. The desired output location and metadata (e.g. format).", "$ref": "GoogleCloudVisionV1p1beta1OutputConfig" }, "requests": { "description": "Required. Individual image annotation requests for this batch.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1AnnotateImageRequest" } }, "parent": { "type": "string", "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`." } }, "description": "Request for async image annotation for a list of images." }, "GoogleCloudVisionV1p1beta1ImageContext": { "id": "GoogleCloudVisionV1p1beta1ImageContext", "type": "object", "properties": { "cropHintsParams": { "description": "Parameters for crop hints annotation request.", "$ref": "GoogleCloudVisionV1p1beta1CropHintsParams" }, "languageHints": { "type": "array", "description": "List of languages to use for TEXT_DETECTION. In most cases, an empty value yields the best results since it enables automatic language detection. For languages based on the Latin alphabet, setting `language_hints` is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will be a significant hindrance if the hint is wrong). Text detection returns an error if one or more of the specified languages is not one of the [supported languages](https://cloud.google.com/vision/docs/languages).", "items": { "type": "string" } }, "textDetectionParams": { "description": "Parameters for text detection and document text detection.", "$ref": "GoogleCloudVisionV1p1beta1TextDetectionParams" }, "webDetectionParams": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionParams", "description": "Parameters for web detection." }, "latLongRect": { "description": "Not used.", "$ref": "GoogleCloudVisionV1p1beta1LatLongRect" }, "productSearchParams": { "description": "Parameters for product search.", "$ref": "GoogleCloudVisionV1p1beta1ProductSearchParams" } }, "description": "Image context and/or feature-specific parameters." }, "GoogleCloudVisionV1p3beta1LocationInfo": { "description": "Detected entity location information.", "type": "object", "properties": { "latLng": { "$ref": "LatLng", "description": "lat/long location coordinates." } }, "id": "GoogleCloudVisionV1p3beta1LocationInfo" }, "GoogleCloudVisionV1p2beta1AnnotateFileResponse": { "id": "GoogleCloudVisionV1p2beta1AnnotateFileResponse", "properties": { "totalPages": { "format": "int32", "description": "This field gives the total number of pages in the file.", "type": "integer" }, "error": { "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case.", "$ref": "Status" }, "responses": { "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1AnnotateImageResponse" } }, "inputConfig": { "description": "Information about the file for which this response is generated.", "$ref": "GoogleCloudVisionV1p2beta1InputConfig" } }, "type": "object", "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses." }, "GoogleCloudVisionV1p2beta1Property": { "description": "A `Property` consists of a user-supplied name/value pair.", "id": "GoogleCloudVisionV1p2beta1Property", "type": "object", "properties": { "value": { "description": "Value of the property.", "type": "string" }, "name": { "description": "Name of the property.", "type": "string" }, "uint64Value": { "format": "uint64", "type": "string", "description": "Value of numeric properties." } } }, "GoogleCloudVisionV1p2beta1InputConfig": { "properties": { "content": { "format": "byte", "type": "string", "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests." }, "gcsSource": { "description": "The Google Cloud Storage location to read the input from.", "$ref": "GoogleCloudVisionV1p2beta1GcsSource" }, "mimeType": { "type": "string", "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported." } }, "description": "The desired input location and metadata.", "type": "object", "id": "GoogleCloudVisionV1p2beta1InputConfig" }, "GoogleCloudVisionV1p1beta1AnnotateFileResponse": { "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.", "properties": { "responses": { "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.", "items": { "$ref": "GoogleCloudVisionV1p1beta1AnnotateImageResponse" }, "type": "array" }, "totalPages": { "format": "int32", "description": "This field gives the total number of pages in the file.", "type": "integer" }, "error": { "$ref": "Status", "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case." }, "inputConfig": { "$ref": "GoogleCloudVisionV1p1beta1InputConfig", "description": "Information about the file for which this response is generated." } }, "id": "GoogleCloudVisionV1p1beta1AnnotateFileResponse", "type": "object" }, "GoogleCloudVisionV1p1beta1ImageProperties": { "properties": { "dominantColors": { "description": "If present, dominant colors completed successfully.", "$ref": "GoogleCloudVisionV1p1beta1DominantColorsAnnotation" } }, "id": "GoogleCloudVisionV1p1beta1ImageProperties", "description": "Stores image properties, such as dominant colors.", "type": "object" }, "GoogleCloudVisionV1p2beta1Position": { "id": "GoogleCloudVisionV1p2beta1Position", "type": "object", "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.", "properties": { "y": { "format": "float", "description": "Y coordinate.", "type": "number" }, "z": { "format": "float", "type": "number", "description": "Z coordinate (or depth)." }, "x": { "description": "X coordinate.", "format": "float", "type": "number" } } }, "GoogleCloudVisionV1p1beta1ProductSearchResultsResult": { "description": "Information about a product.", "properties": { "product": { "description": "The Product.", "$ref": "GoogleCloudVisionV1p1beta1Product" }, "image": { "type": "string", "description": "The resource name of the image from the product that is the closest match to the query." }, "score": { "format": "float", "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).", "type": "number" } }, "type": "object", "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult" }, "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult": { "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult", "properties": { "objectAnnotations": { "description": "List of generic predictions for the object in the bounding box.", "items": { "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation" }, "type": "array" }, "results": { "items": { "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult" }, "description": "List of results, one for each product match.", "type": "array" }, "boundingPoly": { "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly", "description": "The bounding polygon around the product detected in the query image." } }, "description": "Information about the products similar to a single product in a query image.", "type": "object" }, "GoogleCloudVisionV1p4beta1WebDetection": { "type": "object", "description": "Relevant information for the image from the Internet.", "id": "GoogleCloudVisionV1p4beta1WebDetection", "properties": { "visuallySimilarImages": { "items": { "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage" }, "description": "The visually similar image results.", "type": "array" }, "fullMatchingImages": { "type": "array", "description": "Fully matching images from the Internet. Can include resized copies of the query image.", "items": { "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage" } }, "webEntities": { "description": "Deduced entities from similar images on the Internet.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebEntity" } }, "partialMatchingImages": { "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.", "items": { "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage" }, "type": "array" }, "bestGuessLabels": { "items": { "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebLabel" }, "type": "array", "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web." }, "pagesWithMatchingImages": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebPage" }, "description": "Web pages containing the matching images from the Internet." } } }, "BatchAnnotateFilesResponse": { "properties": { "responses": { "items": { "$ref": "AnnotateFileResponse" }, "description": "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest.", "type": "array" } }, "id": "BatchAnnotateFilesResponse", "description": "A list of file annotation responses.", "type": "object" }, "GoogleCloudVisionV1p3beta1ProductKeyValue": { "properties": { "key": { "type": "string", "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes." }, "value": { "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.", "type": "string" } }, "type": "object", "id": "GoogleCloudVisionV1p3beta1ProductKeyValue", "description": "A product label represented as a key-value pair." }, "GoogleCloudVisionV1p1beta1BatchAnnotateImagesRequest": { "properties": { "requests": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1AnnotateImageRequest" }, "description": "Required. Individual image annotation requests for this batch." }, "parent": { "type": "string", "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`." } }, "id": "GoogleCloudVisionV1p1beta1BatchAnnotateImagesRequest", "description": "Multiple image annotation requests are batched into a single service call.", "type": "object" }, "GoogleCloudVisionV1p2beta1Word": { "type": "object", "properties": { "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results for the word. Range [0, 1]." }, "symbols": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1Symbol" }, "description": "List of symbols in the word. The order of the symbols follows the natural reading order." }, "boundingBox": { "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).", "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly" }, "property": { "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty", "description": "Additional information detected for the word." } }, "id": "GoogleCloudVisionV1p2beta1Word", "description": "A word representation." }, "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak": { "description": "Detected start or end of a structural component.", "properties": { "isPrefix": { "description": "True if break prepends the element.", "type": "boolean" }, "type": { "description": "Detected break type.", "type": "string", "enum": [ "UNKNOWN", "SPACE", "SURE_SPACE", "EOL_SURE_SPACE", "HYPHEN", "LINE_BREAK" ], "enumDescriptions": [ "Unknown break label type.", "Regular space.", "Sure space (very wide).", "Line-wrapping break.", "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.", "Line break that ends a paragraph." ] } }, "id": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak", "type": "object" }, "GoogleCloudVisionV1p1beta1WebDetectionWebPage": { "properties": { "pageTitle": { "type": "string", "description": "Title for the web page, may contain HTML markups." }, "partialMatchingImages": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage" }, "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops." }, "score": { "type": "number", "format": "float", "description": "(Deprecated) Overall relevancy score for the web page." }, "url": { "description": "The result web page URL.", "type": "string" }, "fullMatchingImages": { "description": "Fully matching images on the page. Can include resized copies of the query image.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage" } } }, "id": "GoogleCloudVisionV1p1beta1WebDetectionWebPage", "description": "Metadata for web pages.", "type": "object" }, "GoogleCloudVisionV1p1beta1WebDetectionWebLabel": { "properties": { "languageCode": { "type": "string", "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier." }, "label": { "description": "Label for extra metadata.", "type": "string" } }, "id": "GoogleCloudVisionV1p1beta1WebDetectionWebLabel", "description": "Label to provide extra metadata for the web detection.", "type": "object" }, "GoogleCloudVisionV1p3beta1GcsSource": { "properties": { "uri": { "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.", "type": "string" } }, "id": "GoogleCloudVisionV1p3beta1GcsSource", "type": "object", "description": "The Google Cloud Storage location where the input will be read from." }, "Symbol": { "description": "A single symbol representation.", "id": "Symbol", "type": "object", "properties": { "property": { "$ref": "TextProperty", "description": "Additional information detected for the symbol." }, "text": { "description": "The actual UTF-8 representation of the symbol.", "type": "string" }, "boundingBox": { "$ref": "BoundingPoly", "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "confidence": { "description": "Confidence of the OCR results for the symbol. Range [0, 1].", "format": "float", "type": "number" } } }, "GoogleCloudVisionV1p3beta1BoundingPoly": { "type": "object", "properties": { "normalizedVertices": { "items": { "$ref": "GoogleCloudVisionV1p3beta1NormalizedVertex" }, "type": "array", "description": "The bounding polygon normalized vertices." }, "vertices": { "type": "array", "description": "The bounding polygon vertices.", "items": { "$ref": "GoogleCloudVisionV1p3beta1Vertex" } } }, "description": "A bounding polygon for the detected image annotation.", "id": "GoogleCloudVisionV1p3beta1BoundingPoly" }, "GoogleCloudVisionV1p3beta1AnnotateFileResponse": { "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.", "id": "GoogleCloudVisionV1p3beta1AnnotateFileResponse", "properties": { "inputConfig": { "description": "Information about the file for which this response is generated.", "$ref": "GoogleCloudVisionV1p3beta1InputConfig" }, "totalPages": { "description": "This field gives the total number of pages in the file.", "format": "int32", "type": "integer" }, "error": { "$ref": "Status", "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case." }, "responses": { "type": "array", "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.", "items": { "$ref": "GoogleCloudVisionV1p3beta1AnnotateImageResponse" } } }, "type": "object" }, "GoogleCloudVisionV1p3beta1ImageAnnotationContext": { "id": "GoogleCloudVisionV1p3beta1ImageAnnotationContext", "properties": { "uri": { "type": "string", "description": "The URI of the file used to produce the image." }, "pageNumber": { "format": "int32", "type": "integer", "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image." } }, "type": "object", "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image." }, "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark": { "type": "object", "id": "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark", "properties": { "type": { "type": "string", "description": "Face landmark type.", "enumDescriptions": [ "Unknown face landmark detected. Should not be filled.", "Left eye.", "Right eye.", "Left of left eyebrow.", "Right of left eyebrow.", "Left of right eyebrow.", "Right of right eyebrow.", "Midpoint between eyes.", "Nose tip.", "Upper lip.", "Lower lip.", "Mouth left.", "Mouth right.", "Mouth center.", "Nose, bottom right.", "Nose, bottom left.", "Nose, bottom center.", "Left eye, top boundary.", "Left eye, right corner.", "Left eye, bottom boundary.", "Left eye, left corner.", "Right eye, top boundary.", "Right eye, right corner.", "Right eye, bottom boundary.", "Right eye, left corner.", "Left eyebrow, upper midpoint.", "Right eyebrow, upper midpoint.", "Left ear tragion.", "Right ear tragion.", "Left eye pupil.", "Right eye pupil.", "Forehead glabella.", "Chin gnathion.", "Chin left gonion.", "Chin right gonion.", "Left cheek center.", "Right cheek center." ], "enum": [ "UNKNOWN_LANDMARK", "LEFT_EYE", "RIGHT_EYE", "LEFT_OF_LEFT_EYEBROW", "RIGHT_OF_LEFT_EYEBROW", "LEFT_OF_RIGHT_EYEBROW", "RIGHT_OF_RIGHT_EYEBROW", "MIDPOINT_BETWEEN_EYES", "NOSE_TIP", "UPPER_LIP", "LOWER_LIP", "MOUTH_LEFT", "MOUTH_RIGHT", "MOUTH_CENTER", "NOSE_BOTTOM_RIGHT", "NOSE_BOTTOM_LEFT", "NOSE_BOTTOM_CENTER", "LEFT_EYE_TOP_BOUNDARY", "LEFT_EYE_RIGHT_CORNER", "LEFT_EYE_BOTTOM_BOUNDARY", "LEFT_EYE_LEFT_CORNER", "RIGHT_EYE_TOP_BOUNDARY", "RIGHT_EYE_RIGHT_CORNER", "RIGHT_EYE_BOTTOM_BOUNDARY", "RIGHT_EYE_LEFT_CORNER", "LEFT_EYEBROW_UPPER_MIDPOINT", "RIGHT_EYEBROW_UPPER_MIDPOINT", "LEFT_EAR_TRAGION", "RIGHT_EAR_TRAGION", "LEFT_EYE_PUPIL", "RIGHT_EYE_PUPIL", "FOREHEAD_GLABELLA", "CHIN_GNATHION", "CHIN_LEFT_GONION", "CHIN_RIGHT_GONION", "LEFT_CHEEK_CENTER", "RIGHT_CHEEK_CENTER" ] }, "position": { "description": "Face landmark position.", "$ref": "GoogleCloudVisionV1p3beta1Position" } }, "description": "A face-specific landmark (for example, a face feature)." }, "GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest": { "id": "GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest", "description": "An offline file annotation request.", "properties": { "outputConfig": { "description": "Required. The desired output location and metadata (e.g. format).", "$ref": "GoogleCloudVisionV1p1beta1OutputConfig" }, "imageContext": { "description": "Additional context that may accompany the image(s) in the file.", "$ref": "GoogleCloudVisionV1p1beta1ImageContext" }, "inputConfig": { "description": "Required. Information about the input file.", "$ref": "GoogleCloudVisionV1p1beta1InputConfig" }, "features": { "items": { "$ref": "GoogleCloudVisionV1p1beta1Feature" }, "type": "array", "description": "Required. Requested features." } }, "type": "object" }, "GoogleCloudVisionV1p3beta1WebDetectionWebEntity": { "type": "object", "properties": { "entityId": { "description": "Opaque entity ID.", "type": "string" }, "description": { "description": "Canonical description of the entity, in English.", "type": "string" }, "score": { "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.", "type": "number", "format": "float" } }, "description": "Entity deduced from similar images on the Internet.", "id": "GoogleCloudVisionV1p3beta1WebDetectionWebEntity" }, "GoogleCloudVisionV1p1beta1AnnotateImageRequest": { "type": "object", "description": "Request for performing Google Cloud Vision API tasks over a user-provided image, with user-requested features, and with context information.", "id": "GoogleCloudVisionV1p1beta1AnnotateImageRequest", "properties": { "features": { "type": "array", "description": "Requested features.", "items": { "$ref": "GoogleCloudVisionV1p1beta1Feature" } }, "image": { "description": "The image to be processed.", "$ref": "GoogleCloudVisionV1p1beta1Image" }, "imageContext": { "description": "Additional context that may accompany the image.", "$ref": "GoogleCloudVisionV1p1beta1ImageContext" } } }, "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult": { "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult", "description": "Information about the products similar to a single product in a query image.", "type": "object", "properties": { "results": { "items": { "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult" }, "type": "array", "description": "List of results, one for each product match." }, "objectAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation" }, "type": "array", "description": "List of generic predictions for the object in the bounding box." }, "boundingPoly": { "description": "The bounding polygon around the product detected in the query image.", "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly" } } }, "GoogleCloudVisionV1p2beta1Block": { "description": "Logical element on the page.", "type": "object", "properties": { "boundingBox": { "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly", "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "paragraphs": { "description": "List of paragraphs in this block (if this blocks is of type text).", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1Paragraph" } }, "blockType": { "description": "Detected block type (text, image etc) for this block.", "enumDescriptions": [ "Unknown block type.", "Regular text block.", "Table block.", "Image block.", "Horizontal/vertical line box.", "Barcode block." ], "enum": [ "UNKNOWN", "TEXT", "TABLE", "PICTURE", "RULER", "BARCODE" ], "type": "string" }, "property": { "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty", "description": "Additional information detected for the block." }, "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results on the block. Range [0, 1]." } }, "id": "GoogleCloudVisionV1p2beta1Block" }, "GoogleCloudVisionV1p3beta1Property": { "description": "A `Property` consists of a user-supplied name/value pair.", "type": "object", "properties": { "value": { "description": "Value of the property.", "type": "string" }, "name": { "type": "string", "description": "Name of the property." }, "uint64Value": { "type": "string", "format": "uint64", "description": "Value of numeric properties." } }, "id": "GoogleCloudVisionV1p3beta1Property" }, "GoogleCloudVisionV1p2beta1OperationMetadata": { "type": "object", "description": "Contains metadata for the BatchAnnotateImages operation.", "properties": { "state": { "type": "string", "description": "Current state of the batch operation.", "enumDescriptions": [ "Invalid.", "Request is received.", "Request is actively being processed.", "The batch processing is done.", "The batch processing was cancelled." ], "enum": [ "STATE_UNSPECIFIED", "CREATED", "RUNNING", "DONE", "CANCELLED" ] }, "createTime": { "format": "google-datetime", "type": "string", "description": "The time when the batch request was received." }, "updateTime": { "format": "google-datetime", "description": "The time when the operation result was last updated.", "type": "string" } }, "id": "GoogleCloudVisionV1p2beta1OperationMetadata" }, "GoogleCloudVisionV1p1beta1AnnotateFileRequest": { "type": "object", "id": "GoogleCloudVisionV1p1beta1AnnotateFileRequest", "description": "A request to annotate one single file, e.g. a PDF, TIFF or GIF file.", "properties": { "imageContext": { "$ref": "GoogleCloudVisionV1p1beta1ImageContext", "description": "Additional context that may accompany the image(s) in the file." }, "features": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1Feature" }, "description": "Required. Requested features." }, "pages": { "type": "array", "description": "Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative. Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file.", "items": { "type": "integer", "format": "int32" } }, "inputConfig": { "description": "Required. Information about the input file.", "$ref": "GoogleCloudVisionV1p1beta1InputConfig" } } }, "SafeSearchAnnotation": { "id": "SafeSearchAnnotation", "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).", "properties": { "spoof": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.", "type": "string" }, "racy": { "type": "string", "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "adult": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.", "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "violence": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Likelihood that this image contains violent content." }, "medical": { "description": "Likelihood that this is a medical image.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] } }, "type": "object" }, "GoogleCloudVisionV1p4beta1FaceAnnotation": { "description": "A face annotation object contains the results of face detection.", "id": "GoogleCloudVisionV1p4beta1FaceAnnotation", "properties": { "detectionConfidence": { "type": "number", "description": "Detection confidence. Range [0, 1].", "format": "float" }, "fdBoundingPoly": { "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly", "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix." }, "tiltAngle": { "type": "number", "format": "float", "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180]." }, "surpriseLikelihood": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Surprise likelihood.", "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "joyLikelihood": { "type": "string", "description": "Joy likelihood.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "landmarkingConfidence": { "format": "float", "type": "number", "description": "Face landmarking confidence. Range [0, 1]." }, "panAngle": { "format": "float", "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].", "type": "number" }, "recognitionResult": { "items": { "$ref": "GoogleCloudVisionV1p4beta1FaceRecognitionResult" }, "type": "array", "description": "Additional recognition information. Only computed if image_context.face_recognition_params is provided, **and** a match is found to a Celebrity in the input CelebritySet. This field is sorted in order of decreasing confidence values." }, "sorrowLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string", "description": "Sorrow likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "rollAngle": { "format": "float", "type": "number", "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]." }, "boundingPoly": { "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated.", "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly" }, "blurredLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Blurred likelihood.", "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "landmarks": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark" }, "description": "Detected face landmarks." }, "headwearLikelihood": { "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Headwear likelihood.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "underExposedLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Under-exposed likelihood." }, "angerLikelihood": { "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Anger likelihood.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] } }, "type": "object" }, "GoogleCloudVisionV1p3beta1Word": { "type": "object", "properties": { "confidence": { "description": "Confidence of the OCR results for the word. Range [0, 1].", "format": "float", "type": "number" }, "boundingBox": { "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly", "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "property": { "description": "Additional information detected for the word.", "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty" }, "symbols": { "items": { "$ref": "GoogleCloudVisionV1p3beta1Symbol" }, "type": "array", "description": "List of symbols in the word. The order of the symbols follows the natural reading order." } }, "description": "A word representation.", "id": "GoogleCloudVisionV1p3beta1Word" }, "GoogleCloudVisionV1p4beta1BatchOperationMetadata": { "properties": { "state": { "enumDescriptions": [ "Invalid.", "Request is actively being processed.", "The request is done and at least one item has been successfully processed.", "The request is done and no item has been successfully processed.", "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request." ], "enum": [ "STATE_UNSPECIFIED", "PROCESSING", "SUCCESSFUL", "FAILED", "CANCELLED" ], "type": "string", "description": "The current state of the batch operation." }, "submitTime": { "type": "string", "description": "The time when the batch request was submitted to the server.", "format": "google-datetime" }, "endTime": { "format": "google-datetime", "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true.", "type": "string" } }, "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.", "id": "GoogleCloudVisionV1p4beta1BatchOperationMetadata", "type": "object" }, "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage": { "properties": { "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "confidence": { "type": "number", "format": "float", "description": "Confidence of detected language. Range [0, 1]." } }, "type": "object", "description": "Detected language for a structural component.", "id": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage" }, "GoogleCloudVisionV1p3beta1ReferenceImage": { "properties": { "uri": { "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.", "type": "string" }, "boundingPolys": { "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly" } }, "name": { "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.", "type": "string" } }, "type": "object", "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes.", "id": "GoogleCloudVisionV1p3beta1ReferenceImage" }, "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark": { "type": "object", "description": "A face-specific landmark (for example, a face feature).", "id": "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark", "properties": { "type": { "type": "string", "description": "Face landmark type.", "enum": [ "UNKNOWN_LANDMARK", "LEFT_EYE", "RIGHT_EYE", "LEFT_OF_LEFT_EYEBROW", "RIGHT_OF_LEFT_EYEBROW", "LEFT_OF_RIGHT_EYEBROW", "RIGHT_OF_RIGHT_EYEBROW", "MIDPOINT_BETWEEN_EYES", "NOSE_TIP", "UPPER_LIP", "LOWER_LIP", "MOUTH_LEFT", "MOUTH_RIGHT", "MOUTH_CENTER", "NOSE_BOTTOM_RIGHT", "NOSE_BOTTOM_LEFT", "NOSE_BOTTOM_CENTER", "LEFT_EYE_TOP_BOUNDARY", "LEFT_EYE_RIGHT_CORNER", "LEFT_EYE_BOTTOM_BOUNDARY", "LEFT_EYE_LEFT_CORNER", "RIGHT_EYE_TOP_BOUNDARY", "RIGHT_EYE_RIGHT_CORNER", "RIGHT_EYE_BOTTOM_BOUNDARY", "RIGHT_EYE_LEFT_CORNER", "LEFT_EYEBROW_UPPER_MIDPOINT", "RIGHT_EYEBROW_UPPER_MIDPOINT", "LEFT_EAR_TRAGION", "RIGHT_EAR_TRAGION", "LEFT_EYE_PUPIL", "RIGHT_EYE_PUPIL", "FOREHEAD_GLABELLA", "CHIN_GNATHION", "CHIN_LEFT_GONION", "CHIN_RIGHT_GONION", "LEFT_CHEEK_CENTER", "RIGHT_CHEEK_CENTER" ], "enumDescriptions": [ "Unknown face landmark detected. Should not be filled.", "Left eye.", "Right eye.", "Left of left eyebrow.", "Right of left eyebrow.", "Left of right eyebrow.", "Right of right eyebrow.", "Midpoint between eyes.", "Nose tip.", "Upper lip.", "Lower lip.", "Mouth left.", "Mouth right.", "Mouth center.", "Nose, bottom right.", "Nose, bottom left.", "Nose, bottom center.", "Left eye, top boundary.", "Left eye, right corner.", "Left eye, bottom boundary.", "Left eye, left corner.", "Right eye, top boundary.", "Right eye, right corner.", "Right eye, bottom boundary.", "Right eye, left corner.", "Left eyebrow, upper midpoint.", "Right eyebrow, upper midpoint.", "Left ear tragion.", "Right ear tragion.", "Left eye pupil.", "Right eye pupil.", "Forehead glabella.", "Chin gnathion.", "Chin left gonion.", "Chin right gonion.", "Left cheek center.", "Right cheek center." ] }, "position": { "$ref": "GoogleCloudVisionV1p1beta1Position", "description": "Face landmark position." } } }, "DetectedBreak": { "description": "Detected start or end of a structural component.", "type": "object", "id": "DetectedBreak", "properties": { "isPrefix": { "type": "boolean", "description": "True if break prepends the element." }, "type": { "enumDescriptions": [ "Unknown break label type.", "Regular space.", "Sure space (very wide).", "Line-wrapping break.", "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.", "Line break that ends a paragraph." ], "type": "string", "enum": [ "UNKNOWN", "SPACE", "SURE_SPACE", "EOL_SURE_SPACE", "HYPHEN", "LINE_BREAK" ], "description": "Detected break type." } } }, "GoogleCloudVisionV1p4beta1ImageProperties": { "id": "GoogleCloudVisionV1p4beta1ImageProperties", "type": "object", "properties": { "dominantColors": { "$ref": "GoogleCloudVisionV1p4beta1DominantColorsAnnotation", "description": "If present, dominant colors completed successfully." } }, "description": "Stores image properties, such as dominant colors." }, "BatchOperationMetadata": { "properties": { "endTime": { "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true.", "type": "string", "format": "google-datetime" }, "submitTime": { "format": "google-datetime", "description": "The time when the batch request was submitted to the server.", "type": "string" }, "state": { "enumDescriptions": [ "Invalid.", "Request is actively being processed.", "The request is done and at least one item has been successfully processed.", "The request is done and no item has been successfully processed.", "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request." ], "description": "The current state of the batch operation.", "enum": [ "STATE_UNSPECIFIED", "PROCESSING", "SUCCESSFUL", "FAILED", "CANCELLED" ], "type": "string" } }, "id": "BatchOperationMetadata", "type": "object", "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service." }, "GoogleCloudVisionV1p2beta1WebDetectionWebLabel": { "properties": { "languageCode": { "type": "string", "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier." }, "label": { "description": "Label for extra metadata.", "type": "string" } }, "id": "GoogleCloudVisionV1p2beta1WebDetectionWebLabel", "description": "Label to provide extra metadata for the web detection.", "type": "object" }, "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty": { "properties": { "detectedBreak": { "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak", "description": "Detected start or end of a text segment." }, "detectedLanguages": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage" }, "description": "A list of detected languages together with confidence." } }, "id": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty", "description": "Additional information detected on the structural component.", "type": "object" }, "GoogleCloudVisionV1p2beta1AsyncBatchAnnotateFilesResponse": { "id": "GoogleCloudVisionV1p2beta1AsyncBatchAnnotateFilesResponse", "properties": { "responses": { "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse" } } }, "description": "Response to an async batch file annotation request.", "type": "object" }, "GoogleCloudVisionV1p1beta1Paragraph": { "properties": { "property": { "description": "Additional information detected for the paragraph.", "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty" }, "words": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1Word" }, "description": "List of all words in this paragraph." }, "boundingBox": { "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).", "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly" }, "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results for the paragraph. Range [0, 1]." } }, "description": "Structural unit of text representing a number of words in certain order.", "type": "object", "id": "GoogleCloudVisionV1p1beta1Paragraph" }, "GoogleCloudVisionV1p1beta1CropHintsParams": { "id": "GoogleCloudVisionV1p1beta1CropHintsParams", "properties": { "aspectRatios": { "items": { "type": "number", "format": "float" }, "type": "array", "description": "Aspect ratios in floats, representing the ratio of the width to the height of the image. For example, if the desired aspect ratio is 4/3, the corresponding float value should be 1.33333. If not specified, the best possible crop is returned. The number of provided aspect ratios is limited to a maximum of 16; any aspect ratios provided after the 16th are ignored." } }, "description": "Parameters for crop hints annotation request.", "type": "object" }, "GoogleCloudVisionV1p1beta1FaceAnnotation": { "type": "object", "id": "GoogleCloudVisionV1p1beta1FaceAnnotation", "description": "A face annotation object contains the results of face detection.", "properties": { "fdBoundingPoly": { "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly", "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix." }, "landmarks": { "description": "Detected face landmarks.", "items": { "$ref": "GoogleCloudVisionV1p1beta1FaceAnnotationLandmark" }, "type": "array" }, "headwearLikelihood": { "description": "Headwear likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "panAngle": { "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].", "type": "number", "format": "float" }, "detectionConfidence": { "type": "number", "description": "Detection confidence. Range [0, 1].", "format": "float" }, "boundingPoly": { "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated.", "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly" }, "surpriseLikelihood": { "description": "Surprise likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "landmarkingConfidence": { "type": "number", "description": "Face landmarking confidence. Range [0, 1].", "format": "float" }, "underExposedLikelihood": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Under-exposed likelihood.", "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "rollAngle": { "format": "float", "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].", "type": "number" }, "angerLikelihood": { "description": "Anger likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string" }, "blurredLikelihood": { "type": "string", "description": "Blurred likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "sorrowLikelihood": { "description": "Sorrow likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string" }, "joyLikelihood": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "description": "Joy likelihood.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "tiltAngle": { "type": "number", "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].", "format": "float" } } }, "GoogleCloudVisionV1p1beta1Product": { "id": "GoogleCloudVisionV1p1beta1Product", "type": "object", "properties": { "productLabels": { "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.", "items": { "$ref": "GoogleCloudVisionV1p1beta1ProductKeyValue" }, "type": "array" }, "productCategory": { "type": "string", "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products." }, "name": { "type": "string", "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product." }, "displayName": { "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.", "type": "string" }, "description": { "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.", "type": "string" } }, "description": "A Product contains ReferenceImages." }, "GoogleCloudVisionV1p1beta1Block": { "description": "Logical element on the page.", "id": "GoogleCloudVisionV1p1beta1Block", "properties": { "paragraphs": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1Paragraph" }, "description": "List of paragraphs in this block (if this blocks is of type text)." }, "blockType": { "enumDescriptions": [ "Unknown block type.", "Regular text block.", "Table block.", "Image block.", "Horizontal/vertical line box.", "Barcode block." ], "description": "Detected block type (text, image etc) for this block.", "enum": [ "UNKNOWN", "TEXT", "TABLE", "PICTURE", "RULER", "BARCODE" ], "type": "string" }, "boundingBox": { "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).", "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly" }, "confidence": { "type": "number", "description": "Confidence of the OCR results on the block. Range [0, 1].", "format": "float" }, "property": { "description": "Additional information detected for the block.", "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty" } }, "type": "object" }, "GoogleCloudVisionV1p4beta1ImageAnnotationContext": { "properties": { "uri": { "type": "string", "description": "The URI of the file used to produce the image." }, "pageNumber": { "format": "int32", "type": "integer", "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image." } }, "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.", "id": "GoogleCloudVisionV1p4beta1ImageAnnotationContext", "type": "object" }, "GoogleCloudVisionV1p3beta1SafeSearchAnnotation": { "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).", "type": "object", "properties": { "violence": { "description": "Likelihood that this image contains violent content.", "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "adult": { "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string" }, "racy": { "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string" }, "spoof": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.", "type": "string" }, "medical": { "description": "Likelihood that this is a medical image.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] } }, "id": "GoogleCloudVisionV1p3beta1SafeSearchAnnotation" }, "GoogleCloudVisionV1p1beta1DominantColorsAnnotation": { "description": "Set of dominant colors and their corresponding scores.", "type": "object", "properties": { "colors": { "description": "RGB color values with their score and pixel fraction.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1ColorInfo" } } }, "id": "GoogleCloudVisionV1p1beta1DominantColorsAnnotation" }, "GoogleCloudVisionV1p3beta1Position": { "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.", "type": "object", "properties": { "y": { "description": "Y coordinate.", "type": "number", "format": "float" }, "z": { "format": "float", "description": "Z coordinate (or depth).", "type": "number" }, "x": { "format": "float", "description": "X coordinate.", "type": "number" } }, "id": "GoogleCloudVisionV1p3beta1Position" }, "Color": { "description": "Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha \u003c= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh 255); var green = Math.floor(greenFrac LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh 255); var blue = Math.floor(blueFrac LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i \u003c missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...", "properties": { "green": { "description": "The amount of green in the color as a value in the interval [0, 1].", "type": "number", "format": "float" }, "red": { "description": "The amount of red in the color as a value in the interval [0, 1].", "type": "number", "format": "float" }, "blue": { "type": "number", "description": "The amount of blue in the color as a value in the interval [0, 1].", "format": "float" }, "alpha": { "description": "The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh (this color) + (1.0 - alpha) LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).", "type": "number", "format": "float" } }, "id": "Color", "type": "object" }, "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark": { "properties": { "position": { "description": "Face landmark position.", "$ref": "GoogleCloudVisionV1p2beta1Position" }, "type": { "description": "Face landmark type.", "type": "string", "enumDescriptions": [ "Unknown face landmark detected. Should not be filled.", "Left eye.", "Right eye.", "Left of left eyebrow.", "Right of left eyebrow.", "Left of right eyebrow.", "Right of right eyebrow.", "Midpoint between eyes.", "Nose tip.", "Upper lip.", "Lower lip.", "Mouth left.", "Mouth right.", "Mouth center.", "Nose, bottom right.", "Nose, bottom left.", "Nose, bottom center.", "Left eye, top boundary.", "Left eye, right corner.", "Left eye, bottom boundary.", "Left eye, left corner.", "Right eye, top boundary.", "Right eye, right corner.", "Right eye, bottom boundary.", "Right eye, left corner.", "Left eyebrow, upper midpoint.", "Right eyebrow, upper midpoint.", "Left ear tragion.", "Right ear tragion.", "Left eye pupil.", "Right eye pupil.", "Forehead glabella.", "Chin gnathion.", "Chin left gonion.", "Chin right gonion.", "Left cheek center.", "Right cheek center." ], "enum": [ "UNKNOWN_LANDMARK", "LEFT_EYE", "RIGHT_EYE", "LEFT_OF_LEFT_EYEBROW", "RIGHT_OF_LEFT_EYEBROW", "LEFT_OF_RIGHT_EYEBROW", "RIGHT_OF_RIGHT_EYEBROW", "MIDPOINT_BETWEEN_EYES", "NOSE_TIP", "UPPER_LIP", "LOWER_LIP", "MOUTH_LEFT", "MOUTH_RIGHT", "MOUTH_CENTER", "NOSE_BOTTOM_RIGHT", "NOSE_BOTTOM_LEFT", "NOSE_BOTTOM_CENTER", "LEFT_EYE_TOP_BOUNDARY", "LEFT_EYE_RIGHT_CORNER", "LEFT_EYE_BOTTOM_BOUNDARY", "LEFT_EYE_LEFT_CORNER", "RIGHT_EYE_TOP_BOUNDARY", "RIGHT_EYE_RIGHT_CORNER", "RIGHT_EYE_BOTTOM_BOUNDARY", "RIGHT_EYE_LEFT_CORNER", "LEFT_EYEBROW_UPPER_MIDPOINT", "RIGHT_EYEBROW_UPPER_MIDPOINT", "LEFT_EAR_TRAGION", "RIGHT_EAR_TRAGION", "LEFT_EYE_PUPIL", "RIGHT_EYE_PUPIL", "FOREHEAD_GLABELLA", "CHIN_GNATHION", "CHIN_LEFT_GONION", "CHIN_RIGHT_GONION", "LEFT_CHEEK_CENTER", "RIGHT_CHEEK_CENTER" ] } }, "type": "object", "description": "A face-specific landmark (for example, a face feature).", "id": "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark" }, "GoogleCloudVisionV1p2beta1WebDetectionWebImage": { "id": "GoogleCloudVisionV1p2beta1WebDetectionWebImage", "properties": { "score": { "format": "float", "description": "(Deprecated) Overall relevancy score for the image.", "type": "number" }, "url": { "description": "The result image URL.", "type": "string" } }, "description": "Metadata for online images.", "type": "object" }, "GoogleCloudVisionV1p4beta1Celebrity": { "properties": { "displayName": { "description": "The Celebrity's display name.", "type": "string" }, "description": { "description": "The Celebrity's description.", "type": "string" }, "name": { "type": "string", "description": "The resource name of the preloaded Celebrity. Has the format `builtin/{mid}`." } }, "type": "object", "id": "GoogleCloudVisionV1p4beta1Celebrity", "description": "A Celebrity is a group of Faces with an identity." }, "GoogleCloudVisionV1p2beta1BoundingPoly": { "properties": { "normalizedVertices": { "type": "array", "description": "The bounding polygon normalized vertices.", "items": { "$ref": "GoogleCloudVisionV1p2beta1NormalizedVertex" } }, "vertices": { "description": "The bounding polygon vertices.", "items": { "$ref": "GoogleCloudVisionV1p2beta1Vertex" }, "type": "array" } }, "id": "GoogleCloudVisionV1p2beta1BoundingPoly", "description": "A bounding polygon for the detected image annotation.", "type": "object" }, "GoogleCloudVisionV1p3beta1WebDetection": { "properties": { "partialMatchingImages": { "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage" } }, "visuallySimilarImages": { "description": "The visually similar image results.", "items": { "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage" }, "type": "array" }, "fullMatchingImages": { "items": { "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage" }, "type": "array", "description": "Fully matching images from the Internet. Can include resized copies of the query image." }, "webEntities": { "description": "Deduced entities from similar images on the Internet.", "items": { "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebEntity" }, "type": "array" }, "bestGuessLabels": { "items": { "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebLabel" }, "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.", "type": "array" }, "pagesWithMatchingImages": { "description": "Web pages containing the matching images from the Internet.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebPage" } } }, "description": "Relevant information for the image from the Internet.", "type": "object", "id": "GoogleCloudVisionV1p3beta1WebDetection" }, "GoogleCloudVisionV1p1beta1Symbol": { "properties": { "confidence": { "type": "number", "format": "float", "description": "Confidence of the OCR results for the symbol. Range [0, 1]." }, "boundingBox": { "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).", "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly" }, "property": { "description": "Additional information detected for the symbol.", "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty" }, "text": { "type": "string", "description": "The actual UTF-8 representation of the symbol." } }, "id": "GoogleCloudVisionV1p1beta1Symbol", "type": "object", "description": "A single symbol representation." }, "GoogleCloudVisionV1p4beta1DominantColorsAnnotation": { "properties": { "colors": { "type": "array", "description": "RGB color values with their score and pixel fraction.", "items": { "$ref": "GoogleCloudVisionV1p4beta1ColorInfo" } } }, "id": "GoogleCloudVisionV1p4beta1DominantColorsAnnotation", "description": "Set of dominant colors and their corresponding scores.", "type": "object" }, "GoogleCloudVisionV1p4beta1BatchAnnotateFilesResponse": { "type": "object", "id": "GoogleCloudVisionV1p4beta1BatchAnnotateFilesResponse", "properties": { "responses": { "items": { "$ref": "GoogleCloudVisionV1p4beta1AnnotateFileResponse" }, "description": "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest.", "type": "array" } }, "description": "A list of file annotation responses." }, "OutputConfig": { "description": "The desired output location and metadata.", "type": "object", "properties": { "batchSize": { "type": "integer", "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.", "format": "int32" }, "gcsDestination": { "description": "The Google Cloud Storage location to write the output(s) to.", "$ref": "GcsDestination" } }, "id": "OutputConfig" }, "GoogleCloudVisionV1p4beta1ProductSearchResultsResult": { "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult", "type": "object", "properties": { "image": { "description": "The resource name of the image from the product that is the closest match to the query.", "type": "string" }, "product": { "$ref": "GoogleCloudVisionV1p4beta1Product", "description": "The Product." }, "score": { "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).", "format": "float", "type": "number" } }, "description": "Information about a product." }, "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation": { "description": "Prediction for what the object in the bounding box is.", "properties": { "score": { "type": "number", "description": "Score of the result. Range [0, 1].", "format": "float" }, "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "mid": { "description": "Object ID that should align with EntityAnnotation mid.", "type": "string" }, "name": { "description": "Object name, expressed in its `language_code` language.", "type": "string" } }, "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation", "type": "object" }, "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage": { "type": "object", "id": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage", "properties": { "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "confidence": { "format": "float", "description": "Confidence of detected language. Range [0, 1].", "type": "number" } }, "description": "Detected language for a structural component." }, "CropHint": { "properties": { "importanceFraction": { "description": "Fraction of importance of this salient region with respect to the original image.", "format": "float", "type": "number" }, "confidence": { "type": "number", "format": "float", "description": "Confidence of this being a salient region. Range [0, 1]." }, "boundingPoly": { "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.", "$ref": "BoundingPoly" } }, "type": "object", "id": "CropHint", "description": "Single crop hint that is used to generate a new crop when serving an image." }, "GoogleCloudVisionV1p4beta1ImportProductSetsResponse": { "type": "object", "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.", "properties": { "referenceImages": { "items": { "$ref": "GoogleCloudVisionV1p4beta1ReferenceImage" }, "description": "The list of reference_images that are imported successfully.", "type": "array" }, "statuses": { "items": { "$ref": "Status" }, "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0.", "type": "array" } }, "id": "GoogleCloudVisionV1p4beta1ImportProductSetsResponse" }, "LatLng": { "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.", "type": "object", "properties": { "latitude": { "format": "double", "type": "number", "description": "The latitude in degrees. It must be in the range [-90.0, +90.0]." }, "longitude": { "type": "number", "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].", "format": "double" } }, "id": "LatLng" }, "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation": { "type": "object", "properties": { "mid": { "type": "string", "description": "Object ID that should align with EntityAnnotation mid." }, "score": { "type": "number", "description": "Score of the result. Range [0, 1].", "format": "float" }, "languageCode": { "type": "string", "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier." }, "name": { "description": "Object name, expressed in its `language_code` language.", "type": "string" } }, "description": "Prediction for what the object in the bounding box is.", "id": "GoogleCloudVisionV1p4beta1ProductSearchResultsObjectAnnotation" }, "GoogleCloudVisionV1p4beta1NormalizedVertex": { "properties": { "x": { "description": "X coordinate.", "format": "float", "type": "number" }, "y": { "description": "Y coordinate.", "type": "number", "format": "float" } }, "type": "object", "id": "GoogleCloudVisionV1p4beta1NormalizedVertex", "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1." }, "GoogleCloudVisionV1p4beta1Paragraph": { "properties": { "boundingBox": { "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly", "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "property": { "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty", "description": "Additional information detected for the paragraph." }, "confidence": { "description": "Confidence of the OCR results for the paragraph. Range [0, 1].", "type": "number", "format": "float" }, "words": { "items": { "$ref": "GoogleCloudVisionV1p4beta1Word" }, "description": "List of all words in this paragraph.", "type": "array" } }, "type": "object", "description": "Structural unit of text representing a number of words in certain order.", "id": "GoogleCloudVisionV1p4beta1Paragraph" }, "GoogleCloudVisionV1p4beta1Property": { "id": "GoogleCloudVisionV1p4beta1Property", "type": "object", "properties": { "uint64Value": { "format": "uint64", "description": "Value of numeric properties.", "type": "string" }, "name": { "type": "string", "description": "Name of the property." }, "value": { "type": "string", "description": "Value of the property." } }, "description": "A `Property` consists of a user-supplied name/value pair." }, "GoogleCloudVisionV1p3beta1Vertex": { "id": "GoogleCloudVisionV1p3beta1Vertex", "properties": { "x": { "type": "integer", "format": "int32", "description": "X coordinate." }, "y": { "format": "int32", "type": "integer", "description": "Y coordinate." } }, "type": "object", "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image." }, "GoogleCloudVisionV1p4beta1GcsSource": { "properties": { "uri": { "type": "string", "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported." } }, "description": "The Google Cloud Storage location where the input will be read from.", "type": "object", "id": "GoogleCloudVisionV1p4beta1GcsSource" }, "GoogleCloudVisionV1p2beta1NormalizedVertex": { "id": "GoogleCloudVisionV1p2beta1NormalizedVertex", "type": "object", "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.", "properties": { "y": { "type": "number", "description": "Y coordinate.", "format": "float" }, "x": { "type": "number", "description": "X coordinate.", "format": "float" } } }, "Vertex": { "type": "object", "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.", "id": "Vertex", "properties": { "x": { "type": "integer", "format": "int32", "description": "X coordinate." }, "y": { "description": "Y coordinate.", "type": "integer", "format": "int32" } } }, "GoogleCloudVisionV1p3beta1OutputConfig": { "properties": { "gcsDestination": { "description": "The Google Cloud Storage location to write the output(s) to.", "$ref": "GoogleCloudVisionV1p3beta1GcsDestination" }, "batchSize": { "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.", "format": "int32", "type": "integer" } }, "id": "GoogleCloudVisionV1p3beta1OutputConfig", "description": "The desired output location and metadata.", "type": "object" }, "GoogleCloudVisionV1p2beta1FaceAnnotation": { "id": "GoogleCloudVisionV1p2beta1FaceAnnotation", "description": "A face annotation object contains the results of face detection.", "properties": { "sorrowLikelihood": { "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Sorrow likelihood." }, "landmarks": { "items": { "$ref": "GoogleCloudVisionV1p2beta1FaceAnnotationLandmark" }, "type": "array", "description": "Detected face landmarks." }, "panAngle": { "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].", "type": "number", "format": "float" }, "angerLikelihood": { "description": "Anger likelihood.", "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "underExposedLikelihood": { "description": "Under-exposed likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "landmarkingConfidence": { "format": "float", "type": "number", "description": "Face landmarking confidence. Range [0, 1]." }, "joyLikelihood": { "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Joy likelihood.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "rollAngle": { "type": "number", "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].", "format": "float" }, "boundingPoly": { "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated.", "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly" }, "surpriseLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Surprise likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string" }, "blurredLikelihood": { "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Blurred likelihood.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "headwearLikelihood": { "description": "Headwear likelihood.", "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "fdBoundingPoly": { "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly", "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix." }, "detectionConfidence": { "format": "float", "type": "number", "description": "Detection confidence. Range [0, 1]." }, "tiltAngle": { "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].", "type": "number", "format": "float" } }, "type": "object" }, "GoogleCloudVisionV1p2beta1TextAnnotation": { "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.", "properties": { "pages": { "description": "List of pages detected by OCR.", "items": { "$ref": "GoogleCloudVisionV1p2beta1Page" }, "type": "array" }, "text": { "type": "string", "description": "UTF-8 text detected on the pages." } }, "id": "GoogleCloudVisionV1p2beta1TextAnnotation", "type": "object" }, "GoogleCloudVisionV1p3beta1NormalizedVertex": { "id": "GoogleCloudVisionV1p3beta1NormalizedVertex", "properties": { "x": { "type": "number", "format": "float", "description": "X coordinate." }, "y": { "description": "Y coordinate.", "type": "number", "format": "float" } }, "type": "object", "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1." }, "GoogleCloudVisionV1p2beta1Page": { "id": "GoogleCloudVisionV1p2beta1Page", "type": "object", "description": "Detected page from OCR.", "properties": { "blocks": { "description": "List of blocks of text, images etc on this page.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1Block" } }, "confidence": { "type": "number", "description": "Confidence of the OCR results on the page. Range [0, 1].", "format": "float" }, "width": { "type": "integer", "format": "int32", "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels." }, "height": { "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.", "type": "integer", "format": "int32" }, "property": { "description": "Additional information detected on the page.", "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty" } } }, "GoogleCloudVisionV1p1beta1Word": { "properties": { "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results for the word. Range [0, 1]." }, "symbols": { "type": "array", "description": "List of symbols in the word. The order of the symbols follows the natural reading order.", "items": { "$ref": "GoogleCloudVisionV1p1beta1Symbol" } }, "property": { "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty", "description": "Additional information detected for the word." }, "boundingBox": { "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly", "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." } }, "type": "object", "id": "GoogleCloudVisionV1p1beta1Word", "description": "A word representation." }, "GoogleCloudVisionV1p1beta1EntityAnnotation": { "properties": { "locations": { "type": "array", "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.", "items": { "$ref": "GoogleCloudVisionV1p1beta1LocationInfo" } }, "locale": { "description": "The language code for the locale in which the entity textual `description` is expressed.", "type": "string" }, "description": { "description": "Entity textual description, expressed in its `locale` language.", "type": "string" }, "properties": { "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1Property" } }, "boundingPoly": { "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly", "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features." }, "score": { "description": "Overall score of the result. Range [0, 1].", "format": "float", "type": "number" }, "topicality": { "type": "number", "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].", "format": "float" }, "confidence": { "type": "number", "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].", "format": "float" }, "mid": { "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).", "type": "string" } }, "description": "Set of detected entity features.", "id": "GoogleCloudVisionV1p1beta1EntityAnnotation", "type": "object" }, "GoogleCloudVisionV1p4beta1WebDetectionWebLabel": { "description": "Label to provide extra metadata for the web detection.", "type": "object", "id": "GoogleCloudVisionV1p4beta1WebDetectionWebLabel", "properties": { "languageCode": { "type": "string", "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier." }, "label": { "description": "Label for extra metadata.", "type": "string" } } }, "GoogleCloudVisionV1p1beta1ProductSearchParams": { "id": "GoogleCloudVisionV1p1beta1ProductSearchParams", "description": "Parameters for a product search request.", "properties": { "boundingPoly": { "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly", "description": "The bounding polygon around the area of interest in the image. If it is not specified, system discretion will be applied." }, "filter": { "type": "string", "description": "The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression within an OR must have the same key. An '=' should be used to connect the key and value. For example, \"(color = red OR color = blue) AND brand = Google\" is acceptable, but \"(color = red OR brand = Google)\" is not acceptable. \"color: red\" is not acceptable because it uses a ':' instead of an '='." }, "productSet": { "description": "The resource name of a ProductSet to be searched for similar images. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.", "type": "string" }, "productCategories": { "items": { "type": "string" }, "description": "The list of product categories to search in. Currently, we only consider the first category, and either \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\", or \"general-v1\" should be specified. The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported but will be deprecated. For new products, please use \"homegoods-v2\", \"apparel-v2\", or \"toys-v2\" for better product search accuracy. It is recommended to migrate existing products to these categories as well.", "type": "array" } }, "type": "object" }, "GoogleCloudVisionV1p4beta1AnnotateFileResponse": { "id": "GoogleCloudVisionV1p4beta1AnnotateFileResponse", "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.", "properties": { "error": { "$ref": "Status", "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case." }, "inputConfig": { "$ref": "GoogleCloudVisionV1p4beta1InputConfig", "description": "Information about the file for which this response is generated." }, "responses": { "items": { "$ref": "GoogleCloudVisionV1p4beta1AnnotateImageResponse" }, "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.", "type": "array" }, "totalPages": { "format": "int32", "type": "integer", "description": "This field gives the total number of pages in the file." } }, "type": "object" }, "KeyValue": { "properties": { "value": { "type": "string", "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes." }, "key": { "type": "string", "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes." } }, "id": "KeyValue", "description": "A product label represented as a key-value pair.", "type": "object" }, "GoogleCloudVisionV1p2beta1GcsSource": { "type": "object", "description": "The Google Cloud Storage location where the input will be read from.", "properties": { "uri": { "type": "string", "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported." } }, "id": "GoogleCloudVisionV1p2beta1GcsSource" }, "GoogleCloudVisionV1p1beta1WebDetectionParams": { "description": "Parameters for web detection request.", "type": "object", "id": "GoogleCloudVisionV1p1beta1WebDetectionParams", "properties": { "includeGeoResults": { "type": "boolean", "description": "Whether to include results derived from the geo information in the image." } } }, "GoogleCloudVisionV1p3beta1TextAnnotation": { "id": "GoogleCloudVisionV1p3beta1TextAnnotation", "properties": { "pages": { "description": "List of pages detected by OCR.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1Page" } }, "text": { "description": "UTF-8 text detected on the pages.", "type": "string" } }, "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.", "type": "object" }, "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty": { "id": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty", "properties": { "detectedBreak": { "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak", "description": "Detected start or end of a text segment." }, "detectedLanguages": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage" }, "description": "A list of detected languages together with confidence." } }, "type": "object", "description": "Additional information detected on the structural component." }, "GoogleCloudVisionV1p4beta1BoundingPoly": { "id": "GoogleCloudVisionV1p4beta1BoundingPoly", "properties": { "normalizedVertices": { "items": { "$ref": "GoogleCloudVisionV1p4beta1NormalizedVertex" }, "description": "The bounding polygon normalized vertices.", "type": "array" }, "vertices": { "description": "The bounding polygon vertices.", "items": { "$ref": "GoogleCloudVisionV1p4beta1Vertex" }, "type": "array" } }, "type": "object", "description": "A bounding polygon for the detected image annotation." }, "GoogleCloudVisionV1p3beta1AsyncBatchAnnotateFilesResponse": { "type": "object", "description": "Response to an async batch file annotation request.", "properties": { "responses": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse" }, "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest." } }, "id": "GoogleCloudVisionV1p3beta1AsyncBatchAnnotateFilesResponse" }, "GoogleCloudVisionV1p2beta1DominantColorsAnnotation": { "properties": { "colors": { "description": "RGB color values with their score and pixel fraction.", "items": { "$ref": "GoogleCloudVisionV1p2beta1ColorInfo" }, "type": "array" } }, "id": "GoogleCloudVisionV1p2beta1DominantColorsAnnotation", "description": "Set of dominant colors and their corresponding scores.", "type": "object" }, "GoogleCloudVisionV1p4beta1CropHintsAnnotation": { "type": "object", "description": "Set of crop hints that are used to generate new crops when serving images.", "properties": { "cropHints": { "type": "array", "description": "Crop hint results.", "items": { "$ref": "GoogleCloudVisionV1p4beta1CropHint" } } }, "id": "GoogleCloudVisionV1p4beta1CropHintsAnnotation" }, "GoogleCloudVisionV1p4beta1ProductKeyValue": { "properties": { "value": { "type": "string", "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes." }, "key": { "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.", "type": "string" } }, "type": "object", "description": "A product label represented as a key-value pair.", "id": "GoogleCloudVisionV1p4beta1ProductKeyValue" }, "GoogleCloudVisionV1p1beta1Property": { "description": "A `Property` consists of a user-supplied name/value pair.", "properties": { "name": { "type": "string", "description": "Name of the property." }, "value": { "type": "string", "description": "Value of the property." }, "uint64Value": { "description": "Value of numeric properties.", "type": "string", "format": "uint64" } }, "id": "GoogleCloudVisionV1p1beta1Property", "type": "object" }, "GoogleCloudVisionV1p1beta1GcsDestination": { "id": "GoogleCloudVisionV1p1beta1GcsDestination", "description": "The Google Cloud Storage location where the output will be written to.", "type": "object", "properties": { "uri": { "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.", "type": "string" } } }, "GoogleCloudVisionV1p2beta1ImageProperties": { "properties": { "dominantColors": { "$ref": "GoogleCloudVisionV1p2beta1DominantColorsAnnotation", "description": "If present, dominant colors completed successfully." } }, "type": "object", "id": "GoogleCloudVisionV1p2beta1ImageProperties", "description": "Stores image properties, such as dominant colors." }, "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak": { "id": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak", "type": "object", "description": "Detected start or end of a structural component.", "properties": { "isPrefix": { "type": "boolean", "description": "True if break prepends the element." }, "type": { "enumDescriptions": [ "Unknown break label type.", "Regular space.", "Sure space (very wide).", "Line-wrapping break.", "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.", "Line break that ends a paragraph." ], "enum": [ "UNKNOWN", "SPACE", "SURE_SPACE", "EOL_SURE_SPACE", "HYPHEN", "LINE_BREAK" ], "description": "Detected break type.", "type": "string" } } }, "GoogleCloudVisionV1p4beta1Position": { "type": "object", "properties": { "y": { "format": "float", "description": "Y coordinate.", "type": "number" }, "x": { "format": "float", "description": "X coordinate.", "type": "number" }, "z": { "description": "Z coordinate (or depth).", "format": "float", "type": "number" } }, "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.", "id": "GoogleCloudVisionV1p4beta1Position" }, "GoogleCloudVisionV1p3beta1OperationMetadata": { "type": "object", "description": "Contains metadata for the BatchAnnotateImages operation.", "id": "GoogleCloudVisionV1p3beta1OperationMetadata", "properties": { "updateTime": { "format": "google-datetime", "type": "string", "description": "The time when the operation result was last updated." }, "state": { "description": "Current state of the batch operation.", "type": "string", "enumDescriptions": [ "Invalid.", "Request is received.", "Request is actively being processed.", "The batch processing is done.", "The batch processing was cancelled." ], "enum": [ "STATE_UNSPECIFIED", "CREATED", "RUNNING", "DONE", "CANCELLED" ] }, "createTime": { "format": "google-datetime", "type": "string", "description": "The time when the batch request was received." } } }, "GoogleCloudVisionV1p1beta1LatLongRect": { "id": "GoogleCloudVisionV1p1beta1LatLongRect", "description": "Rectangle determined by min and max `LatLng` pairs.", "type": "object", "properties": { "maxLatLng": { "description": "Max lat/long pair.", "$ref": "LatLng" }, "minLatLng": { "$ref": "LatLng", "description": "Min lat/long pair." } } }, "NormalizedVertex": { "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.", "properties": { "y": { "type": "number", "description": "Y coordinate.", "format": "float" }, "x": { "type": "number", "description": "X coordinate.", "format": "float" } }, "type": "object", "id": "NormalizedVertex" }, "GoogleCloudVisionV1p4beta1WebDetectionWebEntity": { "type": "object", "description": "Entity deduced from similar images on the Internet.", "id": "GoogleCloudVisionV1p4beta1WebDetectionWebEntity", "properties": { "score": { "format": "float", "type": "number", "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries." }, "entityId": { "type": "string", "description": "Opaque entity ID." }, "description": { "type": "string", "description": "Canonical description of the entity, in English." } } }, "GoogleCloudVisionV1p1beta1ColorInfo": { "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.", "type": "object", "properties": { "color": { "$ref": "Color", "description": "RGB components of the color." }, "pixelFraction": { "format": "float", "type": "number", "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1]." }, "score": { "format": "float", "type": "number", "description": "Image-specific score for this color. Value in range [0, 1]." } }, "id": "GoogleCloudVisionV1p1beta1ColorInfo" }, "DominantColorsAnnotation": { "properties": { "colors": { "type": "array", "items": { "$ref": "ColorInfo" }, "description": "RGB color values with their score and pixel fraction." } }, "type": "object", "description": "Set of dominant colors and their corresponding scores.", "id": "DominantColorsAnnotation" }, "GoogleCloudVisionV1p3beta1EntityAnnotation": { "type": "object", "properties": { "properties": { "items": { "$ref": "GoogleCloudVisionV1p3beta1Property" }, "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.", "type": "array" }, "boundingPoly": { "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly", "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features." }, "locale": { "type": "string", "description": "The language code for the locale in which the entity textual `description` is expressed." }, "description": { "description": "Entity textual description, expressed in its `locale` language.", "type": "string" }, "score": { "type": "number", "format": "float", "description": "Overall score of the result. Range [0, 1]." }, "topicality": { "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].", "format": "float", "type": "number" }, "confidence": { "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].", "format": "float", "type": "number" }, "locations": { "type": "array", "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.", "items": { "$ref": "GoogleCloudVisionV1p3beta1LocationInfo" } }, "mid": { "type": "string", "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/)." } }, "description": "Set of detected entity features.", "id": "GoogleCloudVisionV1p3beta1EntityAnnotation" }, "InputConfig": { "description": "The desired input location and metadata.", "id": "InputConfig", "properties": { "mimeType": { "type": "string", "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported." }, "gcsSource": { "description": "The Google Cloud Storage location to read the input from.", "$ref": "GcsSource" }, "content": { "format": "byte", "type": "string", "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests." } }, "type": "object" }, "Status": { "id": "Status", "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).", "type": "object", "properties": { "code": { "type": "integer", "format": "int32", "description": "The status code, which should be an enum value of google.rpc.Code." }, "details": { "type": "array", "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.", "items": { "additionalProperties": { "description": "Properties of the object. Contains field @type with type URL.", "type": "any" }, "type": "object" } }, "message": { "type": "string", "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client." } } }, "GoogleCloudVisionV1p3beta1InputConfig": { "id": "GoogleCloudVisionV1p3beta1InputConfig", "properties": { "gcsSource": { "$ref": "GoogleCloudVisionV1p3beta1GcsSource", "description": "The Google Cloud Storage location to read the input from." }, "content": { "format": "byte", "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.", "type": "string" }, "mimeType": { "type": "string", "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported." } }, "description": "The desired input location and metadata.", "type": "object" }, "GoogleCloudVisionV1p2beta1Paragraph": { "id": "GoogleCloudVisionV1p2beta1Paragraph", "description": "Structural unit of text representing a number of words in certain order.", "properties": { "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results for the paragraph. Range [0, 1]." }, "words": { "description": "List of all words in this paragraph.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1Word" } }, "boundingBox": { "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly", "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "property": { "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty", "description": "Additional information detected for the paragraph." } }, "type": "object" }, "GcsSource": { "properties": { "uri": { "type": "string", "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported." } }, "type": "object", "id": "GcsSource", "description": "The Google Cloud Storage location where the input will be read from." }, "GoogleCloudVisionV1p2beta1Vertex": { "properties": { "y": { "description": "Y coordinate.", "format": "int32", "type": "integer" }, "x": { "format": "int32", "description": "X coordinate.", "type": "integer" } }, "type": "object", "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.", "id": "GoogleCloudVisionV1p2beta1Vertex" }, "GoogleCloudVisionV1p1beta1InputConfig": { "description": "The desired input location and metadata.", "type": "object", "properties": { "mimeType": { "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.", "type": "string" }, "content": { "format": "byte", "type": "string", "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests." }, "gcsSource": { "$ref": "GoogleCloudVisionV1p1beta1GcsSource", "description": "The Google Cloud Storage location to read the input from." } }, "id": "GoogleCloudVisionV1p1beta1InputConfig" }, "GoogleCloudVisionV1p2beta1ImageAnnotationContext": { "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.", "id": "GoogleCloudVisionV1p2beta1ImageAnnotationContext", "properties": { "uri": { "description": "The URI of the file used to produce the image.", "type": "string" }, "pageNumber": { "type": "integer", "format": "int32", "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image." } }, "type": "object" }, "GoogleCloudVisionV1p2beta1ProductSearchResults": { "type": "object", "properties": { "productGroupedResults": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult" }, "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results." }, "indexTime": { "type": "string", "format": "google-datetime", "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results." }, "results": { "items": { "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult" }, "type": "array", "description": "List of results, one for each product match." } }, "id": "GoogleCloudVisionV1p2beta1ProductSearchResults", "description": "Results for a product search request." }, "EntityAnnotation": { "id": "EntityAnnotation", "type": "object", "description": "Set of detected entity features.", "properties": { "boundingPoly": { "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features.", "$ref": "BoundingPoly" }, "locale": { "type": "string", "description": "The language code for the locale in which the entity textual `description` is expressed." }, "mid": { "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).", "type": "string" }, "locations": { "items": { "$ref": "LocationInfo" }, "type": "array", "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks." }, "confidence": { "type": "number", "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].", "format": "float" }, "score": { "type": "number", "format": "float", "description": "Overall score of the result. Range [0, 1]." }, "topicality": { "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].", "type": "number", "format": "float" }, "description": { "type": "string", "description": "Entity textual description, expressed in its `locale` language." }, "properties": { "type": "array", "items": { "$ref": "Property" }, "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity." } } }, "GoogleCloudVisionV1p4beta1OutputConfig": { "type": "object", "description": "The desired output location and metadata.", "properties": { "batchSize": { "format": "int32", "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.", "type": "integer" }, "gcsDestination": { "description": "The Google Cloud Storage location to write the output(s) to.", "$ref": "GoogleCloudVisionV1p4beta1GcsDestination" } }, "id": "GoogleCloudVisionV1p4beta1OutputConfig" }, "ProductSearchResults": { "description": "Results for a product search request.", "type": "object", "id": "ProductSearchResults", "properties": { "productGroupedResults": { "type": "array", "items": { "$ref": "GroupedResult" }, "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results." }, "results": { "type": "array", "items": { "$ref": "Result" }, "description": "List of results, one for each product match." }, "indexTime": { "type": "string", "format": "google-datetime", "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results." } } }, "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse": { "properties": { "outputConfig": { "description": "The output location and metadata from AsyncAnnotateFileRequest.", "$ref": "GoogleCloudVisionV1p3beta1OutputConfig" } }, "id": "GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse", "type": "object", "description": "The response for a single offline file annotation request." }, "GoogleCloudVisionV1p4beta1Block": { "properties": { "boundingBox": { "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).", "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly" }, "paragraphs": { "description": "List of paragraphs in this block (if this blocks is of type text).", "items": { "$ref": "GoogleCloudVisionV1p4beta1Paragraph" }, "type": "array" }, "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results on the block. Range [0, 1]." }, "blockType": { "enum": [ "UNKNOWN", "TEXT", "TABLE", "PICTURE", "RULER", "BARCODE" ], "type": "string", "description": "Detected block type (text, image etc) for this block.", "enumDescriptions": [ "Unknown block type.", "Regular text block.", "Table block.", "Image block.", "Horizontal/vertical line box.", "Barcode block." ] }, "property": { "description": "Additional information detected for the block.", "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty" } }, "type": "object", "description": "Logical element on the page.", "id": "GoogleCloudVisionV1p4beta1Block" }, "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation": { "description": "Set of detected objects with bounding boxes.", "properties": { "boundingPoly": { "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly", "description": "Image region to which this object belongs. This must be populated." }, "score": { "description": "Score of the result. Range [0, 1].", "type": "number", "format": "float" }, "name": { "description": "Object name, expressed in its `language_code` language.", "type": "string" }, "mid": { "type": "string", "description": "Object ID that should align with EntityAnnotation mid." }, "languageCode": { "type": "string", "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier." } }, "id": "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation", "type": "object" }, "GoogleCloudVisionV1p1beta1ImageSource": { "id": "GoogleCloudVisionV1p1beta1ImageSource", "description": "External image source (Google Cloud Storage or web URL image location).", "type": "object", "properties": { "imageUri": { "description": "The URI of the source image. Can be either: 1. A Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info. 2. A publicly-accessible image HTTP/HTTPS URL. When fetching images from HTTP/HTTPS URLs, Google cannot guarantee that the request will be completed. Your request may fail if the specified host denies the request (e.g. due to request throttling or DOS prevention), or if Google throttles requests to the site for abuse prevention. You should not depend on externally-hosted images for production applications. When both `gcs_image_uri` and `image_uri` are specified, `image_uri` takes precedence.", "type": "string" }, "gcsImageUri": { "type": "string", "description": "**Use `image_uri` instead.** The Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info." } } }, "GoogleCloudVisionV1p2beta1ProductSearchResultsResult": { "description": "Information about a product.", "type": "object", "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult", "properties": { "score": { "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).", "type": "number", "format": "float" }, "product": { "$ref": "GoogleCloudVisionV1p2beta1Product", "description": "The Product." }, "image": { "type": "string", "description": "The resource name of the image from the product that is the closest match to the query." } } }, "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult": { "type": "object", "description": "Information about the products similar to a single product in a query image.", "properties": { "results": { "description": "List of results, one for each product match.", "items": { "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult" }, "type": "array" }, "boundingPoly": { "description": "The bounding polygon around the product detected in the query image.", "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly" }, "objectAnnotations": { "type": "array", "description": "List of generic predictions for the object in the bounding box.", "items": { "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation" } } }, "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult" }, "GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest": { "description": "A list of requests to annotate files using the BatchAnnotateFiles API.", "properties": { "requests": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1AnnotateFileRequest" }, "description": "Required. The list of file annotation requests. Right now we support only one AnnotateFileRequest in BatchAnnotateFilesRequest." }, "parent": { "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.", "type": "string" } }, "id": "GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest", "type": "object" }, "GoogleCloudVisionV1p3beta1ProductSearchResults": { "type": "object", "id": "GoogleCloudVisionV1p3beta1ProductSearchResults", "description": "Results for a product search request.", "properties": { "results": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult" }, "description": "List of results, one for each product match." }, "indexTime": { "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.", "type": "string", "format": "google-datetime" }, "productGroupedResults": { "items": { "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResultsGroupedResult" }, "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.", "type": "array" } } }, "GoogleCloudVisionV1p3beta1DominantColorsAnnotation": { "properties": { "colors": { "type": "array", "description": "RGB color values with their score and pixel fraction.", "items": { "$ref": "GoogleCloudVisionV1p3beta1ColorInfo" } } }, "description": "Set of dominant colors and their corresponding scores.", "id": "GoogleCloudVisionV1p3beta1DominantColorsAnnotation", "type": "object" }, "GoogleCloudVisionV1p3beta1Product": { "description": "A Product contains ReferenceImages.", "properties": { "productCategory": { "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products.", "type": "string" }, "description": { "type": "string", "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long." }, "displayName": { "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.", "type": "string" }, "name": { "type": "string", "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product." }, "productLabels": { "items": { "$ref": "GoogleCloudVisionV1p3beta1ProductKeyValue" }, "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.", "type": "array" } }, "id": "GoogleCloudVisionV1p3beta1Product", "type": "object" }, "GoogleCloudVisionV1p2beta1WebDetectionWebEntity": { "properties": { "entityId": { "type": "string", "description": "Opaque entity ID." }, "description": { "description": "Canonical description of the entity, in English.", "type": "string" }, "score": { "format": "float", "type": "number", "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries." } }, "description": "Entity deduced from similar images on the Internet.", "type": "object", "id": "GoogleCloudVisionV1p2beta1WebDetectionWebEntity" }, "GoogleCloudVisionV1p1beta1Vertex": { "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.", "type": "object", "properties": { "x": { "format": "int32", "description": "X coordinate.", "type": "integer" }, "y": { "description": "Y coordinate.", "type": "integer", "format": "int32" } }, "id": "GoogleCloudVisionV1p1beta1Vertex" }, "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak": { "properties": { "type": { "enum": [ "UNKNOWN", "SPACE", "SURE_SPACE", "EOL_SURE_SPACE", "HYPHEN", "LINE_BREAK" ], "description": "Detected break type.", "enumDescriptions": [ "Unknown break label type.", "Regular space.", "Sure space (very wide).", "Line-wrapping break.", "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.", "Line break that ends a paragraph." ], "type": "string" }, "isPrefix": { "type": "boolean", "description": "True if break prepends the element." } }, "description": "Detected start or end of a structural component.", "type": "object", "id": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak" }, "GoogleCloudVisionV1p2beta1AnnotateImageResponse": { "properties": { "faceAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p2beta1FaceAnnotation" }, "description": "If present, face detection has completed successfully.", "type": "array" }, "context": { "description": "If present, contextual information is needed to understand where this image comes from.", "$ref": "GoogleCloudVisionV1p2beta1ImageAnnotationContext" }, "webDetection": { "description": "If present, web detection has completed successfully.", "$ref": "GoogleCloudVisionV1p2beta1WebDetection" }, "imagePropertiesAnnotation": { "$ref": "GoogleCloudVisionV1p2beta1ImageProperties", "description": "If present, image properties were extracted successfully." }, "cropHintsAnnotation": { "description": "If present, crop hints have completed successfully.", "$ref": "GoogleCloudVisionV1p2beta1CropHintsAnnotation" }, "error": { "$ref": "Status", "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set." }, "productSearchResults": { "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResults", "description": "If present, product search has completed successfully." }, "safeSearchAnnotation": { "$ref": "GoogleCloudVisionV1p2beta1SafeSearchAnnotation", "description": "If present, safe-search annotation has completed successfully." }, "logoAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation" }, "type": "array", "description": "If present, logo detection has completed successfully." }, "landmarkAnnotations": { "description": "If present, landmark detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation" }, "type": "array" }, "fullTextAnnotation": { "$ref": "GoogleCloudVisionV1p2beta1TextAnnotation", "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text." }, "textAnnotations": { "description": "If present, text (OCR) detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation" }, "type": "array" }, "labelAnnotations": { "type": "array", "description": "If present, label detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p2beta1EntityAnnotation" } }, "localizedObjectAnnotations": { "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1LocalizedObjectAnnotation" } } }, "id": "GoogleCloudVisionV1p2beta1AnnotateImageResponse", "type": "object", "description": "Response to an image annotation request." }, "GoogleCloudVisionV1p4beta1Page": { "properties": { "height": { "type": "integer", "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.", "format": "int32" }, "property": { "description": "Additional information detected on the page.", "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty" }, "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results on the page. Range [0, 1]." }, "width": { "format": "int32", "type": "integer", "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels." }, "blocks": { "items": { "$ref": "GoogleCloudVisionV1p4beta1Block" }, "description": "List of blocks of text, images etc on this page.", "type": "array" } }, "id": "GoogleCloudVisionV1p4beta1Page", "description": "Detected page from OCR.", "type": "object" }, "GoogleCloudVisionV1p1beta1TextAnnotation": { "id": "GoogleCloudVisionV1p1beta1TextAnnotation", "properties": { "text": { "description": "UTF-8 text detected on the pages.", "type": "string" }, "pages": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1Page" }, "description": "List of pages detected by OCR." } }, "type": "object", "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail." }, "GoogleCloudVisionV1p4beta1WebDetectionWebImage": { "type": "object", "description": "Metadata for online images.", "id": "GoogleCloudVisionV1p4beta1WebDetectionWebImage", "properties": { "url": { "description": "The result image URL.", "type": "string" }, "score": { "description": "(Deprecated) Overall relevancy score for the image.", "type": "number", "format": "float" } } }, "GoogleCloudVisionV1p3beta1Block": { "description": "Logical element on the page.", "properties": { "blockType": { "description": "Detected block type (text, image etc) for this block.", "enum": [ "UNKNOWN", "TEXT", "TABLE", "PICTURE", "RULER", "BARCODE" ], "type": "string", "enumDescriptions": [ "Unknown block type.", "Regular text block.", "Table block.", "Image block.", "Horizontal/vertical line box.", "Barcode block." ] }, "paragraphs": { "items": { "$ref": "GoogleCloudVisionV1p3beta1Paragraph" }, "type": "array", "description": "List of paragraphs in this block (if this blocks is of type text)." }, "boundingBox": { "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly", "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "property": { "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty", "description": "Additional information detected for the block." }, "confidence": { "type": "number", "format": "float", "description": "Confidence of the OCR results on the block. Range [0, 1]." } }, "type": "object", "id": "GoogleCloudVisionV1p3beta1Block" }, "GoogleCloudVisionV1p2beta1ProductKeyValue": { "properties": { "key": { "type": "string", "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes." }, "value": { "type": "string", "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes." } }, "type": "object", "id": "GoogleCloudVisionV1p2beta1ProductKeyValue", "description": "A product label represented as a key-value pair." }, "GoogleCloudVisionV1p2beta1GcsDestination": { "id": "GoogleCloudVisionV1p2beta1GcsDestination", "description": "The Google Cloud Storage location where the output will be written to.", "type": "object", "properties": { "uri": { "type": "string", "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files." } } }, "GoogleCloudVisionV1p4beta1Symbol": { "description": "A single symbol representation.", "type": "object", "id": "GoogleCloudVisionV1p4beta1Symbol", "properties": { "confidence": { "type": "number", "description": "Confidence of the OCR results for the symbol. Range [0, 1].", "format": "float" }, "property": { "description": "Additional information detected for the symbol.", "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty" }, "boundingBox": { "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).", "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly" }, "text": { "type": "string", "description": "The actual UTF-8 representation of the symbol." } } }, "ObjectAnnotation": { "description": "Prediction for what the object in the bounding box is.", "id": "ObjectAnnotation", "properties": { "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "mid": { "description": "Object ID that should align with EntityAnnotation mid.", "type": "string" }, "score": { "description": "Score of the result. Range [0, 1].", "type": "number", "format": "float" }, "name": { "description": "Object name, expressed in its `language_code` language.", "type": "string" } }, "type": "object" }, "GoogleCloudVisionV1p3beta1Paragraph": { "type": "object", "properties": { "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results for the paragraph. Range [0, 1]." }, "boundingBox": { "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly", "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "words": { "items": { "$ref": "GoogleCloudVisionV1p3beta1Word" }, "description": "List of all words in this paragraph.", "type": "array" }, "property": { "description": "Additional information detected for the paragraph.", "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty" } }, "id": "GoogleCloudVisionV1p3beta1Paragraph", "description": "Structural unit of text representing a number of words in certain order." }, "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest": { "description": "Multiple async file annotation requests are batched into a single service call.", "properties": { "requests": { "type": "array", "description": "Required. Individual async file annotation requests for this batch.", "items": { "$ref": "GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest" } }, "parent": { "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.", "type": "string" } }, "type": "object", "id": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest" }, "GoogleCloudVisionV1p2beta1CropHint": { "id": "GoogleCloudVisionV1p2beta1CropHint", "type": "object", "properties": { "boundingPoly": { "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly", "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale." }, "importanceFraction": { "type": "number", "format": "float", "description": "Fraction of importance of this salient region with respect to the original image." }, "confidence": { "format": "float", "type": "number", "description": "Confidence of this being a salient region. Range [0, 1]." } }, "description": "Single crop hint that is used to generate a new crop when serving an image." }, "GoogleCloudVisionV1p3beta1BatchOperationMetadata": { "description": "Metadata for the batch operations such as the current state. This is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.", "id": "GoogleCloudVisionV1p3beta1BatchOperationMetadata", "properties": { "endTime": { "description": "The time when the batch request is finished and google.longrunning.Operation.done is set to true.", "format": "google-datetime", "type": "string" }, "state": { "description": "The current state of the batch operation.", "enum": [ "STATE_UNSPECIFIED", "PROCESSING", "SUCCESSFUL", "FAILED", "CANCELLED" ], "type": "string", "enumDescriptions": [ "Invalid.", "Request is actively being processed.", "The request is done and at least one item has been successfully processed.", "The request is done and no item has been successfully processed.", "The request is done after the longrunning.Operations.CancelOperation has been called by the user. Any records that were processed before the cancel command are output as specified in the request." ] }, "submitTime": { "format": "google-datetime", "type": "string", "description": "The time when the batch request was submitted to the server." } }, "type": "object" }, "ImportProductSetsResponse": { "id": "ImportProductSetsResponse", "properties": { "statuses": { "type": "array", "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0.", "items": { "$ref": "Status" } }, "referenceImages": { "type": "array", "description": "The list of reference_images that are imported successfully.", "items": { "$ref": "ReferenceImage" } } }, "type": "object", "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field." }, "GoogleCloudVisionV1p1beta1NormalizedVertex": { "description": "A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.", "type": "object", "properties": { "x": { "format": "float", "type": "number", "description": "X coordinate." }, "y": { "format": "float", "type": "number", "description": "Y coordinate." } }, "id": "GoogleCloudVisionV1p1beta1NormalizedVertex" }, "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse": { "description": "The response for a single offline file annotation request.", "type": "object", "id": "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse", "properties": { "outputConfig": { "$ref": "GoogleCloudVisionV1p4beta1OutputConfig", "description": "The output location and metadata from AsyncAnnotateFileRequest." } } }, "GoogleCloudVisionV1p3beta1CropHintsAnnotation": { "description": "Set of crop hints that are used to generate new crops when serving images.", "id": "GoogleCloudVisionV1p3beta1CropHintsAnnotation", "properties": { "cropHints": { "items": { "$ref": "GoogleCloudVisionV1p3beta1CropHint" }, "description": "Crop hint results.", "type": "array" } }, "type": "object" }, "GoogleCloudVisionV1p4beta1ProductSearchResults": { "description": "Results for a product search request.", "properties": { "results": { "items": { "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsResult" }, "type": "array", "description": "List of results, one for each product match." }, "productGroupedResults": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResultsGroupedResult" }, "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results." }, "indexTime": { "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.", "type": "string", "format": "google-datetime" } }, "id": "GoogleCloudVisionV1p4beta1ProductSearchResults", "type": "object" }, "FaceAnnotation": { "type": "object", "id": "FaceAnnotation", "properties": { "angerLikelihood": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string", "description": "Anger likelihood." }, "surpriseLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string", "description": "Surprise likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "boundingPoly": { "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated.", "$ref": "BoundingPoly" }, "fdBoundingPoly": { "$ref": "BoundingPoly", "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix." }, "landmarkingConfidence": { "format": "float", "description": "Face landmarking confidence. Range [0, 1].", "type": "number" }, "detectionConfidence": { "format": "float", "type": "number", "description": "Detection confidence. Range [0, 1]." }, "panAngle": { "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].", "type": "number", "format": "float" }, "rollAngle": { "format": "float", "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].", "type": "number" }, "tiltAngle": { "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].", "format": "float", "type": "number" }, "landmarks": { "description": "Detected face landmarks.", "type": "array", "items": { "$ref": "Landmark" } }, "headwearLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Headwear likelihood.", "type": "string" }, "underExposedLikelihood": { "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Under-exposed likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "joyLikelihood": { "description": "Joy likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "blurredLikelihood": { "description": "Blurred likelihood.", "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "sorrowLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Sorrow likelihood." } }, "description": "A face annotation object contains the results of face detection." }, "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak": { "properties": { "isPrefix": { "description": "True if break prepends the element.", "type": "boolean" }, "type": { "enum": [ "UNKNOWN", "SPACE", "SURE_SPACE", "EOL_SURE_SPACE", "HYPHEN", "LINE_BREAK" ], "enumDescriptions": [ "Unknown break label type.", "Regular space.", "Sure space (very wide).", "Line-wrapping break.", "End-line hyphen that is not present in text; does not co-occur with `SPACE`, `LEADER_SPACE`, or `LINE_BREAK`.", "Line break that ends a paragraph." ], "type": "string", "description": "Detected break type." } }, "description": "Detected start or end of a structural component.", "type": "object", "id": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak" }, "GoogleCloudVisionV1p2beta1OutputConfig": { "properties": { "gcsDestination": { "$ref": "GoogleCloudVisionV1p2beta1GcsDestination", "description": "The Google Cloud Storage location to write the output(s) to." }, "batchSize": { "format": "int32", "type": "integer", "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations." } }, "description": "The desired output location and metadata.", "id": "GoogleCloudVisionV1p2beta1OutputConfig", "type": "object" }, "Word": { "id": "Word", "properties": { "property": { "description": "Additional information detected for the word.", "$ref": "TextProperty" }, "symbols": { "description": "List of symbols in the word. The order of the symbols follows the natural reading order.", "items": { "$ref": "Symbol" }, "type": "array" }, "confidence": { "format": "float", "type": "number", "description": "Confidence of the OCR results for the word. Range [0, 1]." }, "boundingBox": { "$ref": "BoundingPoly", "description": "The bounding box for the word. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." } }, "description": "A word representation.", "type": "object" }, "GoogleCloudVisionV1p1beta1ProductKeyValue": { "description": "A product label represented as a key-value pair.", "properties": { "key": { "description": "The key of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.", "type": "string" }, "value": { "description": "The value of the label attached to the product. Cannot be empty and cannot exceed 128 bytes.", "type": "string" } }, "type": "object", "id": "GoogleCloudVisionV1p1beta1ProductKeyValue" }, "GoogleCloudVisionV1p3beta1WebDetectionWebPage": { "description": "Metadata for web pages.", "id": "GoogleCloudVisionV1p3beta1WebDetectionWebPage", "properties": { "pageTitle": { "type": "string", "description": "Title for the web page, may contain HTML markups." }, "fullMatchingImages": { "items": { "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage" }, "description": "Fully matching images on the page. Can include resized copies of the query image.", "type": "array" }, "partialMatchingImages": { "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.", "items": { "$ref": "GoogleCloudVisionV1p3beta1WebDetectionWebImage" }, "type": "array" }, "score": { "description": "(Deprecated) Overall relevancy score for the web page.", "type": "number", "format": "float" }, "url": { "description": "The result web page URL.", "type": "string" } }, "type": "object" }, "GoogleCloudVisionV1p3beta1ImportProductSetsResponse": { "properties": { "statuses": { "description": "The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0.", "type": "array", "items": { "$ref": "Status" } }, "referenceImages": { "items": { "$ref": "GoogleCloudVisionV1p3beta1ReferenceImage" }, "description": "The list of reference_images that are imported successfully.", "type": "array" } }, "id": "GoogleCloudVisionV1p3beta1ImportProductSetsResponse", "description": "Response message for the `ImportProductSets` method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.", "type": "object" }, "Result": { "description": "Information about a product.", "type": "object", "id": "Result", "properties": { "product": { "$ref": "Product", "description": "The Product." }, "image": { "description": "The resource name of the image from the product that is the closest match to the query.", "type": "string" }, "score": { "type": "number", "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).", "format": "float" } } }, "ReferenceImage": { "id": "ReferenceImage", "type": "object", "properties": { "boundingPolys": { "items": { "$ref": "BoundingPoly" }, "type": "array", "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not)." }, "name": { "type": "string", "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image." }, "uri": { "type": "string", "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`." } }, "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes." }, "GoogleCloudVisionV1p4beta1TextAnnotation": { "id": "GoogleCloudVisionV1p4beta1TextAnnotation", "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.", "type": "object", "properties": { "pages": { "description": "List of pages detected by OCR.", "items": { "$ref": "GoogleCloudVisionV1p4beta1Page" }, "type": "array" }, "text": { "type": "string", "description": "UTF-8 text detected on the pages." } } }, "GoogleCloudVisionV1p2beta1Product": { "type": "object", "id": "GoogleCloudVisionV1p2beta1Product", "description": "A Product contains ReferenceImages.", "properties": { "displayName": { "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.", "type": "string" }, "productCategory": { "type": "string", "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products." }, "name": { "type": "string", "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product." }, "productLabels": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1ProductKeyValue" }, "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet." }, "description": { "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.", "type": "string" } } }, "GoogleCloudVisionV1p4beta1WebDetectionWebPage": { "properties": { "pageTitle": { "type": "string", "description": "Title for the web page, may contain HTML markups." }, "partialMatchingImages": { "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage" } }, "score": { "description": "(Deprecated) Overall relevancy score for the web page.", "format": "float", "type": "number" }, "fullMatchingImages": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1WebDetectionWebImage" }, "description": "Fully matching images on the page. Can include resized copies of the query image." }, "url": { "description": "The result web page URL.", "type": "string" } }, "description": "Metadata for web pages.", "type": "object", "id": "GoogleCloudVisionV1p4beta1WebDetectionWebPage" }, "TextProperty": { "description": "Additional information detected on the structural component.", "properties": { "detectedLanguages": { "items": { "$ref": "DetectedLanguage" }, "description": "A list of detected languages together with confidence.", "type": "array" }, "detectedBreak": { "description": "Detected start or end of a text segment.", "$ref": "DetectedBreak" } }, "type": "object", "id": "TextProperty" }, "Operation": { "description": "This resource represents a long-running operation that is the result of a network API call.", "type": "object", "id": "Operation", "properties": { "metadata": { "additionalProperties": { "description": "Properties of the object. Contains field @type with type URL.", "type": "any" }, "type": "object", "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any." }, "error": { "$ref": "Status", "description": "The error result of the operation in case of failure or cancellation." }, "name": { "type": "string", "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`." }, "done": { "type": "boolean", "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available." }, "response": { "type": "object", "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.", "additionalProperties": { "description": "Properties of the object. Contains field @type with type URL.", "type": "any" } } } }, "WebDetection": { "properties": { "fullMatchingImages": { "items": { "$ref": "WebImage" }, "type": "array", "description": "Fully matching images from the Internet. Can include resized copies of the query image." }, "webEntities": { "type": "array", "description": "Deduced entities from similar images on the Internet.", "items": { "$ref": "WebEntity" } }, "bestGuessLabels": { "type": "array", "items": { "$ref": "WebLabel" }, "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web." }, "visuallySimilarImages": { "items": { "$ref": "WebImage" }, "type": "array", "description": "The visually similar image results." }, "partialMatchingImages": { "items": { "$ref": "WebImage" }, "type": "array", "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops." }, "pagesWithMatchingImages": { "type": "array", "description": "Web pages containing the matching images from the Internet.", "items": { "$ref": "WebPage" } } }, "description": "Relevant information for the image from the Internet.", "type": "object", "id": "WebDetection" }, "GoogleCloudVisionV1p1beta1OutputConfig": { "id": "GoogleCloudVisionV1p1beta1OutputConfig", "properties": { "gcsDestination": { "description": "The Google Cloud Storage location to write the output(s) to.", "$ref": "GoogleCloudVisionV1p1beta1GcsDestination" }, "batchSize": { "format": "int32", "description": "The max number of response protos to put into each output JSON file on Google Cloud Storage. The valid range is [1, 100]. If not specified, the default value is 20. For example, for one pdf file with 100 pages, 100 response protos will be generated. If `batch_size` = 20, then 5 json files each containing 20 response protos will be written under the prefix `gcs_destination`.`uri`. Currently, batch_size only applies to GcsDestination, with potential future support for other output configurations.", "type": "integer" } }, "type": "object", "description": "The desired output location and metadata." }, "GoogleCloudVisionV1p2beta1WebDetection": { "properties": { "partialMatchingImages": { "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.", "items": { "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage" }, "type": "array" }, "visuallySimilarImages": { "items": { "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage" }, "description": "The visually similar image results.", "type": "array" }, "pagesWithMatchingImages": { "items": { "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebPage" }, "description": "Web pages containing the matching images from the Internet.", "type": "array" }, "bestGuessLabels": { "type": "array", "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.", "items": { "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebLabel" } }, "fullMatchingImages": { "description": "Fully matching images from the Internet. Can include resized copies of the query image.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage" } }, "webEntities": { "type": "array", "description": "Deduced entities from similar images on the Internet.", "items": { "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebEntity" } } }, "description": "Relevant information for the image from the Internet.", "type": "object", "id": "GoogleCloudVisionV1p2beta1WebDetection" }, "AnnotateImageResponse": { "description": "Response to an image annotation request.", "id": "AnnotateImageResponse", "type": "object", "properties": { "labelAnnotations": { "description": "If present, label detection has completed successfully.", "items": { "$ref": "EntityAnnotation" }, "type": "array" }, "productSearchResults": { "description": "If present, product search has completed successfully.", "$ref": "ProductSearchResults" }, "localizedObjectAnnotations": { "items": { "$ref": "LocalizedObjectAnnotation" }, "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score.", "type": "array" }, "cropHintsAnnotation": { "$ref": "CropHintsAnnotation", "description": "If present, crop hints have completed successfully." }, "textAnnotations": { "description": "If present, text (OCR) detection has completed successfully.", "items": { "$ref": "EntityAnnotation" }, "type": "array" }, "imagePropertiesAnnotation": { "$ref": "ImageProperties", "description": "If present, image properties were extracted successfully." }, "fullTextAnnotation": { "$ref": "TextAnnotation", "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text." }, "landmarkAnnotations": { "items": { "$ref": "EntityAnnotation" }, "type": "array", "description": "If present, landmark detection has completed successfully." }, "error": { "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.", "$ref": "Status" }, "context": { "$ref": "ImageAnnotationContext", "description": "If present, contextual information is needed to understand where this image comes from." }, "faceAnnotations": { "type": "array", "description": "If present, face detection has completed successfully.", "items": { "$ref": "FaceAnnotation" } }, "safeSearchAnnotation": { "description": "If present, safe-search annotation has completed successfully.", "$ref": "SafeSearchAnnotation" }, "webDetection": { "$ref": "WebDetection", "description": "If present, web detection has completed successfully." }, "logoAnnotations": { "items": { "$ref": "EntityAnnotation" }, "description": "If present, logo detection has completed successfully.", "type": "array" } } }, "GoogleCloudVisionV1p4beta1ReferenceImage": { "description": "A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes.", "type": "object", "properties": { "boundingPolys": { "items": { "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly" }, "description": "Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).", "type": "array" }, "name": { "description": "The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.", "type": "string" }, "uri": { "type": "string", "description": "Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`." } }, "id": "GoogleCloudVisionV1p4beta1ReferenceImage" }, "GoogleCloudVisionV1p1beta1Feature": { "id": "GoogleCloudVisionV1p1beta1Feature", "description": "The type of Google Cloud Vision API detection to perform, and the maximum number of results to return for that type. Multiple `Feature` objects can be specified in the `features` list.", "type": "object", "properties": { "maxResults": { "type": "integer", "description": "Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`.", "format": "int32" }, "type": { "type": "string", "description": "The feature type.", "enumDescriptions": [ "Unspecified feature type.", "Run face detection.", "Run landmark detection.", "Run logo detection.", "Run label detection.", "Run text detection / optical character recognition (OCR). Text detection is optimized for areas of text within a larger image; if the image is a document, use `DOCUMENT_TEXT_DETECTION` instead.", "Run dense text document OCR. Takes precedence when both `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` are present.", "Run Safe Search to detect potentially unsafe or undesirable content.", "Compute a set of image properties, such as the image's dominant colors.", "Run crop hints.", "Run web detection.", "Run Product Search.", "Run localizer for object detection." ], "enum": [ "TYPE_UNSPECIFIED", "FACE_DETECTION", "LANDMARK_DETECTION", "LOGO_DETECTION", "LABEL_DETECTION", "TEXT_DETECTION", "DOCUMENT_TEXT_DETECTION", "SAFE_SEARCH_DETECTION", "IMAGE_PROPERTIES", "CROP_HINTS", "WEB_DETECTION", "PRODUCT_SEARCH", "OBJECT_LOCALIZATION" ] }, "model": { "description": "Model to use for the feature. Supported values: \"builtin/stable\" (the default if unset) and \"builtin/latest\".", "type": "string" } } }, "GoogleCloudVisionV1p4beta1ColorInfo": { "properties": { "pixelFraction": { "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].", "type": "number", "format": "float" }, "score": { "format": "float", "type": "number", "description": "Image-specific score for this color. Value in range [0, 1]." }, "color": { "description": "RGB components of the color.", "$ref": "Color" } }, "type": "object", "id": "GoogleCloudVisionV1p4beta1ColorInfo", "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image." }, "OperationMetadata": { "type": "object", "properties": { "createTime": { "description": "The time when the batch request was received.", "type": "string", "format": "google-datetime" }, "state": { "description": "Current state of the batch operation.", "enumDescriptions": [ "Invalid.", "Request is received.", "Request is actively being processed.", "The batch processing is done.", "The batch processing was cancelled." ], "enum": [ "STATE_UNSPECIFIED", "CREATED", "RUNNING", "DONE", "CANCELLED" ], "type": "string" }, "updateTime": { "format": "google-datetime", "description": "The time when the operation result was last updated.", "type": "string" } }, "id": "OperationMetadata", "description": "Contains metadata for the BatchAnnotateImages operation." }, "GoogleCloudVisionV1p3beta1AnnotateImageResponse": { "description": "Response to an image annotation request.", "type": "object", "properties": { "logoAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation" }, "type": "array", "description": "If present, logo detection has completed successfully." }, "webDetection": { "description": "If present, web detection has completed successfully.", "$ref": "GoogleCloudVisionV1p3beta1WebDetection" }, "faceAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p3beta1FaceAnnotation" }, "type": "array", "description": "If present, face detection has completed successfully." }, "labelAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation" }, "description": "If present, label detection has completed successfully.", "type": "array" }, "context": { "$ref": "GoogleCloudVisionV1p3beta1ImageAnnotationContext", "description": "If present, contextual information is needed to understand where this image comes from." }, "localizedObjectAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation" }, "type": "array", "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score." }, "imagePropertiesAnnotation": { "description": "If present, image properties were extracted successfully.", "$ref": "GoogleCloudVisionV1p3beta1ImageProperties" }, "fullTextAnnotation": { "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text.", "$ref": "GoogleCloudVisionV1p3beta1TextAnnotation" }, "productSearchResults": { "description": "If present, product search has completed successfully.", "$ref": "GoogleCloudVisionV1p3beta1ProductSearchResults" }, "error": { "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.", "$ref": "Status" }, "safeSearchAnnotation": { "$ref": "GoogleCloudVisionV1p3beta1SafeSearchAnnotation", "description": "If present, safe-search annotation has completed successfully." }, "cropHintsAnnotation": { "$ref": "GoogleCloudVisionV1p3beta1CropHintsAnnotation", "description": "If present, crop hints have completed successfully." }, "landmarkAnnotations": { "type": "array", "description": "If present, landmark detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation" } }, "textAnnotations": { "description": "If present, text (OCR) detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p3beta1EntityAnnotation" }, "type": "array" } }, "id": "GoogleCloudVisionV1p3beta1AnnotateImageResponse" }, "WebPage": { "description": "Metadata for web pages.", "id": "WebPage", "properties": { "fullMatchingImages": { "type": "array", "items": { "$ref": "WebImage" }, "description": "Fully matching images on the page. Can include resized copies of the query image." }, "pageTitle": { "type": "string", "description": "Title for the web page, may contain HTML markups." }, "score": { "type": "number", "description": "(Deprecated) Overall relevancy score for the web page.", "format": "float" }, "partialMatchingImages": { "type": "array", "items": { "$ref": "WebImage" }, "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops." }, "url": { "description": "The result web page URL.", "type": "string" } }, "type": "object" }, "GoogleCloudVisionV1p3beta1ProductSearchResultsResult": { "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsResult", "description": "Information about a product.", "type": "object", "properties": { "score": { "type": "number", "format": "float", "description": "A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence)." }, "product": { "$ref": "GoogleCloudVisionV1p3beta1Product", "description": "The Product." }, "image": { "description": "The resource name of the image from the product that is the closest match to the query.", "type": "string" } } }, "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation": { "description": "Set of detected objects with bounding boxes.", "id": "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation", "properties": { "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "boundingPoly": { "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly", "description": "Image region to which this object belongs. This must be populated." }, "name": { "description": "Object name, expressed in its `language_code` language.", "type": "string" }, "score": { "format": "float", "type": "number", "description": "Score of the result. Range [0, 1]." }, "mid": { "type": "string", "description": "Object ID that should align with EntityAnnotation mid." } }, "type": "object" }, "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty": { "properties": { "detectedBreak": { "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak", "description": "Detected start or end of a text segment." }, "detectedLanguages": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage" }, "description": "A list of detected languages together with confidence." } }, "id": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty", "type": "object", "description": "Additional information detected on the structural component." }, "Block": { "id": "Block", "properties": { "paragraphs": { "description": "List of paragraphs in this block (if this blocks is of type text).", "type": "array", "items": { "$ref": "Paragraph" } }, "boundingBox": { "$ref": "BoundingPoly", "description": "The bounding box for the block. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "property": { "description": "Additional information detected for the block.", "$ref": "TextProperty" }, "confidence": { "type": "number", "format": "float", "description": "Confidence of the OCR results on the block. Range [0, 1]." }, "blockType": { "description": "Detected block type (text, image etc) for this block.", "type": "string", "enum": [ "UNKNOWN", "TEXT", "TABLE", "PICTURE", "RULER", "BARCODE" ], "enumDescriptions": [ "Unknown block type.", "Regular text block.", "Table block.", "Image block.", "Horizontal/vertical line box.", "Barcode block." ] } }, "type": "object", "description": "Logical element on the page." }, "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation": { "id": "GoogleCloudVisionV1p1beta1ProductSearchResultsObjectAnnotation", "type": "object", "properties": { "name": { "description": "Object name, expressed in its `language_code` language.", "type": "string" }, "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "mid": { "description": "Object ID that should align with EntityAnnotation mid.", "type": "string" }, "score": { "description": "Score of the result. Range [0, 1].", "format": "float", "type": "number" } }, "description": "Prediction for what the object in the bounding box is." }, "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse": { "type": "object", "description": "The response for a single offline file annotation request.", "properties": { "outputConfig": { "description": "The output location and metadata from AsyncAnnotateFileRequest.", "$ref": "GoogleCloudVisionV1p1beta1OutputConfig" } }, "id": "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse" }, "GoogleCloudVisionV1p4beta1Product": { "properties": { "productCategory": { "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products.", "type": "string" }, "description": { "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.", "type": "string" }, "displayName": { "type": "string", "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long." }, "name": { "type": "string", "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product." }, "productLabels": { "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1ProductKeyValue" } } }, "id": "GoogleCloudVisionV1p4beta1Product", "description": "A Product contains ReferenceImages.", "type": "object" }, "GoogleCloudVisionV1p1beta1AnnotateImageResponse": { "description": "Response to an image annotation request.", "id": "GoogleCloudVisionV1p1beta1AnnotateImageResponse", "properties": { "imagePropertiesAnnotation": { "$ref": "GoogleCloudVisionV1p1beta1ImageProperties", "description": "If present, image properties were extracted successfully." }, "fullTextAnnotation": { "$ref": "GoogleCloudVisionV1p1beta1TextAnnotation", "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text." }, "faceAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p1beta1FaceAnnotation" }, "type": "array", "description": "If present, face detection has completed successfully." }, "safeSearchAnnotation": { "description": "If present, safe-search annotation has completed successfully.", "$ref": "GoogleCloudVisionV1p1beta1SafeSearchAnnotation" }, "error": { "$ref": "Status", "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set." }, "webDetection": { "description": "If present, web detection has completed successfully.", "$ref": "GoogleCloudVisionV1p1beta1WebDetection" }, "logoAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation" }, "type": "array", "description": "If present, logo detection has completed successfully." }, "labelAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation" }, "type": "array", "description": "If present, label detection has completed successfully." }, "localizedObjectAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p1beta1LocalizedObjectAnnotation" }, "type": "array", "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score." }, "textAnnotations": { "description": "If present, text (OCR) detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation" }, "type": "array" }, "context": { "$ref": "GoogleCloudVisionV1p1beta1ImageAnnotationContext", "description": "If present, contextual information is needed to understand where this image comes from." }, "productSearchResults": { "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResults", "description": "If present, product search has completed successfully." }, "cropHintsAnnotation": { "$ref": "GoogleCloudVisionV1p1beta1CropHintsAnnotation", "description": "If present, crop hints have completed successfully." }, "landmarkAnnotations": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1EntityAnnotation" }, "description": "If present, landmark detection has completed successfully." } }, "type": "object" }, "GoogleCloudVisionV1p1beta1BoundingPoly": { "properties": { "normalizedVertices": { "items": { "$ref": "GoogleCloudVisionV1p1beta1NormalizedVertex" }, "type": "array", "description": "The bounding polygon normalized vertices." }, "vertices": { "items": { "$ref": "GoogleCloudVisionV1p1beta1Vertex" }, "description": "The bounding polygon vertices.", "type": "array" } }, "description": "A bounding polygon for the detected image annotation.", "type": "object", "id": "GoogleCloudVisionV1p1beta1BoundingPoly" }, "GroupedResult": { "description": "Information about the products similar to a single product in a query image.", "id": "GroupedResult", "type": "object", "properties": { "objectAnnotations": { "description": "List of generic predictions for the object in the bounding box.", "items": { "$ref": "ObjectAnnotation" }, "type": "array" }, "boundingPoly": { "description": "The bounding polygon around the product detected in the query image.", "$ref": "BoundingPoly" }, "results": { "description": "List of results, one for each product match.", "type": "array", "items": { "$ref": "Result" } } } }, "GoogleCloudVisionV1p4beta1SafeSearchAnnotation": { "id": "GoogleCloudVisionV1p4beta1SafeSearchAnnotation", "type": "object", "properties": { "spoof": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.", "type": "string" }, "adult": { "type": "string", "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "violence": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Likelihood that this image contains violent content.", "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "racy": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.", "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "medical": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Likelihood that this is a medical image.", "type": "string" } }, "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence)." }, "GoogleCloudVisionV1p3beta1ColorInfo": { "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.", "id": "GoogleCloudVisionV1p3beta1ColorInfo", "type": "object", "properties": { "score": { "description": "Image-specific score for this color. Value in range [0, 1].", "format": "float", "type": "number" }, "color": { "description": "RGB components of the color.", "$ref": "Color" }, "pixelFraction": { "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].", "type": "number", "format": "float" } } }, "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage": { "type": "object", "id": "GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage", "properties": { "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "confidence": { "format": "float", "type": "number", "description": "Confidence of detected language. Range [0, 1]." } }, "description": "Detected language for a structural component." }, "GoogleCloudVisionV1p1beta1SafeSearchAnnotation": { "properties": { "spoof": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string" }, "violence": { "description": "Likelihood that this image contains violent content.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "adult": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.", "type": "string" }, "medical": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "description": "Likelihood that this is a medical image." }, "racy": { "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] } }, "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).", "id": "GoogleCloudVisionV1p1beta1SafeSearchAnnotation", "type": "object" }, "GoogleCloudVisionV1p1beta1GcsSource": { "type": "object", "properties": { "uri": { "description": "Google Cloud Storage URI for the input file. This must only be a Google Cloud Storage object. Wildcards are not currently supported.", "type": "string" } }, "id": "GoogleCloudVisionV1p1beta1GcsSource", "description": "The Google Cloud Storage location where the input will be read from." }, "GoogleCloudVisionV1p2beta1SafeSearchAnnotation": { "type": "object", "id": "GoogleCloudVisionV1p2beta1SafeSearchAnnotation", "description": "Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).", "properties": { "spoof": { "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "adult": { "description": "Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string" }, "violence": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string", "description": "Likelihood that this image contains violent content.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "racy": { "description": "Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string" }, "medical": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Likelihood that this is a medical image.", "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] } } }, "ImageProperties": { "properties": { "dominantColors": { "$ref": "DominantColorsAnnotation", "description": "If present, dominant colors completed successfully." } }, "description": "Stores image properties, such as dominant colors.", "id": "ImageProperties", "type": "object" }, "GoogleCloudVisionV1p3beta1Symbol": { "id": "GoogleCloudVisionV1p3beta1Symbol", "description": "A single symbol representation.", "type": "object", "properties": { "boundingBox": { "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).", "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly" }, "confidence": { "type": "number", "description": "Confidence of the OCR results for the symbol. Range [0, 1].", "format": "float" }, "property": { "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty", "description": "Additional information detected for the symbol." }, "text": { "description": "The actual UTF-8 representation of the symbol.", "type": "string" } } }, "Property": { "id": "Property", "type": "object", "description": "A `Property` consists of a user-supplied name/value pair.", "properties": { "name": { "description": "Name of the property.", "type": "string" }, "value": { "description": "Value of the property.", "type": "string" }, "uint64Value": { "description": "Value of numeric properties.", "format": "uint64", "type": "string" } } }, "GoogleCloudVisionV1p3beta1CropHint": { "type": "object", "description": "Single crop hint that is used to generate a new crop when serving an image.", "id": "GoogleCloudVisionV1p3beta1CropHint", "properties": { "boundingPoly": { "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.", "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly" }, "confidence": { "type": "number", "format": "float", "description": "Confidence of this being a salient region. Range [0, 1]." }, "importanceFraction": { "description": "Fraction of importance of this salient region with respect to the original image.", "format": "float", "type": "number" } } }, "GoogleCloudVisionV1p4beta1FaceRecognitionResult": { "id": "GoogleCloudVisionV1p4beta1FaceRecognitionResult", "description": "Information about a face's identity.", "properties": { "confidence": { "type": "number", "description": "Recognition confidence. Range [0, 1].", "format": "float" }, "celebrity": { "$ref": "GoogleCloudVisionV1p4beta1Celebrity", "description": "The Celebrity that this face was matched to." } }, "type": "object" }, "GoogleCloudVisionV1p1beta1CropHintsAnnotation": { "description": "Set of crop hints that are used to generate new crops when serving images.", "id": "GoogleCloudVisionV1p1beta1CropHintsAnnotation", "type": "object", "properties": { "cropHints": { "type": "array", "description": "Crop hint results.", "items": { "$ref": "GoogleCloudVisionV1p1beta1CropHint" } } } }, "GoogleCloudVisionV1p3beta1ImageProperties": { "type": "object", "description": "Stores image properties, such as dominant colors.", "properties": { "dominantColors": { "$ref": "GoogleCloudVisionV1p3beta1DominantColorsAnnotation", "description": "If present, dominant colors completed successfully." } }, "id": "GoogleCloudVisionV1p3beta1ImageProperties" }, "BoundingPoly": { "properties": { "normalizedVertices": { "type": "array", "items": { "$ref": "NormalizedVertex" }, "description": "The bounding polygon normalized vertices." }, "vertices": { "type": "array", "description": "The bounding polygon vertices.", "items": { "$ref": "Vertex" } } }, "type": "object", "id": "BoundingPoly", "description": "A bounding polygon for the detected image annotation." }, "ColorInfo": { "id": "ColorInfo", "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.", "type": "object", "properties": { "color": { "description": "RGB components of the color.", "$ref": "Color" }, "score": { "description": "Image-specific score for this color. Value in range [0, 1].", "format": "float", "type": "number" }, "pixelFraction": { "format": "float", "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].", "type": "number" } } }, "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark": { "properties": { "type": { "type": "string", "enum": [ "UNKNOWN_LANDMARK", "LEFT_EYE", "RIGHT_EYE", "LEFT_OF_LEFT_EYEBROW", "RIGHT_OF_LEFT_EYEBROW", "LEFT_OF_RIGHT_EYEBROW", "RIGHT_OF_RIGHT_EYEBROW", "MIDPOINT_BETWEEN_EYES", "NOSE_TIP", "UPPER_LIP", "LOWER_LIP", "MOUTH_LEFT", "MOUTH_RIGHT", "MOUTH_CENTER", "NOSE_BOTTOM_RIGHT", "NOSE_BOTTOM_LEFT", "NOSE_BOTTOM_CENTER", "LEFT_EYE_TOP_BOUNDARY", "LEFT_EYE_RIGHT_CORNER", "LEFT_EYE_BOTTOM_BOUNDARY", "LEFT_EYE_LEFT_CORNER", "RIGHT_EYE_TOP_BOUNDARY", "RIGHT_EYE_RIGHT_CORNER", "RIGHT_EYE_BOTTOM_BOUNDARY", "RIGHT_EYE_LEFT_CORNER", "LEFT_EYEBROW_UPPER_MIDPOINT", "RIGHT_EYEBROW_UPPER_MIDPOINT", "LEFT_EAR_TRAGION", "RIGHT_EAR_TRAGION", "LEFT_EYE_PUPIL", "RIGHT_EYE_PUPIL", "FOREHEAD_GLABELLA", "CHIN_GNATHION", "CHIN_LEFT_GONION", "CHIN_RIGHT_GONION", "LEFT_CHEEK_CENTER", "RIGHT_CHEEK_CENTER" ], "description": "Face landmark type.", "enumDescriptions": [ "Unknown face landmark detected. Should not be filled.", "Left eye.", "Right eye.", "Left of left eyebrow.", "Right of left eyebrow.", "Left of right eyebrow.", "Right of right eyebrow.", "Midpoint between eyes.", "Nose tip.", "Upper lip.", "Lower lip.", "Mouth left.", "Mouth right.", "Mouth center.", "Nose, bottom right.", "Nose, bottom left.", "Nose, bottom center.", "Left eye, top boundary.", "Left eye, right corner.", "Left eye, bottom boundary.", "Left eye, left corner.", "Right eye, top boundary.", "Right eye, right corner.", "Right eye, bottom boundary.", "Right eye, left corner.", "Left eyebrow, upper midpoint.", "Right eyebrow, upper midpoint.", "Left ear tragion.", "Right ear tragion.", "Left eye pupil.", "Right eye pupil.", "Forehead glabella.", "Chin gnathion.", "Chin left gonion.", "Chin right gonion.", "Left cheek center.", "Right cheek center." ] }, "position": { "description": "Face landmark position.", "$ref": "GoogleCloudVisionV1p4beta1Position" } }, "id": "GoogleCloudVisionV1p4beta1FaceAnnotationLandmark", "type": "object", "description": "A face-specific landmark (for example, a face feature)." }, "Paragraph": { "description": "Structural unit of text representing a number of words in certain order.", "properties": { "property": { "$ref": "TextProperty", "description": "Additional information detected for the paragraph." }, "boundingBox": { "$ref": "BoundingPoly", "description": "The bounding box for the paragraph. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3)." }, "confidence": { "type": "number", "description": "Confidence of the OCR results for the paragraph. Range [0, 1].", "format": "float" }, "words": { "description": "List of all words in this paragraph.", "items": { "$ref": "Word" }, "type": "array" } }, "type": "object", "id": "Paragraph" }, "GoogleCloudVisionV1p1beta1LocationInfo": { "properties": { "latLng": { "$ref": "LatLng", "description": "lat/long location coordinates." } }, "type": "object", "description": "Detected entity location information.", "id": "GoogleCloudVisionV1p1beta1LocationInfo" }, "LocationInfo": { "properties": { "latLng": { "$ref": "LatLng", "description": "lat/long location coordinates." } }, "id": "LocationInfo", "type": "object", "description": "Detected entity location information." }, "GoogleCloudVisionV1p1beta1Page": { "properties": { "width": { "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.", "type": "integer", "format": "int32" }, "blocks": { "items": { "$ref": "GoogleCloudVisionV1p1beta1Block" }, "type": "array", "description": "List of blocks of text, images etc on this page." }, "height": { "format": "int32", "type": "integer", "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels." }, "confidence": { "description": "Confidence of the OCR results on the page. Range [0, 1].", "type": "number", "format": "float" }, "property": { "$ref": "GoogleCloudVisionV1p1beta1TextAnnotationTextProperty", "description": "Additional information detected on the page." } }, "id": "GoogleCloudVisionV1p1beta1Page", "type": "object", "description": "Detected page from OCR." }, "GoogleCloudVisionV1p4beta1GcsDestination": { "id": "GoogleCloudVisionV1p4beta1GcsDestination", "description": "The Google Cloud Storage location where the output will be written to.", "properties": { "uri": { "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files.", "type": "string" } }, "type": "object" }, "LocalizedObjectAnnotation": { "type": "object", "description": "Set of detected objects with bounding boxes.", "properties": { "name": { "type": "string", "description": "Object name, expressed in its `language_code` language." }, "score": { "format": "float", "description": "Score of the result. Range [0, 1].", "type": "number" }, "boundingPoly": { "$ref": "BoundingPoly", "description": "Image region to which this object belongs. This must be populated." }, "languageCode": { "type": "string", "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier." }, "mid": { "description": "Object ID that should align with EntityAnnotation mid.", "type": "string" } }, "id": "LocalizedObjectAnnotation" }, "GoogleCloudVisionV1p1beta1TextDetectionParams": { "id": "GoogleCloudVisionV1p1beta1TextDetectionParams", "description": "Parameters for text detections. This is used to control TEXT_DETECTION and DOCUMENT_TEXT_DETECTION features.", "type": "object", "properties": { "enableTextDetectionConfidenceScore": { "type": "boolean", "description": "By default, Cloud Vision API only includes confidence score for DOCUMENT_TEXT_DETECTION result. Set the flag to true to include confidence score for TEXT_DETECTION as well." } } }, "WebEntity": { "id": "WebEntity", "type": "object", "description": "Entity deduced from similar images on the Internet.", "properties": { "score": { "type": "number", "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.", "format": "float" }, "entityId": { "type": "string", "description": "Opaque entity ID." }, "description": { "type": "string", "description": "Canonical description of the entity, in English." } } }, "AsyncBatchAnnotateFilesResponse": { "id": "AsyncBatchAnnotateFilesResponse", "type": "object", "properties": { "responses": { "type": "array", "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest.", "items": { "$ref": "AsyncAnnotateFileResponse" } } }, "description": "Response to an async batch file annotation request." }, "GcsDestination": { "properties": { "uri": { "type": "string", "description": "Google Cloud Storage URI prefix where the results will be stored. Results will be in JSON format and preceded by its corresponding input URI prefix. This field can either represent a gcs file prefix or gcs directory. In either case, the uri should be unique because in order to get all of the output files, you will need to do a wildcard gcs search on the uri prefix you provide. Examples: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh File Prefix: gs://bucket-name/here/filenameprefix The output files will be created in gs://bucket-name/here/ and the names of the output files will begin with \"filenameprefix\". LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh Directory Prefix: gs://bucket-name/some/location/ The output files will be created in gs://bucket-name/some/location/ and the names of the output files could be anything because there was no filename prefix specified. If multiple outputs, each response is still AnnotateFileResponse, each of which contains some subset of the full list of AnnotateImageResponse. Multiple outputs can happen if, for example, the output JSON is too large and overflows into multiple sharded files." } }, "id": "GcsDestination", "description": "The Google Cloud Storage location where the output will be written to.", "type": "object" }, "GoogleCloudVisionV1p1beta1WebDetectionWebImage": { "description": "Metadata for online images.", "type": "object", "id": "GoogleCloudVisionV1p1beta1WebDetectionWebImage", "properties": { "score": { "format": "float", "description": "(Deprecated) Overall relevancy score for the image.", "type": "number" }, "url": { "type": "string", "description": "The result image URL." } } }, "GoogleCloudVisionV1p1beta1ProductSearchResults": { "properties": { "productGroupedResults": { "items": { "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult" }, "description": "List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.", "type": "array" }, "results": { "items": { "$ref": "GoogleCloudVisionV1p1beta1ProductSearchResultsResult" }, "type": "array", "description": "List of results, one for each product match." }, "indexTime": { "format": "google-datetime", "description": "Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.", "type": "string" } }, "type": "object", "description": "Results for a product search request.", "id": "GoogleCloudVisionV1p1beta1ProductSearchResults" }, "GoogleCloudVisionV1p4beta1OperationMetadata": { "type": "object", "description": "Contains metadata for the BatchAnnotateImages operation.", "properties": { "createTime": { "format": "google-datetime", "description": "The time when the batch request was received.", "type": "string" }, "state": { "enum": [ "STATE_UNSPECIFIED", "CREATED", "RUNNING", "DONE", "CANCELLED" ], "description": "Current state of the batch operation.", "enumDescriptions": [ "Invalid.", "Request is received.", "Request is actively being processed.", "The batch processing is done.", "The batch processing was cancelled." ], "type": "string" }, "updateTime": { "description": "The time when the operation result was last updated.", "format": "google-datetime", "type": "string" } }, "id": "GoogleCloudVisionV1p4beta1OperationMetadata" }, "GoogleCloudVisionV1p3beta1FaceAnnotation": { "id": "GoogleCloudVisionV1p3beta1FaceAnnotation", "properties": { "landmarks": { "description": "Detected face landmarks.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1FaceAnnotationLandmark" } }, "angerLikelihood": { "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Anger likelihood." }, "boundingPoly": { "description": "The bounding polygon around the face. The coordinates of the bounding box are in the original image's scale. The bounding box is computed to \"frame\" the face in accordance with human expectations. It is based on the landmarker results. Note that one or more x and/or y coordinates may not be generated in the `BoundingPoly` (the polygon will be unbounded) if only a partial face appears in the image to be annotated.", "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly" }, "joyLikelihood": { "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Joy likelihood.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ] }, "headwearLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "type": "string", "description": "Headwear likelihood.", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "surpriseLikelihood": { "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Surprise likelihood.", "type": "string" }, "fdBoundingPoly": { "description": "The `fd_bounding_poly` bounding polygon is tighter than the `boundingPoly`, and encloses only the skin part of the face. Typically, it is used to eliminate the face from any image analysis that detects the \"amount of skin\" visible in an image. It is not based on the landmarker results, only on the initial face detection, hence the fd (face detection) prefix.", "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly" }, "panAngle": { "type": "number", "format": "float", "description": "Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180]." }, "landmarkingConfidence": { "format": "float", "type": "number", "description": "Face landmarking confidence. Range [0, 1]." }, "rollAngle": { "type": "number", "format": "float", "description": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180]." }, "sorrowLikelihood": { "type": "string", "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "description": "Sorrow likelihood." }, "underExposedLikelihood": { "type": "string", "description": "Under-exposed likelihood.", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ] }, "blurredLikelihood": { "type": "string", "enumDescriptions": [ "Unknown likelihood.", "It is very unlikely.", "It is unlikely.", "It is possible.", "It is likely.", "It is very likely." ], "enum": [ "UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY" ], "description": "Blurred likelihood." }, "detectionConfidence": { "type": "number", "description": "Detection confidence. Range [0, 1].", "format": "float" }, "tiltAngle": { "format": "float", "description": "Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].", "type": "number" } }, "description": "A face annotation object contains the results of face detection.", "type": "object" }, "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse": { "description": "The response for a single offline file annotation request.", "id": "GoogleCloudVisionV1p2beta1AsyncAnnotateFileResponse", "type": "object", "properties": { "outputConfig": { "$ref": "GoogleCloudVisionV1p2beta1OutputConfig", "description": "The output location and metadata from AsyncAnnotateFileRequest." } } }, "GoogleCloudVisionV1p2beta1EntityAnnotation": { "type": "object", "id": "GoogleCloudVisionV1p2beta1EntityAnnotation", "description": "Set of detected entity features.", "properties": { "topicality": { "format": "float", "description": "The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].", "type": "number" }, "properties": { "description": "Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.", "items": { "$ref": "GoogleCloudVisionV1p2beta1Property" }, "type": "array" }, "confidence": { "description": "**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].", "format": "float", "type": "number" }, "description": { "type": "string", "description": "Entity textual description, expressed in its `locale` language." }, "locations": { "type": "array", "description": "The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.", "items": { "$ref": "GoogleCloudVisionV1p2beta1LocationInfo" } }, "boundingPoly": { "description": "Image region to which this entity belongs. Not produced for `LABEL_DETECTION` features.", "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly" }, "score": { "type": "number", "format": "float", "description": "Overall score of the result. Range [0, 1]." }, "mid": { "description": "Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).", "type": "string" }, "locale": { "type": "string", "description": "The language code for the locale in which the entity textual `description` is expressed." } } }, "GoogleCloudVisionV1p2beta1WebDetectionWebPage": { "id": "GoogleCloudVisionV1p2beta1WebDetectionWebPage", "description": "Metadata for web pages.", "properties": { "url": { "description": "The result web page URL.", "type": "string" }, "pageTitle": { "description": "Title for the web page, may contain HTML markups.", "type": "string" }, "partialMatchingImages": { "items": { "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage" }, "type": "array", "description": "Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops." }, "fullMatchingImages": { "items": { "$ref": "GoogleCloudVisionV1p2beta1WebDetectionWebImage" }, "description": "Fully matching images on the page. Can include resized copies of the query image.", "type": "array" }, "score": { "description": "(Deprecated) Overall relevancy score for the web page.", "format": "float", "type": "number" } }, "type": "object" }, "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult": { "description": "Information about the products similar to a single product in a query image.", "properties": { "objectAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsObjectAnnotation" }, "description": "List of generic predictions for the object in the bounding box.", "type": "array" }, "results": { "description": "List of results, one for each product match.", "items": { "$ref": "GoogleCloudVisionV1p2beta1ProductSearchResultsResult" }, "type": "array" }, "boundingPoly": { "description": "The bounding polygon around the product detected in the query image.", "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly" } }, "type": "object", "id": "GoogleCloudVisionV1p2beta1ProductSearchResultsGroupedResult" }, "CropHintsAnnotation": { "properties": { "cropHints": { "description": "Crop hint results.", "items": { "$ref": "CropHint" }, "type": "array" } }, "type": "object", "description": "Set of crop hints that are used to generate new crops when serving images.", "id": "CropHintsAnnotation" }, "GoogleCloudVisionV1p2beta1ColorInfo": { "description": "Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.", "type": "object", "properties": { "score": { "type": "number", "description": "Image-specific score for this color. Value in range [0, 1].", "format": "float" }, "pixelFraction": { "type": "number", "description": "The fraction of pixels the color occupies in the image. Value in range [0, 1].", "format": "float" }, "color": { "$ref": "Color", "description": "RGB components of the color." } }, "id": "GoogleCloudVisionV1p2beta1ColorInfo" }, "GoogleCloudVisionV1p1beta1ImageAnnotationContext": { "properties": { "pageNumber": { "format": "int32", "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image.", "type": "integer" }, "uri": { "type": "string", "description": "The URI of the file used to produce the image." } }, "type": "object", "id": "GoogleCloudVisionV1p1beta1ImageAnnotationContext", "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image." }, "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse": { "id": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse", "type": "object", "description": "Response to an async batch file annotation request.", "properties": { "responses": { "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest.", "items": { "$ref": "GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse" }, "type": "array" } } }, "GoogleCloudVisionV1p1beta1Position": { "type": "object", "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.", "id": "GoogleCloudVisionV1p1beta1Position", "properties": { "z": { "type": "number", "description": "Z coordinate (or depth).", "format": "float" }, "x": { "description": "X coordinate.", "type": "number", "format": "float" }, "y": { "type": "number", "format": "float", "description": "Y coordinate." } } }, "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty": { "description": "Additional information detected on the structural component.", "id": "GoogleCloudVisionV1p4beta1TextAnnotationTextProperty", "properties": { "detectedBreak": { "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak", "description": "Detected start or end of a text segment." }, "detectedLanguages": { "items": { "$ref": "GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage" }, "type": "array", "description": "A list of detected languages together with confidence." } }, "type": "object" }, "GoogleCloudVisionV1p1beta1WebDetection": { "id": "GoogleCloudVisionV1p1beta1WebDetection", "description": "Relevant information for the image from the Internet.", "properties": { "fullMatchingImages": { "items": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage" }, "type": "array", "description": "Fully matching images from the Internet. Can include resized copies of the query image." }, "pagesWithMatchingImages": { "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebPage" }, "description": "Web pages containing the matching images from the Internet." }, "bestGuessLabels": { "type": "array", "description": "The service's best guess as to the topic of the request image. Inferred from similar images on the open web.", "items": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebLabel" } }, "webEntities": { "description": "Deduced entities from similar images on the Internet.", "items": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebEntity" }, "type": "array" }, "visuallySimilarImages": { "description": "The visually similar image results.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage" } }, "partialMatchingImages": { "description": "Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p1beta1WebDetectionWebImage" } } }, "type": "object" }, "GoogleCloudVisionV1p3beta1WebDetectionWebImage": { "type": "object", "id": "GoogleCloudVisionV1p3beta1WebDetectionWebImage", "properties": { "score": { "description": "(Deprecated) Overall relevancy score for the image.", "type": "number", "format": "float" }, "url": { "type": "string", "description": "The result image URL." } }, "description": "Metadata for online images." }, "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateFilesResponse": { "type": "object", "id": "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateFilesResponse", "properties": { "responses": { "description": "The list of file annotation responses, one for each request in AsyncBatchAnnotateFilesRequest.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1AsyncAnnotateFileResponse" } } }, "description": "Response to an async batch file annotation request." }, "GoogleCloudVisionV1p3beta1WebDetectionWebLabel": { "type": "object", "id": "GoogleCloudVisionV1p3beta1WebDetectionWebLabel", "description": "Label to provide extra metadata for the web detection.", "properties": { "label": { "type": "string", "description": "Label for extra metadata." }, "languageCode": { "type": "string", "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier." } } }, "GoogleCloudVisionV1p4beta1CropHint": { "id": "GoogleCloudVisionV1p4beta1CropHint", "properties": { "confidence": { "description": "Confidence of this being a salient region. Range [0, 1].", "format": "float", "type": "number" }, "importanceFraction": { "description": "Fraction of importance of this salient region with respect to the original image.", "type": "number", "format": "float" }, "boundingPoly": { "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.", "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly" } }, "description": "Single crop hint that is used to generate a new crop when serving an image.", "type": "object" }, "GoogleCloudVisionV1p2beta1Symbol": { "description": "A single symbol representation.", "id": "GoogleCloudVisionV1p2beta1Symbol", "type": "object", "properties": { "text": { "description": "The actual UTF-8 representation of the symbol.", "type": "string" }, "boundingBox": { "description": "The bounding box for the symbol. The vertices are in the order of top-left, top-right, bottom-right, bottom-left. When a rotation of the bounding box is detected the rotation is represented as around the top-left corner as defined when the text is read in the 'natural' orientation. For example: LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when the text is horizontal it might look like: 0----1 | | 3----2 LICENSE Makefile README.md gsa_key.json lua-resty-gcp-dev-1.rockspec lua-resty-gcp-scm-1.rockspec.original lua-resty-gcp-scm-1.rockspec.template spec src upload.sh when it's rotated 180 degrees around the top-left corner it becomes: 2----3 | | 1----0 and the vertex order will still be (0, 1, 2, 3).", "$ref": "GoogleCloudVisionV1p2beta1BoundingPoly" }, "property": { "$ref": "GoogleCloudVisionV1p2beta1TextAnnotationTextProperty", "description": "Additional information detected for the symbol." }, "confidence": { "description": "Confidence of the OCR results for the symbol. Range [0, 1].", "format": "float", "type": "number" } } }, "GoogleCloudVisionV1p4beta1Vertex": { "description": "A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.", "id": "GoogleCloudVisionV1p4beta1Vertex", "properties": { "y": { "type": "integer", "description": "Y coordinate.", "format": "int32" }, "x": { "description": "X coordinate.", "type": "integer", "format": "int32" } }, "type": "object" }, "TextAnnotation": { "properties": { "pages": { "description": "List of pages detected by OCR.", "items": { "$ref": "Page" }, "type": "array" }, "text": { "description": "UTF-8 text detected on the pages.", "type": "string" } }, "id": "TextAnnotation", "type": "object", "description": "TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail." }, "WebLabel": { "id": "WebLabel", "type": "object", "description": "Label to provide extra metadata for the web detection.", "properties": { "label": { "description": "Label for extra metadata.", "type": "string" }, "languageCode": { "description": "The BCP-47 language code for `label`, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" } } }, "Product": { "id": "Product", "type": "object", "properties": { "productCategory": { "type": "string", "description": "Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products." }, "description": { "description": "User-provided metadata to be stored with this product. Must be at most 4096 characters long.", "type": "string" }, "name": { "description": "The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.", "type": "string" }, "productLabels": { "description": "Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.", "items": { "$ref": "KeyValue" }, "type": "array" }, "displayName": { "type": "string", "description": "The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long." } }, "description": "A Product contains ReferenceImages." }, "AsyncAnnotateFileResponse": { "type": "object", "properties": { "outputConfig": { "description": "The output location and metadata from AsyncAnnotateFileRequest.", "$ref": "OutputConfig" } }, "description": "The response for a single offline file annotation request.", "id": "AsyncAnnotateFileResponse" }, "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation": { "description": "Set of detected objects with bounding boxes.", "properties": { "score": { "description": "Score of the result. Range [0, 1].", "type": "number", "format": "float" }, "boundingPoly": { "$ref": "GoogleCloudVisionV1p3beta1BoundingPoly", "description": "Image region to which this object belongs. This must be populated." }, "name": { "type": "string", "description": "Object name, expressed in its `language_code` language." }, "mid": { "type": "string", "description": "Object ID that should align with EntityAnnotation mid." }, "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" } }, "id": "GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation", "type": "object" }, "WebImage": { "description": "Metadata for online images.", "id": "WebImage", "type": "object", "properties": { "score": { "description": "(Deprecated) Overall relevancy score for the image.", "type": "number", "format": "float" }, "url": { "type": "string", "description": "The result image URL." } } }, "GoogleCloudVisionV1p4beta1InputConfig": { "id": "GoogleCloudVisionV1p4beta1InputConfig", "description": "The desired input location and metadata.", "properties": { "gcsSource": { "description": "The Google Cloud Storage location to read the input from.", "$ref": "GoogleCloudVisionV1p4beta1GcsSource" }, "mimeType": { "type": "string", "description": "The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported." }, "content": { "type": "string", "format": "byte", "description": "File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests." } }, "type": "object" }, "AnnotateFileResponse": { "id": "AnnotateFileResponse", "type": "object", "description": "Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.", "properties": { "responses": { "description": "Individual responses to images found within the file. This field will be empty if the `error` field is set.", "items": { "$ref": "AnnotateImageResponse" }, "type": "array" }, "totalPages": { "format": "int32", "type": "integer", "description": "This field gives the total number of pages in the file." }, "inputConfig": { "$ref": "InputConfig", "description": "Information about the file for which this response is generated." }, "error": { "description": "If set, represents the error message for the failed request. The `responses` field will not be set in this case.", "$ref": "Status" } } }, "GoogleCloudVisionV1p3beta1Page": { "id": "GoogleCloudVisionV1p3beta1Page", "type": "object", "description": "Detected page from OCR.", "properties": { "blocks": { "description": "List of blocks of text, images etc on this page.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p3beta1Block" } }, "height": { "format": "int32", "description": "Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.", "type": "integer" }, "width": { "type": "integer", "description": "Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.", "format": "int32" }, "confidence": { "description": "Confidence of the OCR results on the page. Range [0, 1].", "format": "float", "type": "number" }, "property": { "description": "Additional information detected on the page.", "$ref": "GoogleCloudVisionV1p3beta1TextAnnotationTextProperty" } } }, "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateImagesResponse": { "type": "object", "description": "Response to an async batch image annotation request.", "properties": { "outputConfig": { "$ref": "GoogleCloudVisionV1p4beta1OutputConfig", "description": "The output location and metadata from AsyncBatchAnnotateImagesRequest." } }, "id": "GoogleCloudVisionV1p4beta1AsyncBatchAnnotateImagesResponse" }, "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation": { "type": "object", "id": "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation", "properties": { "score": { "format": "float", "type": "number", "description": "Score of the result. Range [0, 1]." }, "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "boundingPoly": { "description": "Image region to which this object belongs. This must be populated.", "$ref": "GoogleCloudVisionV1p4beta1BoundingPoly" }, "mid": { "type": "string", "description": "Object ID that should align with EntityAnnotation mid." }, "name": { "description": "Object name, expressed in its `language_code` language.", "type": "string" } }, "description": "Set of detected objects with bounding boxes." }, "GoogleCloudVisionV1p2beta1CropHintsAnnotation": { "type": "object", "id": "GoogleCloudVisionV1p2beta1CropHintsAnnotation", "properties": { "cropHints": { "items": { "$ref": "GoogleCloudVisionV1p2beta1CropHint" }, "type": "array", "description": "Crop hint results." } }, "description": "Set of crop hints that are used to generate new crops when serving images." }, "GoogleCloudVisionV1p4beta1LocationInfo": { "type": "object", "id": "GoogleCloudVisionV1p4beta1LocationInfo", "properties": { "latLng": { "$ref": "LatLng", "description": "lat/long location coordinates." } }, "description": "Detected entity location information." }, "GoogleCloudVisionV1p2beta1LocationInfo": { "description": "Detected entity location information.", "properties": { "latLng": { "description": "lat/long location coordinates.", "$ref": "LatLng" } }, "id": "GoogleCloudVisionV1p2beta1LocationInfo", "type": "object" }, "Landmark": { "type": "object", "properties": { "type": { "description": "Face landmark type.", "type": "string", "enumDescriptions": [ "Unknown face landmark detected. Should not be filled.", "Left eye.", "Right eye.", "Left of left eyebrow.", "Right of left eyebrow.", "Left of right eyebrow.", "Right of right eyebrow.", "Midpoint between eyes.", "Nose tip.", "Upper lip.", "Lower lip.", "Mouth left.", "Mouth right.", "Mouth center.", "Nose, bottom right.", "Nose, bottom left.", "Nose, bottom center.", "Left eye, top boundary.", "Left eye, right corner.", "Left eye, bottom boundary.", "Left eye, left corner.", "Right eye, top boundary.", "Right eye, right corner.", "Right eye, bottom boundary.", "Right eye, left corner.", "Left eyebrow, upper midpoint.", "Right eyebrow, upper midpoint.", "Left ear tragion.", "Right ear tragion.", "Left eye pupil.", "Right eye pupil.", "Forehead glabella.", "Chin gnathion.", "Chin left gonion.", "Chin right gonion.", "Left cheek center.", "Right cheek center." ], "enum": [ "UNKNOWN_LANDMARK", "LEFT_EYE", "RIGHT_EYE", "LEFT_OF_LEFT_EYEBROW", "RIGHT_OF_LEFT_EYEBROW", "LEFT_OF_RIGHT_EYEBROW", "RIGHT_OF_RIGHT_EYEBROW", "MIDPOINT_BETWEEN_EYES", "NOSE_TIP", "UPPER_LIP", "LOWER_LIP", "MOUTH_LEFT", "MOUTH_RIGHT", "MOUTH_CENTER", "NOSE_BOTTOM_RIGHT", "NOSE_BOTTOM_LEFT", "NOSE_BOTTOM_CENTER", "LEFT_EYE_TOP_BOUNDARY", "LEFT_EYE_RIGHT_CORNER", "LEFT_EYE_BOTTOM_BOUNDARY", "LEFT_EYE_LEFT_CORNER", "RIGHT_EYE_TOP_BOUNDARY", "RIGHT_EYE_RIGHT_CORNER", "RIGHT_EYE_BOTTOM_BOUNDARY", "RIGHT_EYE_LEFT_CORNER", "LEFT_EYEBROW_UPPER_MIDPOINT", "RIGHT_EYEBROW_UPPER_MIDPOINT", "LEFT_EAR_TRAGION", "RIGHT_EAR_TRAGION", "LEFT_EYE_PUPIL", "RIGHT_EYE_PUPIL", "FOREHEAD_GLABELLA", "CHIN_GNATHION", "CHIN_LEFT_GONION", "CHIN_RIGHT_GONION", "LEFT_CHEEK_CENTER", "RIGHT_CHEEK_CENTER" ] }, "position": { "description": "Face landmark position.", "$ref": "Position" } }, "id": "Landmark", "description": "A face-specific landmark (for example, a face feature)." }, "ImageAnnotationContext": { "id": "ImageAnnotationContext", "description": "If an image was produced from a file (e.g. a PDF), this message gives information about the source of that image.", "properties": { "pageNumber": { "type": "integer", "format": "int32", "description": "If the file was a PDF or TIFF, this field gives the page number within the file used to produce the image." }, "uri": { "type": "string", "description": "The URI of the file used to produce the image." } }, "type": "object" }, "GoogleCloudVisionV1p1beta1Image": { "type": "object", "id": "GoogleCloudVisionV1p1beta1Image", "description": "Client image to perform Google Cloud Vision API tasks over.", "properties": { "content": { "type": "string", "description": "Image content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateImages requests. It does not work for AsyncBatchAnnotateImages requests.", "format": "byte" }, "source": { "$ref": "GoogleCloudVisionV1p1beta1ImageSource", "description": "Google Cloud Storage image location, or publicly-accessible image URL. If both `content` and `source` are provided for an image, `content` takes precedence and is used to perform the image annotation request." } } }, "Position": { "description": "A 3D position in the image, used primarily for Face detection landmarks. A valid Position must have both x and y coordinates. The position coordinates are in the same scale as the original image.", "properties": { "z": { "format": "float", "type": "number", "description": "Z coordinate (or depth)." }, "y": { "type": "number", "description": "Y coordinate.", "format": "float" }, "x": { "type": "number", "description": "X coordinate.", "format": "float" } }, "id": "Position", "type": "object" }, "DetectedLanguage": { "id": "DetectedLanguage", "properties": { "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "confidence": { "type": "number", "description": "Confidence of detected language. Range [0, 1].", "format": "float" } }, "type": "object", "description": "Detected language for a structural component." }, "GoogleCloudVisionV1p1beta1WebDetectionWebEntity": { "type": "object", "properties": { "description": { "type": "string", "description": "Canonical description of the entity, in English." }, "entityId": { "description": "Opaque entity ID.", "type": "string" }, "score": { "description": "Overall relevancy score for the entity. Not normalized and not comparable across different image queries.", "type": "number", "format": "float" } }, "id": "GoogleCloudVisionV1p1beta1WebDetectionWebEntity", "description": "Entity deduced from similar images on the Internet." }, "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation": { "description": "Prediction for what the object in the bounding box is.", "type": "object", "id": "GoogleCloudVisionV1p3beta1ProductSearchResultsObjectAnnotation", "properties": { "languageCode": { "type": "string", "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier." }, "score": { "type": "number", "format": "float", "description": "Score of the result. Range [0, 1]." }, "mid": { "type": "string", "description": "Object ID that should align with EntityAnnotation mid." }, "name": { "description": "Object name, expressed in its `language_code` language.", "type": "string" } } }, "GoogleCloudVisionV1p1beta1BatchAnnotateFilesResponse": { "description": "A list of file annotation responses.", "type": "object", "id": "GoogleCloudVisionV1p1beta1BatchAnnotateFilesResponse", "properties": { "responses": { "type": "array", "description": "The list of file annotation responses, each response corresponding to each AnnotateFileRequest in BatchAnnotateFilesRequest.", "items": { "$ref": "GoogleCloudVisionV1p1beta1AnnotateFileResponse" } } } }, "GoogleCloudVisionV1p4beta1AnnotateImageResponse": { "type": "object", "id": "GoogleCloudVisionV1p4beta1AnnotateImageResponse", "description": "Response to an image annotation request.", "properties": { "labelAnnotations": { "items": { "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation" }, "type": "array", "description": "If present, label detection has completed successfully." }, "error": { "description": "If set, represents the error message for the operation. Note that filled-in image annotations are guaranteed to be correct, even when `error` is set.", "$ref": "Status" }, "webDetection": { "description": "If present, web detection has completed successfully.", "$ref": "GoogleCloudVisionV1p4beta1WebDetection" }, "context": { "description": "If present, contextual information is needed to understand where this image comes from.", "$ref": "GoogleCloudVisionV1p4beta1ImageAnnotationContext" }, "cropHintsAnnotation": { "description": "If present, crop hints have completed successfully.", "$ref": "GoogleCloudVisionV1p4beta1CropHintsAnnotation" }, "imagePropertiesAnnotation": { "description": "If present, image properties were extracted successfully.", "$ref": "GoogleCloudVisionV1p4beta1ImageProperties" }, "landmarkAnnotations": { "type": "array", "description": "If present, landmark detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation" } }, "localizedObjectAnnotations": { "description": "If present, localized object detection has completed successfully. This will be sorted descending by confidence score.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation" } }, "logoAnnotations": { "description": "If present, logo detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation" }, "type": "array" }, "fullTextAnnotation": { "$ref": "GoogleCloudVisionV1p4beta1TextAnnotation", "description": "If present, text (OCR) detection or document (OCR) text detection has completed successfully. This annotation provides the structural hierarchy for the OCR detected text." }, "textAnnotations": { "description": "If present, text (OCR) detection has completed successfully.", "type": "array", "items": { "$ref": "GoogleCloudVisionV1p4beta1EntityAnnotation" } }, "productSearchResults": { "description": "If present, product search has completed successfully.", "$ref": "GoogleCloudVisionV1p4beta1ProductSearchResults" }, "safeSearchAnnotation": { "description": "If present, safe-search annotation has completed successfully.", "$ref": "GoogleCloudVisionV1p4beta1SafeSearchAnnotation" }, "faceAnnotations": { "description": "If present, face detection has completed successfully.", "items": { "$ref": "GoogleCloudVisionV1p4beta1FaceAnnotation" }, "type": "array" } } }, "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage": { "type": "object", "properties": { "languageCode": { "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.", "type": "string" }, "confidence": { "format": "float", "type": "number", "description": "Confidence of detected language. Range [0, 1]." } }, "description": "Detected language for a structural component.", "id": "GoogleCloudVisionV1p1beta1TextAnnotationDetectedLanguage" }, "GoogleCloudVisionV1p1beta1CropHint": { "type": "object", "properties": { "boundingPoly": { "description": "The bounding polygon for the crop region. The coordinates of the bounding box are in the original image's scale.", "$ref": "GoogleCloudVisionV1p1beta1BoundingPoly" }, "confidence": { "description": "Confidence of this being a salient region. Range [0, 1].", "type": "number", "format": "float" }, "importanceFraction": { "description": "Fraction of importance of this salient region with respect to the original image.", "format": "float", "type": "number" } }, "id": "GoogleCloudVisionV1p1beta1CropHint", "description": "Single crop hint that is used to generate a new crop when serving an image." } }, "ownerDomain": "google.com", "resources": { "projects": { "resources": { "locations": { "resources": { "files": { "methods": { "annotate": { "path": "v1p1beta1/{+parent}/files:annotate", "request": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest" }, "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/files:annotate", "response": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateFilesResponse" }, "httpMethod": "POST", "id": "vision.projects.locations.files.annotate", "parameters": { "parent": { "type": "string", "required": true, "location": "path", "pattern": "^projects/[^/]+/locations/[^/]+$", "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`." } }, "parameterOrder": [ "parent" ], "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.", "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ] }, "asyncBatchAnnotate": { "parameterOrder": [ "parent" ], "parameters": { "parent": { "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.", "pattern": "^projects/[^/]+/locations/[^/]+$", "type": "string", "location": "path", "required": true } }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "response": { "$ref": "Operation" }, "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).", "request": { "$ref": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest" }, "id": "vision.projects.locations.files.asyncBatchAnnotate", "path": "v1p1beta1/{+parent}/files:asyncBatchAnnotate", "httpMethod": "POST", "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/files:asyncBatchAnnotate" } } }, "images": { "methods": { "asyncBatchAnnotate": { "path": "v1p1beta1/{+parent}/images:asyncBatchAnnotate", "httpMethod": "POST", "request": { "$ref": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateImagesRequest" }, "response": { "$ref": "Operation" }, "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/images:asyncBatchAnnotate", "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.", "parameterOrder": [ "parent" ], "id": "vision.projects.locations.images.asyncBatchAnnotate", "parameters": { "parent": { "required": true, "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.", "location": "path", "type": "string", "pattern": "^projects/[^/]+/locations/[^/]+$" } }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ] }, "annotate": { "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "parameterOrder": [ "parent" ], "parameters": { "parent": { "required": true, "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.", "pattern": "^projects/[^/]+/locations/[^/]+$", "location": "path", "type": "string" } }, "httpMethod": "POST", "description": "Run image detection and annotation for a batch of images.", "response": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateImagesResponse" }, "request": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateImagesRequest" }, "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/images:annotate", "id": "vision.projects.locations.images.annotate", "path": "v1p1beta1/{+parent}/images:annotate" } } } } }, "images": { "methods": { "asyncBatchAnnotate": { "parameterOrder": [ "parent" ], "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.", "httpMethod": "POST", "flatPath": "v1p1beta1/projects/{projectsId}/images:asyncBatchAnnotate", "path": "v1p1beta1/{+parent}/images:asyncBatchAnnotate", "id": "vision.projects.images.asyncBatchAnnotate", "request": { "$ref": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateImagesRequest" }, "response": { "$ref": "Operation" }, "parameters": { "parent": { "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.", "type": "string", "location": "path", "pattern": "^projects/[^/]+$", "required": true } } }, "annotate": { "httpMethod": "POST", "parameters": { "parent": { "pattern": "^projects/[^/]+$", "type": "string", "location": "path", "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.", "required": true } }, "path": "v1p1beta1/{+parent}/images:annotate", "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "request": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateImagesRequest" }, "id": "vision.projects.images.annotate", "flatPath": "v1p1beta1/projects/{projectsId}/images:annotate", "parameterOrder": [ "parent" ], "description": "Run image detection and annotation for a batch of images.", "response": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateImagesResponse" } } } }, "files": { "methods": { "annotate": { "path": "v1p1beta1/{+parent}/files:annotate", "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.", "id": "vision.projects.files.annotate", "parameters": { "parent": { "location": "path", "type": "string", "pattern": "^projects/[^/]+$", "required": true, "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`." } }, "request": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest" }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "response": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateFilesResponse" }, "parameterOrder": [ "parent" ], "flatPath": "v1p1beta1/projects/{projectsId}/files:annotate", "httpMethod": "POST" }, "asyncBatchAnnotate": { "response": { "$ref": "Operation" }, "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).", "httpMethod": "POST", "request": { "$ref": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest" }, "path": "v1p1beta1/{+parent}/files:asyncBatchAnnotate", "id": "vision.projects.files.asyncBatchAnnotate", "parameterOrder": [ "parent" ], "parameters": { "parent": { "type": "string", "location": "path", "pattern": "^projects/[^/]+$", "description": "Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.", "required": true } }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "flatPath": "v1p1beta1/projects/{projectsId}/files:asyncBatchAnnotate" } } } } }, "images": { "methods": { "annotate": { "httpMethod": "POST", "id": "vision.images.annotate", "flatPath": "v1p1beta1/images:annotate", "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "description": "Run image detection and annotation for a batch of images.", "path": "v1p1beta1/images:annotate", "response": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateImagesResponse" }, "request": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateImagesRequest" }, "parameterOrder": [], "parameters": {} }, "asyncBatchAnnotate": { "request": { "$ref": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateImagesRequest" }, "parameters": {}, "httpMethod": "POST", "response": { "$ref": "Operation" }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "parameterOrder": [], "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.", "flatPath": "v1p1beta1/images:asyncBatchAnnotate", "id": "vision.images.asyncBatchAnnotate", "path": "v1p1beta1/images:asyncBatchAnnotate" } } }, "files": { "methods": { "asyncBatchAnnotate": { "parameters": {}, "request": { "$ref": "GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest" }, "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).", "response": { "$ref": "Operation" }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "path": "v1p1beta1/files:asyncBatchAnnotate", "flatPath": "v1p1beta1/files:asyncBatchAnnotate", "httpMethod": "POST", "id": "vision.files.asyncBatchAnnotate", "parameterOrder": [] }, "annotate": { "httpMethod": "POST", "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.", "response": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateFilesResponse" }, "parameters": {}, "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/cloud-vision" ], "request": { "$ref": "GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest" }, "parameterOrder": [], "flatPath": "v1p1beta1/files:annotate", "path": "v1p1beta1/files:annotate", "id": "vision.files.annotate" } } } }, "auth": { "oauth2": { "scopes": { "https://www.googleapis.com/auth/cloud-platform": { "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account." }, "https://www.googleapis.com/auth/cloud-vision": { "description": "Apply machine learning models to understand and label images" } } } }, "canonicalName": "Vision", "parameters": { "$.xgafv": { "location": "query", "enum": [ "1", "2" ], "description": "V1 error format.", "enumDescriptions": [ "v1 error format", "v2 error format" ], "type": "string" }, "upload_protocol": { "location": "query", "type": "string", "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")." }, "prettyPrint": { "description": "Returns response with indentations and line breaks.", "location": "query", "default": "true", "type": "boolean" }, "alt": { "default": "json", "enum": [ "json", "media", "proto" ], "description": "Data format for response.", "enumDescriptions": [ "Responses with Content-Type of application/json", "Media download with context-dependent Content-Type", "Responses with Content-Type of application/x-protobuf" ], "type": "string", "location": "query" }, "uploadType": { "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "location": "query", "type": "string" }, "quotaUser": { "location": "query", "type": "string", "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters." }, "fields": { "location": "query", "description": "Selector specifying which fields to include in a partial response.", "type": "string" }, "access_token": { "location": "query", "description": "OAuth access token.", "type": "string" }, "key": { "type": "string", "location": "query", "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token." }, "oauth_token": { "description": "OAuth 2.0 token for the current user.", "location": "query", "type": "string" }, "callback": { "location": "query", "description": "JSONP", "type": "string" } }, "batchPath": "batch", "ownerName": "Google", "protocol": "rest", "servicePath": "", "revision": "20220624", "description": "Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.", "discoveryVersion": "v1", "baseUrl": "https://vision.googleapis.com/", "icons": { "x16": "http://www.google.com/images/icons/product/search-16.gif", "x32": "http://www.google.com/images/icons/product/search-32.gif" }, "title": "Cloud Vision API", "basePath": "", "kind": "discovery#restDescription", "id": "vision:v1p1beta1", "name": "vision", "fullyEncodeReservedExpansion": true, "version_module": true, "documentationLink": "https://cloud.google.com/vision/" }
]===]))
