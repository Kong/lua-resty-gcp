local fmt = string.format
local restore = require "spec.helpers"

describe("access token", function ()
  local access_token
  setup(function()
    local http = {
      new = function()
        return {
          counter = 0,
          close = function() return true end,
          request_uri = function(self, url, opts)
            self.counter = self.counter + 1
            if url == "https://www.googleapis.com/oauth2/v4/token" then
              return {
                status = 200,
                body = [[{"access_token": "test_jwt", "expires_in": 3600}]],
              }
            elseif url == "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token" then
              return {
                status = 200,
                body = [[{"access_token": "test_wi", "expires_in": 3600}]],
              }
            else
              error("bad test path provided??? " .. tostring(opts.path))
            end
          end,
        }
      end,
    }

    package.loaded["resty.luasocket.http"] = http
  end)

  teardown(function()
    package.loaded["resty.luasocket.http"] = nil
  end)

  before_each(function()
    restore()
    -- generated by https://dinochiesa.github.io/jwt/
    restore.setenv("GCP_SERVICE_ACCOUNT", [[
      { "type": "service_account",
        "project_id": "test-project",
        "private_key_id": "test-private-key-id",
        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDkelwQ7F8RiA+R\noBGAwimZ7e8F5eBqJK9apaBHKf0jbg2a1Rmuvbar/jq0Jv1/A9+y3bGp0JdMk4WB\nvVsC7qFveEUrP/2pxhPNFJWrQ/9ors1rnIIAL7+n8AWXHqn/Y+3r92QYRN7YaIGL\nO8TqWdI9wIL0wzC4JwHFnIg4BYD2J6ioDjJj70LdsBF5/EQnu5P/QaAbGkGy8oQH\nklGkoQLo58vv8fUu9SyW59WJHm/718Uq6zaPpq6T7lMbboFk8reVCmL4iAfyYeSK\ndaO+ZT5ZKSvdIyKl6dIfjiaxkJAo5zE+BRG7fX6AZNxGHKL1/zYUyP2yWysbhFUI\nG25v7dsBAgMBAAECggEAB+zTnTWpvYiv64/3E3WIrmFxsU1uOZhQqc8Fbnp/IJe8\napK6O5Syjag5no6cq+d1PrXQaBDHcr1KO/wWuFURLfXoxk2HrbgkbzBn2aM37Ihl\nsTYiT0HYvslFVF7YrDZp5g20f+ABr9V+Ktd1puBbOc+f60ALBFQ8DD/3/KN6O++G\n8b5WSTrpVFn5pvEgLjeFMs7XFocs9KbFXnKm4RTAv8dGqp6kWR2ChmDN3mdJe57o\nYOciSIsUiTOf1WmolUSVsfXwYG5ZYlljLIWckYbG3S5dKd+DalavD+hmyQHlhROx\njxcGJ3DKht5I2f34hEFOxh42W8Cxehe9EY7aUwiW/QKBgQD5SDMH7qK5P8RxfvJR\nmD0caKKVKDSoPz/Ggs8uRQBxdFg40WH0gvTTQSSW/aeFHHRahAf73/a6FaHVfma5\nEOYkBFf+BiSKS4eje8vKc/m5RSJqFt3zIyhI0bDTVo384jwOr6MHYZukS2khvxLQ\nmBE94QFCdyae8GOolmTc8+hizQKBgQDqoqH7kzQ0yfJEzPn/sqKY/263AoVCiIjR\nQfrRMgDtvTGwWr+HhsUuwFfPkX/+5nBlPVaxq9h8uYQImmm6p2vEhOKq831FqQSY\nLKvPMjmzT6FAuF7iqxa9dlp5dR22VIYuqI5wcJSEr89rGnhhMUULjVaOjjlkaWED\nr8zveUWhBQKBgFwVWIx4kXGe5aELRNXxR7nDyTMSDAmOe6+HyKKN6LEASkqKxgV9\njpSu/qYsAwK/1RdOqGhZfhmVPhfQPn/khy8Mz7hNapgPeIZih5A8sSXILQNFeS2E\ncjAcDZaz5XVh2M+P/8gNPWI+XRKTM48MbWoPQNjdjM2vfRDcpVudWd2NAoGAKmoh\ny/9tNYm4ANXo718UY4HxOqX6/u79hI5fz8cxQcisncuZyd8D8BKXDQ+pSqPPd42i\nCVYeOVWz13ZKXJJ9ObYn321KnPgTu4p/uGHE6nQfmzp49JKm9rLZYhFYwKgA5ZhU\nv2CqiF3bqenMDw3ABHmVRwnQuCUQg4EZE8UhYB0CgYA0dDwc5Xmqw9bwojU0TDgH\nxQ+nSj4+XBAPjonciYm9gYoLi7o3NMMXvhMKOygl5U+IS28DdG/RlphNiqoKotGR\n90IwEEZQP5ERnpKg/I3onWJGILaMfwAhhHQ8bv77Bz2KDQoyiqQjDk0CeClXeGe5\nPBbLw1ric2VEsSZMNFZLLQ==\n-----END PRIVATE KEY-----\n",
        "client_email": "test@konghq.com"
      }]])
    access_token = require "resty.gcp.request.credentials.accesstoken"
  end)

  after_each(function()
      restore()
      package.loaded["resty.gcp.request.credentials.accesstoken"] = nil
  end)

  it("should create an access token with default auth method", function()
    local gcpToken = access_token()
    assert.same(gcpToken.token, "test_wi")
    assert.is_number(gcpToken.expireTime)
    assert.is_boolean(gcpToken:needsRefresh())
  end)

  it("should create an access token with legacy auth method order", function()
    local gcpToken = access_token(nil, { auth_method_order = "legacy" })
    assert.same(gcpToken.token, "test_wi")
    assert.is_number(gcpToken.expireTime)
    assert.is_boolean(gcpToken:needsRefresh())
  end)

  it("should create an access token with adc auth method order", function()
    local gcpToken = access_token(nil, { auth_method_order = "adc" })
    assert.same(gcpToken.token, "test_jwt")
    assert.is_number(gcpToken.expireTime)
    assert.is_boolean(gcpToken:needsRefresh())
  end)
end)
