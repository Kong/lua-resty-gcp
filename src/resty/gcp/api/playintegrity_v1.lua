local decode = require("cjson").new().decode
return assert(decode([===[
{ "basePath": "", "ownerDomain": "google.com", "auth": { "oauth2": { "scopes": { "https://www.googleapis.com/auth/playintegrity": { "description": "Private Service: https://www.googleapis.com/auth/playintegrity" } } } }, "parameters": { "fields": { "location": "query", "type": "string", "description": "Selector specifying which fields to include in a partial response." }, "upload_protocol": { "type": "string", "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").", "location": "query" }, "uploadType": { "location": "query", "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "type": "string" }, "quotaUser": { "type": "string", "location": "query", "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters." }, "oauth_token": { "type": "string", "location": "query", "description": "OAuth 2.0 token for the current user." }, "access_token": { "type": "string", "description": "OAuth access token.", "location": "query" }, "$.xgafv": { "enum": [ "1", "2" ], "description": "V1 error format.", "location": "query", "type": "string", "enumDescriptions": [ "v1 error format", "v2 error format" ] }, "alt": { "default": "json", "description": "Data format for response.", "location": "query", "enumDescriptions": [ "Responses with Content-Type of application/json", "Media download with context-dependent Content-Type", "Responses with Content-Type of application/x-protobuf" ], "type": "string", "enum": [ "json", "media", "proto" ] }, "prettyPrint": { "type": "boolean", "default": "true", "location": "query", "description": "Returns response with indentations and line breaks." }, "key": { "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location": "query", "type": "string" }, "callback": { "description": "JSONP", "location": "query", "type": "string" } }, "batchPath": "batch", "version_module": true, "ownerName": "Google", "servicePath": "", "kind": "discovery#restDescription", "documentationLink": "https://developer.android.com/google/play/integrity", "schemas": { "AccountDetails": { "id": "AccountDetails", "type": "object", "properties": { "appLicensingVerdict": { "type": "string", "enumDescriptions": [ "Play does not have sufficient information to evaluate licensing details", "The app and certificate match the versions distributed by Play.", "The certificate or package name does not match Google Play records.", "Licensing details were not evaluated since a necessary requirement was missed. For example DeviceIntegrity did not meet the minimum bar or the application was not a known Play version." ], "enum": [ "UNKNOWN", "LICENSED", "UNLICENSED", "UNEVALUATED" ], "description": "Required. Details about the licensing status of the user for the app in the scope." } }, "description": "Contains the account information such as the licensing status for the user in the scope." }, "AppIntegrity": { "id": "AppIntegrity", "description": "Contains the application integrity information.", "properties": { "packageName": { "description": "Package name of the application under attestation. Set iff app_recognition_verdict != UNEVALUATED.", "type": "string" }, "certificateSha256Digest": { "items": { "type": "string" }, "type": "array", "description": "Hex fingerprint of the application signing certificate. e.g. “ABCE1F....” Set iff app_recognition_verdict != UNEVALUATED." }, "appRecognitionVerdict": { "type": "string", "enumDescriptions": [ "Play does not have sufficient information to evaluate app integrity", "The app and certificate match the versions distributed by Play.", "The certificate or package name does not match Google Play records.", "Application integrity was not evaluated since a necessary requirement was missed. For example DeviceIntegrity did not meet the minimum bar." ], "description": "Required. Details about the app recognition verdict", "enum": [ "UNKNOWN", "PLAY_RECOGNIZED", "UNRECOGNIZED_VERSION", "UNEVALUATED" ] }, "versionCode": { "type": "string", "format": "int64", "description": "Version code of the application. Set iff app_recognition_verdict != UNEVALUATED." } }, "type": "object" }, "TokenPayloadExternal": { "properties": { "accountDetails": { "description": "Required. Details about the Play Store account.", "$ref": "AccountDetails" }, "appIntegrity": { "description": "Required. Details about the application integrity.", "$ref": "AppIntegrity" }, "deviceIntegrity": { "description": "Required. Details about the device integrity.", "$ref": "DeviceIntegrity" }, "testingDetails": { "description": "Indicates that this payload is generated for testing purposes and contains any additional data that is linked with testing status.", "$ref": "TestingDetails" }, "requestDetails": { "$ref": "RequestDetails", "description": "Required. Details about the integrity request." } }, "type": "object", "id": "TokenPayloadExternal", "description": "Contains basic app information and integrity signals like device attestation and licensing details." }, "TestingDetails": { "id": "TestingDetails", "description": "Contains additional information generated for testing responses.", "type": "object", "properties": { "isTestingResponse": { "description": "Required. Indicates that the information contained in this payload is a testing response that is statically overridden for a tester.", "type": "boolean" } } }, "DecodeIntegrityTokenResponse": { "id": "DecodeIntegrityTokenResponse", "type": "object", "description": "Response containing the decoded integrity payload.", "properties": { "tokenPayloadExternal": { "$ref": "TokenPayloadExternal", "description": "Plain token payload generated from the decoded integrity token." } } }, "RequestDetails": { "id": "RequestDetails", "description": "Contains the integrity request information.", "properties": { "nonce": { "type": "string", "description": "Required. Nonce that was provided in the request (which is base64 web-safe no-wrap)." }, "requestPackageName": { "description": "Required. Application package name this attestation was requested for. Note: This field makes no guarantees or promises on the caller integrity. For details on application integrity, check application_integrity.", "type": "string" }, "timestampMillis": { "format": "int64", "description": "Required. Timestamp, in milliseconds, of the integrity application request.", "type": "string" } }, "type": "object" }, "DeviceIntegrity": { "type": "object", "id": "DeviceIntegrity", "properties": { "deviceRecognitionVerdict": { "type": "array", "description": "Details about the integrity of the device the app is running on", "items": { "type": "string", "enum": [ "UNKNOWN", "MEETS_BASIC_INTEGRITY", "MEETS_DEVICE_INTEGRITY", "MEETS_STRONG_INTEGRITY", "MEETS_VIRTUAL_INTEGRITY" ], "enumDescriptions": [ "Play does not have sufficient information to evaluate device integrity", "App is running on a device that passes basic system integrity checks, but may not meet Android platform compatibility requirements and may not be approved to run Google Play services.", "App is running on GMS Android device with Google Play services.", "App is running on GMS Android device with Google Play services and has a strong guarantee of system integrity such as a hardware-backed keystore.", "App is running on an Android emulator with Google Play services which meets core Android compatibility requirements." ] } } }, "description": "Contains the device attestation information." }, "DecodeIntegrityTokenRequest": { "description": "Request to decode the integrity token.", "type": "object", "properties": { "integrityToken": { "type": "string", "description": "Encoded integrity token." } }, "id": "DecodeIntegrityTokenRequest" } }, "rootUrl": "https://playintegrity.googleapis.com/", "discoveryVersion": "v1", "canonicalName": "Play Integrity", "resources": { "v1": { "methods": { "decodeIntegrityToken": { "httpMethod": "POST", "response": { "$ref": "DecodeIntegrityTokenResponse" }, "path": "v1/{+packageName}:decodeIntegrityToken", "flatPath": "v1/{v1Id}:decodeIntegrityToken", "description": "Decodes the integrity token and returns the token payload.", "parameters": { "packageName": { "required": true, "type": "string", "description": " Package name of the app the attached integrity token belongs to.", "location": "path", "pattern": "^[^/]+$" } }, "id": "playintegrity.decodeIntegrityToken", "parameterOrder": [ "packageName" ], "scopes": [ "https://www.googleapis.com/auth/playintegrity" ], "request": { "$ref": "DecodeIntegrityTokenRequest" } } } } }, "protocol": "rest", "icons": { "x32": "http://www.google.com/images/icons/product/search-32.gif", "x16": "http://www.google.com/images/icons/product/search-16.gif" }, "name": "playintegrity", "title": "Google Play Integrity API", "description": "Play Integrity", "baseUrl": "https://playintegrity.googleapis.com/", "version": "v1", "fullyEncodeReservedExpansion": true, "mtlsRootUrl": "https://playintegrity.mtls.googleapis.com/", "id": "playintegrity:v1", "revision": "20220711" }
]===]))
