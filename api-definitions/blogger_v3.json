{
  "version": "v3",
  "ownerName": "Google",
  "title": "Blogger API",
  "id": "blogger:v3",
  "resources": {
    "pageViews": {
      "methods": {
        "get": {
          "parameterOrder": [
            "blogId"
          ],
          "description": "Gets page views by blog id.",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "id": "blogger.pageViews.get",
          "parameters": {
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "range": {
              "location": "query",
              "enum": [
                "all",
                "30DAYS",
                "7DAYS"
              ],
              "type": "string",
              "repeated": true,
              "enumDescriptions": [
                "",
                "",
                ""
              ]
            }
          },
          "path": "v3/blogs/{blogId}/pageviews",
          "response": {
            "$ref": "Pageviews"
          },
          "httpMethod": "GET",
          "flatPath": "v3/blogs/{blogId}/pageviews"
        }
      }
    },
    "users": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "response": {
            "$ref": "User"
          },
          "flatPath": "v3/users/{userId}",
          "parameterOrder": [
            "userId"
          ],
          "description": "Gets one user by user_id.",
          "httpMethod": "GET",
          "parameters": {
            "userId": {
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "v3/users/{userId}",
          "id": "blogger.users.get"
        }
      }
    },
    "blogs": {
      "methods": {
        "get": {
          "id": "blogger.blogs.get",
          "parameterOrder": [
            "blogId"
          ],
          "parameters": {
            "maxPosts": {
              "format": "uint32",
              "location": "query",
              "type": "integer"
            },
            "view": {
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "type": "string",
              "location": "query"
            },
            "blogId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "v3/blogs/{blogId}",
          "description": "Gets a blog by id.",
          "path": "v3/blogs/{blogId}",
          "response": {
            "$ref": "Blog"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ]
        },
        "getByUrl": {
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "response": {
            "$ref": "Blog"
          },
          "path": "v3/blogs/byurl",
          "description": "Gets a blog by url.",
          "parameters": {
            "view": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ]
            },
            "url": {
              "type": "string",
              "location": "query",
              "required": true
            }
          },
          "id": "blogger.blogs.getByUrl",
          "parameterOrder": [
            "url"
          ],
          "flatPath": "v3/blogs/byurl",
          "httpMethod": "GET"
        },
        "listByUser": {
          "id": "blogger.blogs.listByUser",
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "response": {
            "$ref": "BlogList"
          },
          "parameters": {
            "status": {
              "description": "Default value of status is LIVE.",
              "default": "LIVE",
              "repeated": true,
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                ""
              ],
              "enum": [
                "LIVE",
                "DELETED"
              ]
            },
            "userId": {
              "location": "path",
              "type": "string",
              "required": true
            },
            "fetchUserInfo": {
              "type": "boolean",
              "location": "query"
            },
            "view": {
              "location": "query",
              "type": "string",
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "role": {
              "repeated": true,
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "path": "v3/users/{userId}/blogs",
          "flatPath": "v3/users/{userId}/blogs",
          "parameterOrder": [
            "userId"
          ],
          "description": "Lists blogs by user."
        }
      }
    },
    "posts": {
      "methods": {
        "insert": {
          "id": "blogger.posts.insert",
          "flatPath": "v3/blogs/{blogId}/posts",
          "parameterOrder": [
            "blogId"
          ],
          "response": {
            "$ref": "Post"
          },
          "path": "v3/blogs/{blogId}/posts",
          "httpMethod": "POST",
          "parameters": {
            "isDraft": {
              "type": "boolean",
              "location": "query"
            },
            "fetchBody": {
              "location": "query",
              "type": "boolean",
              "default": "true"
            },
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "fetchImages": {
              "type": "boolean",
              "location": "query"
            }
          },
          "description": "Inserts a post.",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "request": {
            "$ref": "Post"
          }
        },
        "patch": {
          "request": {
            "$ref": "Post"
          },
          "parameters": {
            "fetchBody": {
              "default": "true",
              "type": "boolean",
              "location": "query"
            },
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "fetchImages": {
              "location": "query",
              "type": "boolean"
            },
            "maxComments": {
              "format": "uint32",
              "location": "query",
              "type": "integer"
            },
            "postId": {
              "type": "string",
              "location": "path",
              "required": true
            },
            "revert": {
              "location": "query",
              "type": "boolean"
            },
            "publish": {
              "location": "query",
              "type": "boolean"
            }
          },
          "httpMethod": "PATCH",
          "response": {
            "$ref": "Post"
          },
          "id": "blogger.posts.patch",
          "parameterOrder": [
            "blogId",
            "postId"
          ],
          "description": "Patches a post.",
          "flatPath": "v3/blogs/{blogId}/posts/{postId}",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "path": "v3/blogs/{blogId}/posts/{postId}"
        },
        "delete": {
          "flatPath": "v3/blogs/{blogId}/posts/{postId}",
          "httpMethod": "DELETE",
          "path": "v3/blogs/{blogId}/posts/{postId}",
          "parameters": {
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "postId": {
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "description": "Deletes a post by blog id and post id.",
          "id": "blogger.posts.delete",
          "parameterOrder": [
            "blogId",
            "postId"
          ]
        },
        "revert": {
          "parameterOrder": [
            "blogId",
            "postId"
          ],
          "httpMethod": "POST",
          "description": "Reverts a published or scheduled post to draft state.",
          "id": "blogger.posts.revert",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "flatPath": "v3/blogs/{blogId}/posts/{postId}/revert",
          "path": "v3/blogs/{blogId}/posts/{postId}/revert",
          "response": {
            "$ref": "Post"
          },
          "parameters": {
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "postId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          }
        },
        "list": {
          "parameterOrder": [
            "blogId"
          ],
          "description": "Lists posts.",
          "parameters": {
            "endDate": {
              "location": "query",
              "type": "string"
            },
            "status": {
              "location": "query",
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "repeated": true,
              "enum": [
                "LIVE",
                "DRAFT",
                "SCHEDULED",
                "SOFT_TRASHED"
              ],
              "type": "string"
            },
            "fetchBodies": {
              "type": "boolean",
              "default": "true",
              "location": "query"
            },
            "orderBy": {
              "enumDescriptions": [
                "",
                "",
                ""
              ],
              "location": "query",
              "default": "PUBLISHED",
              "type": "string",
              "enum": [
                "ORDER_BY_UNSPECIFIED",
                "PUBLISHED",
                "UPDATED"
              ]
            },
            "pageToken": {
              "location": "query",
              "type": "string"
            },
            "blogId": {
              "type": "string",
              "required": true,
              "location": "path"
            },
            "startDate": {
              "location": "query",
              "type": "string"
            },
            "fetchImages": {
              "type": "boolean",
              "location": "query"
            },
            "view": {
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "format": "uint32"
            },
            "labels": {
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "v3/blogs/{blogId}/posts",
          "response": {
            "$ref": "PostList"
          },
          "path": "v3/blogs/{blogId}/posts",
          "id": "blogger.posts.list"
        },
        "update": {
          "parameters": {
            "revert": {
              "location": "query",
              "type": "boolean"
            },
            "blogId": {
              "type": "string",
              "location": "path",
              "required": true
            },
            "postId": {
              "required": true,
              "type": "string",
              "location": "path"
            },
            "maxComments": {
              "format": "uint32",
              "type": "integer",
              "location": "query"
            },
            "publish": {
              "type": "boolean",
              "location": "query"
            },
            "fetchBody": {
              "type": "boolean",
              "default": "true",
              "location": "query"
            },
            "fetchImages": {
              "type": "boolean",
              "location": "query"
            }
          },
          "parameterOrder": [
            "blogId",
            "postId"
          ],
          "id": "blogger.posts.update",
          "response": {
            "$ref": "Post"
          },
          "description": "Updates a post by blog id and post id.",
          "request": {
            "$ref": "Post"
          },
          "path": "v3/blogs/{blogId}/posts/{postId}",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "flatPath": "v3/blogs/{blogId}/posts/{postId}"
        },
        "getByPath": {
          "flatPath": "v3/blogs/{blogId}/posts/bypath",
          "id": "blogger.posts.getByPath",
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "path": "v3/blogs/{blogId}/posts/bypath",
          "response": {
            "$ref": "Post"
          },
          "description": "Gets a post by path.",
          "httpMethod": "GET",
          "parameters": {
            "maxComments": {
              "location": "query",
              "type": "integer",
              "format": "uint32"
            },
            "path": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "view": {
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "blogId",
            "path"
          ]
        },
        "search": {
          "parameterOrder": [
            "blogId",
            "q"
          ],
          "response": {
            "$ref": "PostList"
          },
          "httpMethod": "GET",
          "description": "Searches for posts matching given query terms in the specified blog.",
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "parameters": {
            "q": {
              "location": "query",
              "type": "string",
              "required": true
            },
            "orderBy": {
              "type": "string",
              "default": "PUBLISHED",
              "enum": [
                "ORDER_BY_UNSPECIFIED",
                "PUBLISHED",
                "UPDATED"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "",
                ""
              ]
            },
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "fetchBodies": {
              "default": "true",
              "type": "boolean",
              "location": "query"
            }
          },
          "flatPath": "v3/blogs/{blogId}/posts/search",
          "id": "blogger.posts.search",
          "path": "v3/blogs/{blogId}/posts/search"
        },
        "publish": {
          "httpMethod": "POST",
          "response": {
            "$ref": "Post"
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "parameterOrder": [
            "blogId",
            "postId"
          ],
          "description": "Publishes a post.",
          "parameters": {
            "publishDate": {
              "location": "query",
              "type": "string"
            },
            "blogId": {
              "type": "string",
              "location": "path",
              "required": true
            },
            "postId": {
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "flatPath": "v3/blogs/{blogId}/posts/{postId}/publish",
          "path": "v3/blogs/{blogId}/posts/{postId}/publish",
          "id": "blogger.posts.publish"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "description": "Gets a post by blog id and post id",
          "parameterOrder": [
            "blogId",
            "postId"
          ],
          "path": "v3/blogs/{blogId}/posts/{postId}",
          "httpMethod": "GET",
          "flatPath": "v3/blogs/{blogId}/posts/{postId}",
          "id": "blogger.posts.get",
          "parameters": {
            "fetchImages": {
              "location": "query",
              "type": "boolean"
            },
            "postId": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "fetchBody": {
              "location": "query",
              "default": "true",
              "type": "boolean"
            },
            "maxComments": {
              "location": "query",
              "type": "integer",
              "format": "uint32"
            },
            "view": {
              "type": "string",
              "location": "query",
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "blogId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "response": {
            "$ref": "Post"
          }
        }
      }
    },
    "pages": {
      "methods": {
        "publish": {
          "httpMethod": "POST",
          "response": {
            "$ref": "Page"
          },
          "id": "blogger.pages.publish",
          "path": "v3/blogs/{blogId}/pages/{pageId}/publish",
          "parameterOrder": [
            "blogId",
            "pageId"
          ],
          "description": "Publishes a page.",
          "flatPath": "v3/blogs/{blogId}/pages/{pageId}/publish",
          "parameters": {
            "blogId": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "pageId": {
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ]
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameters": {
            "publish": {
              "location": "query",
              "type": "boolean"
            },
            "revert": {
              "location": "query",
              "type": "boolean"
            },
            "pageId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "blogId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "Page"
          },
          "flatPath": "v3/blogs/{blogId}/pages/{pageId}",
          "parameterOrder": [
            "blogId",
            "pageId"
          ],
          "id": "blogger.pages.patch",
          "response": {
            "$ref": "Page"
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "description": "Patches a page.",
          "path": "v3/blogs/{blogId}/pages/{pageId}"
        },
        "get": {
          "parameterOrder": [
            "blogId",
            "pageId"
          ],
          "id": "blogger.pages.get",
          "description": "Gets a page by blog id and page id.",
          "parameters": {
            "pageId": {
              "type": "string",
              "required": true,
              "location": "path"
            },
            "view": {
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "blogId": {
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "response": {
            "$ref": "Page"
          },
          "httpMethod": "GET",
          "flatPath": "v3/blogs/{blogId}/pages/{pageId}",
          "path": "v3/blogs/{blogId}/pages/{pageId}",
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ]
        },
        "update": {
          "response": {
            "$ref": "Page"
          },
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "parameters": {
            "revert": {
              "location": "query",
              "type": "boolean"
            },
            "blogId": {
              "type": "string",
              "location": "path",
              "required": true
            },
            "publish": {
              "type": "boolean",
              "location": "query"
            },
            "pageId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "v3/blogs/{blogId}/pages/{pageId}",
          "path": "v3/blogs/{blogId}/pages/{pageId}",
          "description": "Updates a page by blog id and page id.",
          "id": "blogger.pages.update",
          "parameterOrder": [
            "blogId",
            "pageId"
          ],
          "request": {
            "$ref": "Page"
          }
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "id": "blogger.pages.insert",
          "description": "Inserts a page.",
          "path": "v3/blogs/{blogId}/pages",
          "request": {
            "$ref": "Page"
          },
          "httpMethod": "POST",
          "response": {
            "$ref": "Page"
          },
          "parameterOrder": [
            "blogId"
          ],
          "flatPath": "v3/blogs/{blogId}/pages",
          "parameters": {
            "blogId": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "isDraft": {
              "location": "query",
              "type": "boolean"
            }
          }
        },
        "revert": {
          "flatPath": "v3/blogs/{blogId}/pages/{pageId}/revert",
          "parameters": {
            "blogId": {
              "type": "string",
              "location": "path",
              "required": true
            },
            "pageId": {
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "httpMethod": "POST",
          "parameterOrder": [
            "blogId",
            "pageId"
          ],
          "id": "blogger.pages.revert",
          "description": "Reverts a published or scheduled page to draft state.",
          "response": {
            "$ref": "Page"
          },
          "path": "v3/blogs/{blogId}/pages/{pageId}/revert"
        },
        "list": {
          "id": "blogger.pages.list",
          "path": "v3/blogs/{blogId}/pages",
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "httpMethod": "GET",
          "parameterOrder": [
            "blogId"
          ],
          "flatPath": "v3/blogs/{blogId}/pages",
          "response": {
            "$ref": "PageList"
          },
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query"
            },
            "view": {
              "location": "query",
              "type": "string",
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "status": {
              "location": "query",
              "type": "string",
              "enum": [
                "LIVE",
                "DRAFT",
                "SOFT_TRASHED"
              ],
              "repeated": true,
              "enumDescriptions": [
                "",
                "",
                ""
              ]
            },
            "blogId": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "format": "uint32",
              "type": "integer"
            },
            "fetchBodies": {
              "type": "boolean",
              "location": "query"
            }
          },
          "description": "Lists pages."
        },
        "delete": {
          "httpMethod": "DELETE",
          "id": "blogger.pages.delete",
          "parameterOrder": [
            "blogId",
            "pageId"
          ],
          "flatPath": "v3/blogs/{blogId}/pages/{pageId}",
          "parameters": {
            "blogId": {
              "type": "string",
              "location": "path",
              "required": true
            },
            "pageId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "description": "Deletes a page by blog id and page id.",
          "path": "v3/blogs/{blogId}/pages/{pageId}",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ]
        }
      }
    },
    "blogUserInfos": {
      "methods": {
        "get": {
          "path": "v3/users/{userId}/blogs/{blogId}",
          "id": "blogger.blogUserInfos.get",
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "description": "Gets one blog and user info pair by blog id and user id.",
          "flatPath": "v3/users/{userId}/blogs/{blogId}",
          "httpMethod": "GET",
          "parameters": {
            "userId": {
              "location": "path",
              "type": "string",
              "required": true
            },
            "blogId": {
              "required": true,
              "type": "string",
              "location": "path"
            },
            "maxPosts": {
              "type": "integer",
              "format": "uint32",
              "location": "query"
            }
          },
          "parameterOrder": [
            "userId",
            "blogId"
          ],
          "response": {
            "$ref": "BlogUserInfo"
          }
        }
      }
    },
    "postUserInfos": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "path": "v3/users/{userId}/blogs/{blogId}/posts/{postId}",
          "parameterOrder": [
            "userId",
            "blogId",
            "postId"
          ],
          "flatPath": "v3/users/{userId}/blogs/{blogId}/posts/{postId}",
          "id": "blogger.postUserInfos.get",
          "parameters": {
            "postId": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxComments": {
              "format": "uint32",
              "location": "query",
              "type": "integer"
            },
            "userId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "blogId": {
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "PostUserInfo"
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "description": "Gets one post and user info pair, by post_id and user_id."
        },
        "list": {
          "description": "Lists post and user info pairs.",
          "httpMethod": "GET",
          "response": {
            "$ref": "PostUserInfosList"
          },
          "parameters": {
            "userId": {
              "location": "path",
              "type": "string",
              "required": true
            },
            "orderBy": {
              "enum": [
                "ORDER_BY_UNSPECIFIED",
                "PUBLISHED",
                "UPDATED"
              ],
              "default": "PUBLISHED",
              "type": "string",
              "enumDescriptions": [
                "",
                "",
                ""
              ],
              "location": "query"
            },
            "blogId": {
              "type": "string",
              "required": true,
              "location": "path"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "format": "uint32"
            },
            "fetchBodies": {
              "default": "false",
              "type": "boolean",
              "location": "query"
            },
            "view": {
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "type": "string",
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "location": "query"
            },
            "status": {
              "enum": [
                "LIVE",
                "DRAFT",
                "SCHEDULED",
                "SOFT_TRASHED"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "type": "string",
              "repeated": true,
              "location": "query"
            },
            "endDate": {
              "type": "string",
              "location": "query"
            },
            "startDate": {
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query"
            },
            "labels": {
              "location": "query",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "id": "blogger.postUserInfos.list",
          "flatPath": "v3/users/{userId}/blogs/{blogId}/posts",
          "parameterOrder": [
            "userId",
            "blogId"
          ],
          "path": "v3/users/{userId}/blogs/{blogId}/posts"
        }
      }
    },
    "comments": {
      "methods": {
        "approve": {
          "id": "blogger.comments.approve",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "response": {
            "$ref": "Comment"
          },
          "httpMethod": "POST",
          "description": "Marks a comment as not spam by blog id, post id and comment id.",
          "parameterOrder": [
            "blogId",
            "postId",
            "commentId"
          ],
          "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve",
          "parameters": {
            "commentId": {
              "type": "string",
              "required": true,
              "location": "path"
            },
            "postId": {
              "required": true,
              "type": "string",
              "location": "path"
            },
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve"
        },
        "markAsSpam": {
          "response": {
            "$ref": "Comment"
          },
          "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam",
          "path": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam",
          "parameters": {
            "postId": {
              "type": "string",
              "location": "path",
              "required": true
            },
            "blogId": {
              "required": true,
              "type": "string",
              "location": "path"
            },
            "commentId": {
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "id": "blogger.comments.markAsSpam",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "description": "Marks a comment as spam by blog id, post id and comment id.",
          "httpMethod": "POST",
          "parameterOrder": [
            "blogId",
            "postId",
            "commentId"
          ]
        },
        "delete": {
          "parameters": {
            "commentId": {
              "type": "string",
              "required": true,
              "location": "path"
            },
            "blogId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "postId": {
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "id": "blogger.comments.delete",
          "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}",
          "path": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}",
          "httpMethod": "DELETE",
          "description": "Deletes a comment by blog id, post id and comment id.",
          "parameterOrder": [
            "blogId",
            "postId",
            "commentId"
          ]
        },
        "removeContent": {
          "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent",
          "parameters": {
            "postId": {
              "location": "path",
              "type": "string",
              "required": true
            },
            "blogId": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "commentId": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "blogId",
            "postId",
            "commentId"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/blogger"
          ],
          "id": "blogger.comments.removeContent",
          "description": "Removes the content of a comment by blog id, post id and comment id.",
          "path": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent",
          "response": {
            "$ref": "Comment"
          }
        },
        "list": {
          "id": "blogger.comments.list",
          "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments",
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "path": "v3/blogs/{blogId}/posts/{postId}/comments",
          "parameterOrder": [
            "blogId",
            "postId"
          ],
          "parameters": {
            "fetchBodies": {
              "location": "query",
              "type": "boolean"
            },
            "status": {
              "location": "query",
              "type": "string",
              "enum": [
                "LIVE",
                "EMPTIED",
                "PENDING",
                "SPAM"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "endDate": {
              "location": "query",
              "type": "string"
            },
            "view": {
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "format": "uint32"
            },
            "postId": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "blogId": {
              "type": "string",
              "required": true,
              "location": "path"
            },
            "pageToken": {
              "type": "string",
              "location": "query"
            },
            "startDate": {
              "type": "string",
              "location": "query"
            }
          },
          "response": {
            "$ref": "CommentList"
          },
          "httpMethod": "GET",
          "description": "Lists comments."
        },
        "listByBlog": {
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "path": "v3/blogs/{blogId}/comments",
          "description": "Lists comments by blog.",
          "response": {
            "$ref": "CommentList"
          },
          "parameterOrder": [
            "blogId"
          ],
          "id": "blogger.comments.listByBlog",
          "httpMethod": "GET",
          "parameters": {
            "blogId": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "fetchBodies": {
              "location": "query",
              "type": "boolean"
            },
            "pageToken": {
              "type": "string",
              "location": "query"
            },
            "status": {
              "type": "string",
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "repeated": true,
              "enum": [
                "LIVE",
                "EMPTIED",
                "PENDING",
                "SPAM"
              ],
              "location": "query"
            },
            "endDate": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "type": "integer",
              "format": "uint32"
            },
            "startDate": {
              "location": "query",
              "type": "string"
            }
          },
          "flatPath": "v3/blogs/{blogId}/comments"
        },
        "get": {
          "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}",
          "description": "Gets a comment by id.",
          "httpMethod": "GET",
          "id": "blogger.comments.get",
          "path": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}",
          "response": {
            "$ref": "Comment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/blogger",
            "https://www.googleapis.com/auth/blogger.readonly"
          ],
          "parameters": {
            "view": {
              "type": "string",
              "location": "query",
              "enum": [
                "VIEW_TYPE_UNSPECIFIED",
                "READER",
                "AUTHOR",
                "ADMIN"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ]
            },
            "postId": {
              "location": "path",
              "type": "string",
              "required": true
            },
            "commentId": {
              "required": true,
              "location": "path",
              "type": "string"
            },
            "blogId": {
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "blogId",
            "postId",
            "commentId"
          ]
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "schemas": {
    "BlogList": {
      "properties": {
        "blogUserInfos": {
          "type": "array",
          "items": {
            "$ref": "BlogUserInfo"
          },
          "description": "Admin level list of blog per-user information."
        },
        "kind": {
          "type": "string",
          "description": "The kind of this entity. Always blogger#blogList."
        },
        "items": {
          "description": "The list of Blogs this user has Authorship or Admin rights over.",
          "type": "array",
          "items": {
            "$ref": "Blog"
          }
        }
      },
      "type": "object",
      "id": "BlogList"
    },
    "Blog": {
      "type": "object",
      "id": "Blog",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The kind of this entry. Always blogger#blog."
        },
        "pages": {
          "properties": {
            "selfLink": {
              "type": "string",
              "description": "The URL of the container for pages in this blog."
            },
            "totalItems": {
              "format": "int32",
              "type": "integer",
              "description": "The count of pages in this blog."
            }
          },
          "description": "The container of pages in this blog.",
          "type": "object"
        },
        "posts": {
          "type": "object",
          "properties": {
            "selfLink": {
              "description": "The URL of the container for posts in this blog.",
              "type": "string"
            },
            "items": {
              "description": "The List of Posts for this Blog.",
              "items": {
                "$ref": "Post"
              },
              "type": "array"
            },
            "totalItems": {
              "description": "The count of posts in this blog.",
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "The container of posts in this blog."
        },
        "customMetaData": {
          "description": "The JSON custom meta-data for the Blog.",
          "type": "string"
        },
        "published": {
          "description": "RFC 3339 date-time when this blog was published.",
          "type": "string"
        },
        "updated": {
          "description": "RFC 3339 date-time when this blog was last updated.",
          "type": "string"
        },
        "description": {
          "description": "The description of this blog. This is displayed underneath the title.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of this blog. This is displayed as the title."
        },
        "selfLink": {
          "type": "string",
          "description": "The API REST URL to fetch this resource from."
        },
        "url": {
          "type": "string",
          "description": "The URL where this blog is published."
        },
        "status": {
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "description": "The status of the blog.",
          "enum": [
            "LIVE",
            "DELETED"
          ]
        },
        "id": {
          "description": "The identifier for this resource.",
          "type": "string"
        },
        "locale": {
          "type": "object",
          "properties": {
            "language": {
              "description": "The language this blog is authored in.",
              "type": "string"
            },
            "country": {
              "type": "string",
              "description": "The country this blog's locale is set to."
            },
            "variant": {
              "description": "The language variant this blog is authored in.",
              "type": "string"
            }
          },
          "description": "The locale this Blog is set to."
        }
      }
    },
    "PostPerUserInfo": {
      "id": "PostPerUserInfo",
      "type": "object",
      "properties": {
        "blogId": {
          "type": "string",
          "description": "ID of the Blog that the post resource belongs to."
        },
        "kind": {
          "type": "string",
          "description": "The kind of this entity. Always blogger#postPerUserInfo."
        },
        "userId": {
          "description": "ID of the User.",
          "type": "string"
        },
        "hasEditAccess": {
          "type": "boolean",
          "description": "True if the user has Author level access to the post."
        },
        "postId": {
          "type": "string",
          "description": "ID of the Post resource."
        }
      }
    },
    "Pageviews": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The kind of this entry. Always blogger#page_views."
        },
        "counts": {
          "type": "array",
          "description": "The container of posts in this blog.",
          "items": {
            "properties": {
              "count": {
                "format": "int64",
                "type": "string",
                "description": "Count of page views for the given time range."
              },
              "timeRange": {
                "enumDescriptions": [
                  "",
                  "",
                  ""
                ],
                "description": "Time range the given count applies to.",
                "type": "string",
                "enum": [
                  "ALL_TIME",
                  "THIRTY_DAYS",
                  "SEVEN_DAYS"
                ]
              }
            },
            "type": "object"
          }
        },
        "blogId": {
          "description": "Blog Id.",
          "type": "string"
        }
      },
      "id": "Pageviews"
    },
    "PostUserInfo": {
      "id": "PostUserInfo",
      "properties": {
        "post": {
          "$ref": "Post",
          "description": "The Post resource."
        },
        "post_user_info": {
          "description": "Information about a User for the Post.",
          "$ref": "PostPerUserInfo"
        },
        "kind": {
          "type": "string",
          "description": "The kind of this entity. Always blogger#postUserInfo."
        }
      },
      "type": "object"
    },
    "BlogUserInfo": {
      "properties": {
        "kind": {
          "description": "The kind of this entity. Always blogger#blogUserInfo.",
          "type": "string"
        },
        "blog_user_info": {
          "$ref": "BlogPerUserInfo",
          "description": "Information about a User for the Blog."
        },
        "blog": {
          "$ref": "Blog",
          "description": "The Blog resource."
        }
      },
      "id": "BlogUserInfo",
      "type": "object"
    },
    "PostUserInfosList": {
      "properties": {
        "kind": {
          "description": "The kind of this entity. Always blogger#postList.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "PostUserInfo"
          },
          "description": "The list of Posts with User information for the post, for this Blog."
        },
        "nextPageToken": {
          "description": "Pagination token to fetch the next page, if one exists.",
          "type": "string"
        }
      },
      "id": "PostUserInfosList",
      "type": "object"
    },
    "Comment": {
      "type": "object",
      "id": "Comment",
      "properties": {
        "kind": {
          "description": "The kind of this entry. Always blogger#comment.",
          "type": "string"
        },
        "content": {
          "type": "string",
          "description": "The actual content of the comment. May include HTML markup."
        },
        "selfLink": {
          "description": "The API REST URL to fetch this resource from.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The identifier for this resource."
        },
        "inReplyTo": {
          "properties": {
            "id": {
              "type": "string",
              "description": "The identified of the parent of this comment."
            }
          },
          "type": "object",
          "description": "Data about the comment this is in reply to."
        },
        "post": {
          "type": "object",
          "description": "Data about the post containing this comment.",
          "properties": {
            "id": {
              "description": "The identifier of the post containing this comment.",
              "type": "string"
            }
          }
        },
        "author": {
          "type": "object",
          "properties": {
            "displayName": {
              "description": "The display name.",
              "type": "string"
            },
            "url": {
              "description": "The URL of the creator's Profile page.",
              "type": "string"
            },
            "image": {
              "type": "object",
              "description": "The creator's avatar.",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The creator's avatar URL."
                }
              }
            },
            "id": {
              "description": "The identifier of the creator.",
              "type": "string"
            }
          },
          "description": "The author of this Comment."
        },
        "published": {
          "description": "RFC 3339 date-time when this comment was published.",
          "type": "string"
        },
        "status": {
          "enum": [
            "LIVE",
            "EMPTIED",
            "PENDING",
            "SPAM"
          ],
          "description": "The status of the comment (only populated for admin users).",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "blog": {
          "type": "object",
          "description": "Data about the blog containing this comment.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the blog containing this comment."
            }
          }
        },
        "updated": {
          "description": "RFC 3339 date-time when this comment was last updated.",
          "type": "string"
        }
      }
    },
    "BlogPerUserInfo": {
      "type": "object",
      "properties": {
        "hasAdminAccess": {
          "description": "True if the user has Admin level access to the blog.",
          "type": "boolean"
        },
        "photosAlbumKey": {
          "type": "string",
          "description": "The Photo Album Key for the user when adding photos to the blog."
        },
        "blogId": {
          "type": "string",
          "description": "ID of the Blog resource."
        },
        "kind": {
          "type": "string",
          "description": "The kind of this entity. Always blogger#blogPerUserInfo."
        },
        "userId": {
          "description": "ID of the User.",
          "type": "string"
        },
        "role": {
          "description": "Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).",
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "VIEW_TYPE_UNSPECIFIED",
            "READER",
            "AUTHOR",
            "ADMIN"
          ],
          "type": "string"
        }
      },
      "id": "BlogPerUserInfo"
    },
    "PostList": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "Etag of the response.",
          "type": "string"
        },
        "prevPageToken": {
          "type": "string",
          "description": "Pagination token to fetch the previous page, if one exists."
        },
        "items": {
          "items": {
            "$ref": "Post"
          },
          "type": "array",
          "description": "The list of Posts for this Blog."
        },
        "kind": {
          "type": "string",
          "description": "The kind of this entity. Always blogger#postList."
        },
        "nextPageToken": {
          "description": "Pagination token to fetch the next page, if one exists.",
          "type": "string"
        }
      },
      "id": "PostList"
    },
    "PageList": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "Etag of the response.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The kind of this entity. Always blogger#pageList."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Page"
          },
          "description": "The list of Pages for a Blog."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token to fetch the next page, if one exists."
        }
      },
      "id": "PageList"
    },
    "Page": {
      "id": "Page",
      "properties": {
        "etag": {
          "description": "Etag of the resource.",
          "type": "string"
        },
        "trashed": {
          "type": "string",
          "description": "RFC 3339 date-time when this Page was trashed."
        },
        "status": {
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "description": "The status of the page for admin resources (either LIVE or DRAFT).",
          "enum": [
            "LIVE",
            "DRAFT",
            "SOFT_TRASHED"
          ]
        },
        "blog": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The identifier of the blog containing this page."
            }
          },
          "description": "Data about the blog containing this Page."
        },
        "author": {
          "description": "The author of this Page.",
          "properties": {
            "url": {
              "description": "The URL of the creator's Profile page.",
              "type": "string"
            },
            "image": {
              "description": "The creator's avatar.",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "The creator's avatar URL."
                }
              },
              "type": "object"
            },
            "displayName": {
              "type": "string",
              "description": "The display name."
            },
            "id": {
              "type": "string",
              "description": "The identifier of the creator."
            }
          },
          "type": "object"
        },
        "updated": {
          "description": "RFC 3339 date-time when this Page was last updated.",
          "type": "string"
        },
        "content": {
          "description": "The body content of this Page, in HTML.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The identifier for this resource."
        },
        "url": {
          "description": "The URL that this Page is displayed at.",
          "type": "string"
        },
        "published": {
          "type": "string",
          "description": "RFC 3339 date-time when this Page was published."
        },
        "selfLink": {
          "type": "string",
          "description": "The API REST URL to fetch this resource from."
        },
        "kind": {
          "type": "string",
          "description": "The kind of this entity. Always blogger#page."
        },
        "title": {
          "type": "string",
          "description": "The title of this entity. This is the name displayed in the Admin user interface."
        }
      },
      "type": "object"
    },
    "Post": {
      "type": "object",
      "id": "Post",
      "properties": {
        "readerComments": {
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "ALLOW",
            "DONT_ALLOW_SHOW_EXISTING",
            "DONT_ALLOW_HIDE_EXISTING"
          ],
          "description": "Comment control and display setting for readers of this post."
        },
        "titleLink": {
          "type": "string",
          "description": "The title link URL, similar to atom's related link."
        },
        "published": {
          "description": "RFC 3339 date-time when this Post was published.",
          "type": "string"
        },
        "customMetaData": {
          "type": "string",
          "description": "The JSON meta-data for the Post."
        },
        "id": {
          "type": "string",
          "description": "The identifier of this Post."
        },
        "selfLink": {
          "type": "string",
          "description": "The API REST URL to fetch this resource from."
        },
        "replies": {
          "description": "The container of comments on this Post.",
          "type": "object",
          "properties": {
            "items": {
              "description": "The List of Comments for this Post.",
              "items": {
                "$ref": "Comment"
              },
              "type": "array"
            },
            "selfLink": {
              "description": "The URL of the comments on this post.",
              "type": "string"
            },
            "totalItems": {
              "type": "string",
              "description": "The count of comments on this post.",
              "format": "int64"
            }
          }
        },
        "etag": {
          "description": "Etag of the resource.",
          "type": "string"
        },
        "trashed": {
          "type": "string",
          "description": "RFC 3339 date-time when this Post was last trashed."
        },
        "labels": {
          "description": "The list of labels this Post was tagged with.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updated": {
          "description": "RFC 3339 date-time when this Post was last updated.",
          "type": "string"
        },
        "url": {
          "description": "The URL where this Post is displayed.",
          "type": "string"
        },
        "blog": {
          "properties": {
            "id": {
              "description": "The identifier of the Blog that contains this Post.",
              "type": "string"
            }
          },
          "type": "object",
          "description": "Data about the blog containing this Post."
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#post.",
          "type": "string"
        },
        "images": {
          "description": "Display image for the Post.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              }
            }
          }
        },
        "location": {
          "description": "The location for geotagged posts.",
          "type": "object",
          "properties": {
            "span": {
              "type": "string",
              "description": "Location's viewport span. Can be used when rendering a map preview."
            },
            "lat": {
              "format": "double",
              "type": "number",
              "description": "Location's latitude."
            },
            "lng": {
              "type": "number",
              "description": "Location's longitude.",
              "format": "double"
            },
            "name": {
              "description": "Location name.",
              "type": "string"
            }
          }
        },
        "author": {
          "type": "object",
          "description": "The author of this Post.",
          "properties": {
            "image": {
              "description": "The creator's avatar.",
              "properties": {
                "url": {
                  "description": "The creator's avatar URL.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "url": {
              "type": "string",
              "description": "The URL of the creator's Profile page."
            },
            "id": {
              "description": "The identifier of the creator.",
              "type": "string"
            },
            "displayName": {
              "type": "string",
              "description": "The display name."
            }
          }
        },
        "title": {
          "description": "The title of the Post.",
          "type": "string"
        },
        "content": {
          "description": "The content of the Post. May contain HTML markup.",
          "type": "string"
        },
        "status": {
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "LIVE",
            "DRAFT",
            "SCHEDULED",
            "SOFT_TRASHED"
          ],
          "description": "Status of the post. Only set for admin-level requests."
        }
      }
    },
    "User": {
      "id": "User",
      "properties": {
        "about": {
          "type": "string",
          "description": "Profile summary information."
        },
        "selfLink": {
          "type": "string",
          "description": "The API REST URL to fetch this resource from."
        },
        "displayName": {
          "type": "string",
          "description": "The display name."
        },
        "id": {
          "type": "string",
          "description": "The identifier for this User."
        },
        "blogs": {
          "properties": {
            "selfLink": {
              "description": "The URL of the Blogs for this user.",
              "type": "string"
            }
          },
          "type": "object",
          "description": "The container of blogs for this user."
        },
        "locale": {
          "type": "object",
          "properties": {
            "country": {
              "description": "The country this blog's locale is set to.",
              "type": "string"
            },
            "language": {
              "type": "string",
              "description": "The language this blog is authored in."
            },
            "variant": {
              "type": "string",
              "description": "The language variant this blog is authored in."
            }
          },
          "description": "This user's locale"
        },
        "created": {
          "description": "The timestamp of when this profile was created, in seconds since epoch.",
          "type": "string"
        },
        "kind": {
          "description": "The kind of this entity. Always blogger#user.",
          "type": "string"
        },
        "url": {
          "description": "The user's profile page.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommentList": {
      "id": "CommentList",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Pagination token to fetch the next page, if one exists."
        },
        "kind": {
          "type": "string",
          "description": "The kind of this entry. Always blogger#commentList."
        },
        "prevPageToken": {
          "description": "Pagination token to fetch the previous page, if one exists.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Comment"
          },
          "description": "The List of Comments for a Post."
        },
        "etag": {
          "type": "string",
          "description": "Etag of the response."
        }
      },
      "type": "object"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "mtlsRootUrl": "https://blogger.mtls.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/blogger": {
          "description": "Manage your Blogger account"
        },
        "https://www.googleapis.com/auth/blogger.readonly": {
          "description": "View your Blogger account"
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://blogger.googleapis.com/",
  "servicePath": "",
  "canonicalName": "Blogger",
  "description": "The Blogger API provides access to posts, comments and pages of a Blogger blog.",
  "rootUrl": "https://blogger.googleapis.com/",
  "name": "blogger",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest",
  "parameters": {
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "type": "string",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ]
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    }
  },
  "batchPath": "batch",
  "revision": "20220803",
  "ownerDomain": "google.com",
  "documentationLink": "https://developers.google.com/blogger/docs/3.0/getting_started",
  "discoveryVersion": "v1"
}
