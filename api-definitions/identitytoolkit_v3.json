{
  "name": "identitytoolkit",
  "title": "Google Identity Toolkit API",
  "ownerDomain": "google.com",
  "documentationLink": "https://developers.google.com/identity-toolkit/v3/",
  "protocol": "rest",
  "id": "identitytoolkit:v3",
  "etag": "\"9eZ1uxVRThTDhLJCZHhqs3eQWz4/taa97NuhcHSAt0fUktvGBcH-OqE\"",
  "resources": {
    "relyingparty": {
      "methods": {
        "signOutUser": {
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.signOutUser",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "signOutUser",
          "description": "Sign out user.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserRequest"
          },
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserResponse"
          }
        },
        "getOobConfirmationCode": {
          "request": {
            "$ref": "Relyingparty"
          },
          "httpMethod": "POST",
          "path": "getOobConfirmationCode",
          "response": {
            "$ref": "GetOobConfirmationCodeResponse"
          },
          "description": "Get a code for user action confirmation.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.getOobConfirmationCode"
        },
        "downloadAccount": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "description": "Batch download user accounts.",
          "response": {
            "$ref": "DownloadAccountResponse"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDownloadAccountRequest"
          },
          "id": "identitytoolkit.relyingparty.downloadAccount",
          "path": "downloadAccount"
        },
        "verifyCustomToken": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.verifyCustomToken",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest"
          },
          "description": "Verifies the developer asserted ID token.",
          "response": {
            "$ref": "VerifyCustomTokenResponse"
          },
          "httpMethod": "POST",
          "path": "verifyCustomToken"
        },
        "getPublicKeys": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Get token signing public key.",
          "path": "publicKeys",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetPublicKeysResponse"
          },
          "httpMethod": "GET",
          "id": "identitytoolkit.relyingparty.getPublicKeys"
        },
        "sendVerificationCode": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.sendVerificationCode",
          "httpMethod": "POST",
          "description": "Send SMS verification code.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeRequest"
          },
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeResponse"
          },
          "path": "sendVerificationCode"
        },
        "emailLinkSignin": {
          "response": {
            "$ref": "EmailLinkSigninResponse"
          },
          "description": "Reset password for a user.",
          "path": "emailLinkSignin",
          "id": "identitytoolkit.relyingparty.emailLinkSignin",
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "verifyAssertion": {
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyAssertionRequest"
          },
          "id": "identitytoolkit.relyingparty.verifyAssertion",
          "response": {
            "$ref": "VerifyAssertionResponse"
          },
          "path": "verifyAssertion",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Verifies the assertion returned by the IdP.",
          "httpMethod": "POST"
        },
        "getProjectConfig": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "getProjectConfig",
          "httpMethod": "GET",
          "id": "identitytoolkit.relyingparty.getProjectConfig",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetProjectConfigResponse"
          },
          "parameters": {
            "projectNumber": {
              "type": "string",
              "description": "GCP project number of the request.",
              "location": "query"
            },
            "delegatedProjectNumber": {
              "location": "query",
              "description": "Delegated GCP project number of the request.",
              "type": "string"
            }
          },
          "description": "Get project configuration."
        },
        "verifyPhoneNumber": {
          "path": "verifyPhoneNumber",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest"
          },
          "id": "identitytoolkit.relyingparty.verifyPhoneNumber",
          "description": "Verifies ownership of a phone number and creates/updates the user account accordingly.",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse"
          },
          "httpMethod": "POST"
        },
        "deleteAccount": {
          "response": {
            "$ref": "DeleteAccountResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDeleteAccountRequest"
          },
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.deleteAccount",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "deleteAccount",
          "description": "Delete user account."
        },
        "resetPassword": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.resetPassword",
          "response": {
            "$ref": "ResetPasswordResponse"
          },
          "path": "resetPassword",
          "description": "Reset password for a user.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyResetPasswordRequest"
          },
          "httpMethod": "POST"
        },
        "createAuthUri": {
          "id": "identitytoolkit.relyingparty.createAuthUri",
          "path": "createAuthUri",
          "response": {
            "$ref": "CreateAuthUriResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Creates the URI used by the IdP to authenticate the user.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyCreateAuthUriRequest"
          },
          "httpMethod": "POST"
        },
        "setAccountInfo": {
          "id": "identitytoolkit.relyingparty.setAccountInfo",
          "path": "setAccountInfo",
          "response": {
            "$ref": "SetAccountInfoResponse"
          },
          "description": "Set account info for a user.",
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetAccountInfoRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "verifyPassword": {
          "response": {
            "$ref": "VerifyPasswordResponse"
          },
          "path": "verifyPassword",
          "id": "identitytoolkit.relyingparty.verifyPassword",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPasswordRequest"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Verifies the user entered password."
        },
        "getRecaptchaParam": {
          "description": "Get recaptcha secure param.",
          "httpMethod": "GET",
          "path": "getRecaptchaParam",
          "id": "identitytoolkit.relyingparty.getRecaptchaParam",
          "response": {
            "$ref": "GetRecaptchaParamResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "signupNewUser": {
          "path": "signupNewUser",
          "description": "Signup new user.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignupNewUserRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "SignupNewUserResponse"
          },
          "id": "identitytoolkit.relyingparty.signupNewUser"
        },
        "setProjectConfig": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "path": "setProjectConfig",
          "description": "Set project configuration.",
          "id": "identitytoolkit.relyingparty.setProjectConfig",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigRequest"
          },
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigResponse"
          }
        },
        "uploadAccount": {
          "response": {
            "$ref": "UploadAccountResponse"
          },
          "id": "identitytoolkit.relyingparty.uploadAccount",
          "description": "Batch upload existing user accounts.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "path": "uploadAccount",
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyUploadAccountRequest"
          }
        },
        "getAccountInfo": {
          "response": {
            "$ref": "GetAccountInfoResponse"
          },
          "id": "identitytoolkit.relyingparty.getAccountInfo",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyGetAccountInfoRequest"
          },
          "httpMethod": "POST",
          "description": "Returns the account info.",
          "path": "getAccountInfo",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "canonicalName": "Identity Toolkit",
  "description": "Help the third party sites to implement federated login.",
  "batchPath": "batch/identitytoolkit/v3",
  "icons": {
    "x32": "https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png",
    "x16": "https://www.gstatic.com/images/branding/product/1x/googleg_16dp.png"
  },
  "basePath": "/identitytoolkit/v3/relyingparty/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/firebase": {
          "description": "View and administer all your Firebase data and settings"
        }
      }
    }
  },
  "rootUrl": "https://www.googleapis.com/",
  "version": "v3",
  "baseUrl": "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
  "schemas": {
    "GetOobConfirmationCodeResponse": {
      "properties": {
        "kind": {
          "description": "The fixed string \"identitytoolkit#GetOobConfirmationCodeResponse\".",
          "default": "identitytoolkit#GetOobConfirmationCodeResponse",
          "type": "string"
        },
        "email": {
          "description": "The email address that the email is sent to.",
          "type": "string"
        },
        "oobCode": {
          "type": "string",
          "description": "The code to be send to the user."
        }
      },
      "description": "Response of getting a code for user confirmation (reset password, change email etc.).",
      "type": "object",
      "id": "GetOobConfirmationCodeResponse"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse": {
      "description": "Response for Identitytoolkit-VerifyPhoneNumber",
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse",
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "verificationProof": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "verificationProofExpiresIn": {
          "type": "string",
          "format": "int64"
        },
        "idToken": {
          "type": "string"
        },
        "temporaryProofExpiresIn": {
          "type": "string",
          "format": "int64"
        },
        "localId": {
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean"
        },
        "expiresIn": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "IdentitytoolkitRelyingpartyUploadAccountRequest": {
      "id": "IdentitytoolkitRelyingpartyUploadAccountRequest",
      "properties": {
        "sanityCheck": {
          "type": "boolean",
          "description": "If true, backend will do sanity check(including duplicate email and federated id) when uploading account."
        },
        "saltSeparator": {
          "type": "string",
          "description": "The salt separator.",
          "format": "byte"
        },
        "rounds": {
          "description": "Rounds for hash calculation. Used by scrypt and similar algorithms.",
          "format": "int32",
          "type": "integer"
        },
        "blockSize": {
          "type": "integer",
          "format": "int32"
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "cpuMemCost": {
          "type": "integer",
          "format": "int32",
          "description": "The following 4 fields are for standard scrypt algorithm."
        },
        "users": {
          "type": "array",
          "description": "The account info to be stored.",
          "items": {
            "$ref": "UserInfo"
          }
        },
        "memoryCost": {
          "description": "Memory cost for hash calculation. Used by scrypt similar algorithms.",
          "format": "int32",
          "type": "integer"
        },
        "signerKey": {
          "format": "byte",
          "type": "string",
          "description": "The key for to hash the password."
        },
        "dkLen": {
          "type": "integer",
          "format": "int32"
        },
        "parallelization": {
          "format": "int32",
          "type": "integer"
        },
        "targetProjectId": {
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential.",
          "type": "string"
        },
        "hashAlgorithm": {
          "type": "string",
          "description": "The password hash algorithm."
        },
        "allowOverwrite": {
          "description": "Whether allow overwrite existing account when user local_id exists.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "Request to upload user account in batch."
    },
    "Relyingparty": {
      "type": "object",
      "id": "Relyingparty",
      "properties": {
        "androidInstallApp": {
          "description": "whether or not to install the android app on the device where the link is opened",
          "type": "boolean"
        },
        "idToken": {
          "type": "string",
          "description": "The user's Gitkit login token for email change."
        },
        "androidPackageName": {
          "type": "string",
          "description": "android package name of the android app to handle the action code"
        },
        "captchaResp": {
          "description": "The recaptcha response from the user.",
          "type": "string"
        },
        "userIp": {
          "description": "The IP address of the user.",
          "type": "string"
        },
        "requestType": {
          "description": "The request type.",
          "type": "string"
        },
        "newEmail": {
          "description": "The new email if the code is for email change.",
          "type": "string"
        },
        "androidMinimumVersion": {
          "description": "minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app",
          "type": "string"
        },
        "canHandleCodeInApp": {
          "type": "boolean",
          "description": "whether or not the app can handle the oob code without first going to web"
        },
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#relyingparty\".",
          "default": "identitytoolkit#relyingparty"
        },
        "continueUrl": {
          "type": "string",
          "description": "The url to continue to the Gitkit app"
        },
        "challenge": {
          "type": "string",
          "description": "The recaptcha challenge presented to the user."
        },
        "iOSAppStoreId": {
          "type": "string",
          "description": "iOS app store id to download the app if it's not already installed"
        },
        "iOSBundleId": {
          "description": "the iOS bundle id of iOS app to handle the action code",
          "type": "string"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        }
      },
      "description": "Request of getting a code for user confirmation (reset password, change email etc.)"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest": {
      "properties": {
        "verificationProof": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        },
        "sessionInfo": {
          "type": "string",
          "description": "The session info previously returned by IdentityToolkit-SendVerificationCode."
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest",
      "description": "Request for Identitytoolkit-VerifyPhoneNumber"
    },
    "IdentitytoolkitRelyingpartySignOutUserResponse": {
      "type": "object",
      "properties": {
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        }
      },
      "description": "Response of signing out user.",
      "id": "IdentitytoolkitRelyingpartySignOutUserResponse"
    },
    "IdentitytoolkitRelyingpartyGetAccountInfoRequest": {
      "properties": {
        "phoneNumber": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Privileged caller can query users by specified phone number."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "localId": {
          "description": "The list of local ID's of the users to inquiry.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delegatedProjectNumber": {
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The list of emails of the users to inquiry."
        }
      },
      "description": "Request to get the account information.",
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyGetAccountInfoRequest"
    },
    "EmailTemplate": {
      "properties": {
        "format": {
          "description": "Email body format.",
          "type": "string"
        },
        "replyTo": {
          "description": "Reply-to address.",
          "type": "string"
        },
        "body": {
          "description": "Email body.",
          "type": "string"
        },
        "subject": {
          "type": "string",
          "description": "Subject of the email."
        },
        "fromDisplayName": {
          "type": "string",
          "description": "From display name."
        },
        "from": {
          "type": "string",
          "description": "From address of the email."
        }
      },
      "id": "EmailTemplate",
      "type": "object",
      "description": "Template for an email template."
    },
    "IdentitytoolkitRelyingpartyDeleteAccountRequest": {
      "type": "object",
      "description": "Request to delete account.",
      "id": "IdentitytoolkitRelyingpartyDeleteAccountRequest",
      "properties": {
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token or STS id token of the authenticated user."
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        }
      }
    },
    "IdentitytoolkitRelyingpartySignOutUserRequest": {
      "id": "IdentitytoolkitRelyingpartySignOutUserRequest",
      "type": "object",
      "description": "Request to sign out user.",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        }
      }
    },
    "VerifyPasswordResponse": {
      "type": "object",
      "id": "VerifyPasswordResponse",
      "description": "Request of verifying the password.",
      "properties": {
        "oauthAuthorizationCode": {
          "description": "The OAuth2 authorization code.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "email": {
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email.",
          "type": "string"
        },
        "oauthAccessToken": {
          "description": "The OAuth2 access token.",
          "type": "string"
        },
        "kind": {
          "default": "identitytoolkit#VerifyPasswordResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#VerifyPasswordResponse\"."
        },
        "registered": {
          "description": "Whether the email is registered.",
          "type": "boolean"
        },
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The URI of the user's photo at IdP",
          "type": "string"
        },
        "idToken": {
          "description": "The GITKit token for authenticated user.",
          "type": "string"
        },
        "oauthExpireIn": {
          "type": "integer",
          "description": "The lifetime in seconds of the OAuth2 access token.",
          "format": "int32"
        },
        "localId": {
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
          "type": "string"
        },
        "expiresIn": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64"
        }
      }
    },
    "IdentitytoolkitRelyingpartyGetPublicKeysResponse": {
      "id": "IdentitytoolkitRelyingpartyGetPublicKeysResponse",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Respone of getting public keys."
    },
    "CreateAuthUriResponse": {
      "id": "CreateAuthUriResponse",
      "type": "object",
      "description": "Response of creating the IDP authentication URL.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The fixed string identitytoolkit#CreateAuthUriResponse\".",
          "default": "identitytoolkit#CreateAuthUriResponse"
        },
        "authUri": {
          "description": "The URI used by the IDP to authenticate the user.",
          "type": "string"
        },
        "allProviders": {
          "description": "all providers the user has once used to do federated login",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "signinMethods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "All sign-in methods this user has used."
        },
        "registered": {
          "description": "Whether the user is registered if the identifier is an email.",
          "type": "boolean"
        },
        "captchaRequired": {
          "description": "True if captcha is required.",
          "type": "boolean"
        },
        "providerId": {
          "type": "string",
          "description": "The provider ID of the auth URI."
        },
        "forExistingProvider": {
          "description": "True if the authUri is for user's existing provider.",
          "type": "boolean"
        },
        "sessionId": {
          "type": "string",
          "description": "Session ID which should be passed in the following verifyAssertion request."
        }
      }
    },
    "IdentitytoolkitRelyingpartyGetProjectConfigResponse": {
      "type": "object",
      "description": "Response of getting the project configuration.",
      "properties": {
        "resetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Reset password email template."
        },
        "authorizedDomains": {
          "description": "Authorized domains.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "legacyResetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Legacy reset password email template."
        },
        "projectId": {
          "type": "string",
          "description": "Project ID of the relying party."
        },
        "verifyEmailTemplate": {
          "description": "Verify email template.",
          "$ref": "EmailTemplate"
        },
        "apiKey": {
          "type": "string",
          "description": "Browser API key, needed when making http request to Apiary."
        },
        "changeEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Change email template."
        },
        "allowPasswordUser": {
          "type": "boolean",
          "description": "Whether to allow password user sign in or sign up."
        },
        "useEmailSending": {
          "description": "Whether to use email sending provided by Firebear.",
          "type": "boolean"
        },
        "dynamicLinksDomain": {
          "type": "string"
        },
        "enableAnonymousUser": {
          "type": "boolean",
          "description": "Whether anonymous user is enabled."
        },
        "idpConfig": {
          "description": "OAuth2 provider configuration.",
          "items": {
            "$ref": "IdpConfig"
          },
          "type": "array"
        }
      },
      "id": "IdentitytoolkitRelyingpartyGetProjectConfigResponse"
    },
    "VerifyCustomTokenResponse": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "kind": {
          "default": "identitytoolkit#VerifyCustomTokenResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#VerifyCustomTokenResponse\"."
        },
        "idToken": {
          "description": "The GITKit token for authenticated user.",
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean",
          "description": "True if it's a new user sign-in, false if it's a returning user."
        },
        "expiresIn": {
          "type": "string",
          "format": "int64",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds."
        }
      },
      "id": "VerifyCustomTokenResponse",
      "description": "Response from verifying a custom token"
    },
    "GetRecaptchaParamResponse": {
      "description": "Response of getting recaptcha param.",
      "properties": {
        "recaptchaStoken": {
          "description": "The stoken field for the recaptcha widget, used to request captcha challenge.",
          "type": "string"
        },
        "recaptchaSiteKey": {
          "description": "Site key registered at recaptcha.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#GetRecaptchaParamResponse",
          "description": "The fixed string \"identitytoolkit#GetRecaptchaParamResponse\"."
        }
      },
      "id": "GetRecaptchaParamResponse",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyEmailLinkSigninRequest": {
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest",
      "description": "Request to sign in with email.",
      "properties": {
        "idToken": {
          "description": "Token for linking flow.",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user.",
          "type": "string"
        },
        "oobCode": {
          "description": "The confirmation code.",
          "type": "string"
        }
      }
    },
    "GetAccountInfoResponse": {
      "type": "object",
      "description": "Response of getting account information.",
      "properties": {
        "users": {
          "description": "The info of the users.",
          "items": {
            "$ref": "UserInfo"
          },
          "type": "array"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#GetAccountInfoResponse\".",
          "type": "string",
          "default": "identitytoolkit#GetAccountInfoResponse"
        }
      },
      "id": "GetAccountInfoResponse"
    },
    "UserInfo": {
      "properties": {
        "customAuth": {
          "description": "Whether the user is authenticated by the developer.",
          "type": "boolean"
        },
        "photoUrl": {
          "type": "string",
          "description": "The URL of the user profile photo."
        },
        "validSince": {
          "format": "int64",
          "type": "string",
          "description": "Timestamp in seconds for valid login token."
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "User's phone number.",
          "type": "string"
        },
        "version": {
          "description": "Version of the user's password.",
          "format": "int32",
          "type": "integer"
        },
        "screenName": {
          "type": "string",
          "description": "User's screen name at Twitter or login name at Github."
        },
        "lastLoginAt": {
          "format": "int64",
          "description": "last login timestamp.",
          "type": "string"
        },
        "salt": {
          "format": "byte",
          "description": "The user's password salt.",
          "type": "string"
        },
        "rawPassword": {
          "type": "string",
          "description": "The user's plain text password."
        },
        "passwordHash": {
          "format": "byte",
          "description": "The user's hashed password.",
          "type": "string"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the user is disabled."
        },
        "providerUserInfo": {
          "items": {
            "type": "object",
            "properties": {
              "federatedId": {
                "description": "User's identifier at IDP.",
                "type": "string"
              },
              "email": {
                "description": "User's email at IDP.",
                "type": "string"
              },
              "providerId": {
                "type": "string",
                "description": "The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
              },
              "phoneNumber": {
                "description": "User's phone number.",
                "type": "string"
              },
              "displayName": {
                "type": "string",
                "description": "The user's display name at the IDP."
              },
              "photoUrl": {
                "type": "string",
                "description": "The user's photo url at the IDP."
              },
              "rawId": {
                "description": "User's raw identifier directly returned from IDP.",
                "type": "string"
              },
              "screenName": {
                "description": "User's screen name at Twitter or login name at Github.",
                "type": "string"
              }
            }
          },
          "type": "array",
          "description": "The IDP of the user."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Whether the email has been verified."
        },
        "passwordUpdatedAt": {
          "description": "The timestamp when the password was last updated.",
          "format": "double",
          "type": "number"
        },
        "createdAt": {
          "format": "int64",
          "description": "User creation timestamp.",
          "type": "string"
        },
        "customAttributes": {
          "description": "The custom attributes to be set in the user's id token.",
          "type": "string"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        }
      },
      "type": "object",
      "description": "Template for an individual account info.",
      "id": "UserInfo"
    },
    "IdentitytoolkitRelyingpartySignupNewUserRequest": {
      "id": "IdentitytoolkitRelyingpartySignupNewUserRequest",
      "description": "Request to signup new user, create anonymous user or anonymous user reauth.",
      "properties": {
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the user. Only can be used by service account."
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Privileged caller can create user with specified phone number."
        },
        "tenantProjectNumber": {
          "format": "uint64",
          "type": "string",
          "description": "Tenant project number to be used for idp discovery."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Mark the email as verified or not. Only can be used by service account."
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "captchaResponse": {
          "type": "string",
          "description": "Response to the captcha."
        },
        "password": {
          "description": "The new password of the user.",
          "type": "string"
        },
        "captchaChallenge": {
          "description": "The captcha challenge.",
          "type": "string"
        },
        "localId": {
          "description": "Privileged caller can create user with specified user id.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyVerifyAssertionRequest": {
      "id": "IdentitytoolkitRelyingpartyVerifyAssertionRequest",
      "type": "object",
      "description": "Request to verify the IDP assertion.",
      "properties": {
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "returnRefreshToken": {
          "description": "Whether to return refresh tokens.",
          "type": "boolean"
        },
        "autoCreate": {
          "type": "boolean",
          "description": "When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist."
        },
        "pendingIdToken": {
          "description": "The GITKit token for the non-trusted IDP pending to be confirmed by the user.",
          "type": "string"
        },
        "postBody": {
          "description": "The post body if the request is a HTTP POST.",
          "type": "string"
        },
        "sessionId": {
          "description": "Session ID, which should match the one in previous createAuthUri request.",
          "type": "string"
        },
        "returnIdpCredential": {
          "description": "Whether return 200 and IDP credential rather than throw exception when federated id is already linked.",
          "type": "boolean"
        },
        "tenantProjectNumber": {
          "format": "uint64",
          "type": "string",
          "description": "Tenant project number to be used for idp discovery."
        },
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "requestUri": {
          "type": "string",
          "description": "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP."
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        }
      }
    },
    "IdentitytoolkitRelyingpartySetProjectConfigResponse": {
      "properties": {
        "projectId": {
          "description": "Project ID of the relying party.",
          "type": "string"
        }
      },
      "description": "Response of setting the project configuration.",
      "id": "IdentitytoolkitRelyingpartySetProjectConfigResponse",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeResponse": {
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeResponse",
      "description": "Response for Identitytoolkit-SendVerificationCode",
      "properties": {
        "sessionInfo": {
          "type": "string",
          "description": "Encrypted session information"
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyCreateAuthUriRequest": {
      "properties": {
        "identifier": {
          "description": "The email or federated ID of the user.",
          "type": "string"
        },
        "sessionId": {
          "description": "The session_id passed by client.",
          "type": "string"
        },
        "authFlowType": {
          "description": "Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider.",
          "type": "string"
        },
        "otaApp": {
          "description": "The native app package for OTA installation.",
          "type": "string"
        },
        "hostedDomain": {
          "description": "The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.",
          "type": "string"
        },
        "customParameter": {
          "type": "object",
          "description": "The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.",
          "additionalProperties": {
            "type": "string",
            "description": "The customized query parameter."
          }
        },
        "context": {
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback.",
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        },
        "clientId": {
          "description": "The relying party OAuth client ID.",
          "type": "string"
        },
        "providerId": {
          "type": "string",
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
        },
        "oauthConsumerKey": {
          "type": "string",
          "description": "The developer's consumer key for OpenId OAuth Extension"
        },
        "appId": {
          "description": "The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.",
          "type": "string"
        },
        "oauthScope": {
          "description": "Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant",
          "type": "string"
        },
        "openidRealm": {
          "type": "string",
          "description": "Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set."
        },
        "continueUri": {
          "type": "string",
          "description": "The URI to which the IDP redirects the user after the federated login flow."
        },
        "tenantProjectNumber": {
          "format": "uint64",
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyCreateAuthUriRequest",
      "description": "Request to get the IDP authentication URL."
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeRequest": {
      "properties": {
        "phoneNumber": {
          "description": "The phone number to send the verification code to in E.164 format.",
          "type": "string"
        },
        "iosSecret": {
          "description": "Secret delivered to iOS app via APNS.",
          "type": "string"
        },
        "recaptchaToken": {
          "description": "Recaptcha solution.",
          "type": "string"
        },
        "iosReceipt": {
          "type": "string",
          "description": "Receipt of successful app token validation with APNS."
        }
      },
      "type": "object",
      "description": "Request for Identitytoolkit-SendVerificationCode",
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeRequest"
    },
    "UploadAccountResponse": {
      "type": "object",
      "description": "Respone of uploading accounts in batch.",
      "properties": {
        "error": {
          "description": "The error encountered while processing the account info.",
          "items": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Detailed error message for the account info."
              },
              "index": {
                "format": "int32",
                "type": "integer",
                "description": "The index of the malformed account, starting from 0."
              }
            }
          },
          "type": "array"
        },
        "kind": {
          "default": "identitytoolkit#UploadAccountResponse",
          "description": "The fixed string \"identitytoolkit#UploadAccountResponse\".",
          "type": "string"
        }
      },
      "id": "UploadAccountResponse"
    },
    "VerifyAssertionResponse": {
      "properties": {
        "lastName": {
          "description": "The last name of the user.",
          "type": "string"
        },
        "oauthRequestToken": {
          "type": "string",
          "description": "The user approved request token for the OpenID OAuth extension."
        },
        "inputEmail": {
          "description": "It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.",
          "type": "string"
        },
        "oauthScope": {
          "type": "string",
          "description": "The scope for the OpenID OAuth extension."
        },
        "expiresIn": {
          "format": "int64",
          "type": "string",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds."
        },
        "appInstallationUrl": {
          "type": "string",
          "description": "URL for OTA app installation."
        },
        "errorMessage": {
          "description": "Client error code.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The ID token."
        },
        "oauthTokenSecret": {
          "description": "The OAuth1 access token secret.",
          "type": "string"
        },
        "language": {
          "type": "string",
          "description": "The language preference of the user."
        },
        "dateOfBirth": {
          "description": "The birth date of the IdP account.",
          "type": "string"
        },
        "verifiedProvider": {
          "description": "When action is 'map', contains the idps which can be used for confirmation.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "federatedId": {
          "type": "string",
          "description": "The unique ID identifies the IdP account."
        },
        "photoUrl": {
          "description": "The URI of the public accessible profiel picture.",
          "type": "string"
        },
        "needEmail": {
          "type": "boolean",
          "description": "Whether need client to supply email to complete the federated login flow."
        },
        "displayName": {
          "description": "The display name of the user.",
          "type": "string"
        },
        "screenName": {
          "type": "string",
          "description": "The screen_name of a Twitter user or the login name at Github."
        },
        "firstName": {
          "description": "The first name of the user.",
          "type": "string"
        },
        "originalEmail": {
          "type": "string",
          "description": "The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email."
        },
        "oauthExpireIn": {
          "format": "int32",
          "type": "integer",
          "description": "The lifetime in seconds of the OAuth2 access token."
        },
        "fullName": {
          "description": "The full name of the user.",
          "type": "string"
        },
        "oauthIdToken": {
          "type": "string",
          "description": "The OIDC id token."
        },
        "oauthAuthorizationCode": {
          "type": "string",
          "description": "The OAuth2 authorization code."
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "context": {
          "type": "string",
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback."
        },
        "emailVerified": {
          "description": "The value is true if the IDP is also the email provider. It means the user owns the email.",
          "type": "boolean"
        },
        "timeZone": {
          "description": "The timezone of the user.",
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean",
          "description": "True if it's a new user sign-in, false if it's a returning user."
        },
        "kind": {
          "default": "identitytoolkit#VerifyAssertionResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#VerifyAssertionResponse\"."
        },
        "nickName": {
          "type": "string",
          "description": "The nick name of the user."
        },
        "providerId": {
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.",
          "type": "string"
        },
        "emailRecycled": {
          "description": "It's true if the email is recycled.",
          "type": "boolean"
        },
        "action": {
          "type": "string",
          "description": "The action code."
        },
        "needConfirmation": {
          "type": "boolean",
          "description": "Whether the assertion is from a non-trusted IDP and need account linking confirmation."
        },
        "rawUserInfo": {
          "type": "string",
          "description": "Raw IDP-returned user info."
        },
        "oauthAccessToken": {
          "type": "string",
          "description": "The OAuth2 access token."
        },
        "appScheme": {
          "description": "The custom scheme used by mobile app.",
          "type": "string"
        },
        "localId": {
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
          "type": "string"
        },
        "email": {
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response of verifying the IDP assertion.",
      "id": "VerifyAssertionResponse"
    },
    "DeleteAccountResponse": {
      "description": "Respone of deleting account.",
      "properties": {
        "kind": {
          "default": "identitytoolkit#DeleteAccountResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#DeleteAccountResponse\"."
        }
      },
      "type": "object",
      "id": "DeleteAccountResponse"
    },
    "IdentitytoolkitRelyingpartyResetPasswordRequest": {
      "description": "Request to reset the password.",
      "id": "IdentitytoolkitRelyingpartyResetPasswordRequest",
      "type": "object",
      "properties": {
        "oobCode": {
          "type": "string",
          "description": "The confirmation code."
        },
        "oldPassword": {
          "type": "string",
          "description": "The old password inputted by the user."
        },
        "newPassword": {
          "description": "The new password inputted by the user.",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user.",
          "type": "string"
        }
      }
    },
    "SignupNewUserResponse": {
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "idToken": {
          "description": "The Gitkit id token to login the newly sign up user.",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "default": "identitytoolkit#SignupNewUserResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#SignupNewUserResponse\"."
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "The RP local ID of the user."
        }
      },
      "description": "Response of signing up new user, creating anonymous user or anonymous user reauth.",
      "id": "SignupNewUserResponse",
      "type": "object"
    },
    "IdpConfig": {
      "type": "object",
      "id": "IdpConfig",
      "description": "Template for a single idp configuration.",
      "properties": {
        "enabled": {
          "description": "Whether this IDP is enabled.",
          "type": "boolean"
        },
        "clientId": {
          "type": "string",
          "description": "OAuth2 client ID."
        },
        "experimentPercent": {
          "description": "Percent of users who will be prompted/redirected federated login for this IDP.",
          "type": "integer",
          "format": "int32"
        },
        "provider": {
          "description": "OAuth2 provider.",
          "type": "string"
        },
        "whitelistedAudiences": {
          "description": "Whitelisted client IDs for audience check.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secret": {
          "type": "string",
          "description": "OAuth2 client secret."
        }
      }
    },
    "IdentitytoolkitRelyingpartyDownloadAccountRequest": {
      "id": "IdentitytoolkitRelyingpartyDownloadAccountRequest",
      "type": "object",
      "properties": {
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "nextPageToken": {
          "description": "The token for the next page. This should be taken from the previous response.",
          "type": "string"
        },
        "maxResults": {
          "format": "uint32",
          "description": "The max number of results to return in the response.",
          "type": "integer"
        },
        "targetProjectId": {
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential.",
          "type": "string"
        }
      },
      "description": "Request to download user account in batch."
    },
    "ResetPasswordResponse": {
      "description": "Response of resetting the password.",
      "id": "ResetPasswordResponse",
      "type": "object",
      "properties": {
        "requestType": {
          "description": "The request type.",
          "type": "string"
        },
        "email": {
          "description": "The user's email. If the out-of-band code is for email recovery, the user's original email.",
          "type": "string"
        },
        "newEmail": {
          "description": "If the out-of-band code is for email recovery, the user's new email.",
          "type": "string"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#ResetPasswordResponse\".",
          "type": "string",
          "default": "identitytoolkit#ResetPasswordResponse"
        }
      }
    },
    "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest": {
      "id": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest",
      "properties": {
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "token": {
          "description": "The custom token to verify",
          "type": "string"
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        }
      },
      "type": "object",
      "description": "Request to verify a custom token"
    },
    "IdentitytoolkitRelyingpartySetProjectConfigRequest": {
      "id": "IdentitytoolkitRelyingpartySetProjectConfigRequest",
      "description": "Request to set the project configuration.",
      "properties": {
        "verifyEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Verify email template."
        },
        "changeEmailTemplate": {
          "description": "Change email template.",
          "$ref": "EmailTemplate"
        },
        "idpConfig": {
          "type": "array",
          "items": {
            "$ref": "IdpConfig"
          },
          "description": "Oauth2 provider configuration."
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "allowPasswordUser": {
          "description": "Whether to allow password user sign in or sign up.",
          "type": "boolean"
        },
        "useEmailSending": {
          "type": "boolean",
          "description": "Whether to use email sending provided by Firebear."
        },
        "authorizedDomains": {
          "items": {
            "type": "string"
          },
          "description": "Authorized domains for widget redirect.",
          "type": "array"
        },
        "legacyResetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Legacy reset password email template."
        },
        "resetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Reset password email template."
        },
        "enableAnonymousUser": {
          "type": "boolean",
          "description": "Whether to enable anonymous user."
        },
        "apiKey": {
          "description": "Browser API key, needed when making http request to Apiary.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyVerifyPasswordRequest": {
      "description": "Request to verify the password.",
      "id": "IdentitytoolkitRelyingpartyVerifyPasswordRequest",
      "properties": {
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        },
        "tenantProjectNumber": {
          "format": "uint64",
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string"
        },
        "pendingIdToken": {
          "description": "The GITKit token for the non-trusted IDP, which is to be confirmed by the user.",
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "password": {
          "type": "string",
          "description": "The password inputed by the user."
        },
        "captchaResponse": {
          "type": "string",
          "description": "Response to the captcha."
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartySetAccountInfoRequest": {
      "id": "IdentitytoolkitRelyingpartySetAccountInfoRequest",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "phoneNumber": {
          "description": "Privileged caller can update user with specified phone number.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "captchaResponse": {
          "description": "Response to the captcha.",
          "type": "string"
        },
        "lastLoginAt": {
          "type": "string",
          "format": "int64",
          "description": "Last login timestamp."
        },
        "password": {
          "description": "The new password of the user.",
          "type": "string"
        },
        "validSince": {
          "format": "int64",
          "description": "Timestamp in seconds for valid login token.",
          "type": "string"
        },
        "upgradeToFederatedLogin": {
          "type": "boolean",
          "description": "Mark the user to upgrade to federated login."
        },
        "deleteAttribute": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The attributes users request to delete."
        },
        "disableUser": {
          "description": "Whether to disable the user.",
          "type": "boolean"
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "deleteProvider": {
          "type": "array",
          "description": "The IDPs the user request to delete.",
          "items": {
            "type": "string"
          }
        },
        "oobCode": {
          "type": "string",
          "description": "The out-of-band code of the change email request."
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "customAttributes": {
          "description": "The custom attributes to be set in the user's id token.",
          "type": "string"
        },
        "emailVerified": {
          "description": "Mark the email as verified or not.",
          "type": "boolean"
        },
        "createdAt": {
          "description": "The timestamp when the account is created.",
          "format": "int64",
          "type": "string"
        },
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "provider": {
          "items": {
            "type": "string"
          },
          "description": "The associated IDPs of the user.",
          "type": "array"
        }
      },
      "description": "Request to set the account information."
    },
    "SetAccountInfoResponse": {
      "id": "SetAccountInfoResponse",
      "properties": {
        "providerUserInfo": {
          "description": "The user's profiles at the associated IdPs.",
          "items": {
            "properties": {
              "displayName": {
                "type": "string",
                "description": "The user's display name at the IDP."
              },
              "federatedId": {
                "description": "User's identifier at IDP.",
                "type": "string"
              },
              "photoUrl": {
                "description": "The user's photo url at the IDP.",
                "type": "string"
              },
              "providerId": {
                "description": "The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "passwordHash": {
          "format": "byte",
          "description": "The user's hashed password.",
          "type": "string"
        },
        "photoUrl": {
          "type": "string",
          "description": "The photo url of the user."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#SetAccountInfoResponse\".",
          "default": "identitytoolkit#SetAccountInfoResponse",
          "type": "string"
        },
        "newEmail": {
          "description": "The new email the user attempts to change to.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The Gitkit id token to login the newly sign up user."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "If email has been verified."
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Respone of setting the account information."
    },
    "EmailLinkSigninResponse": {
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "The refresh token for the signed in user."
        },
        "email": {
          "type": "string",
          "description": "The user's email."
        },
        "expiresIn": {
          "description": "Expiration time of STS id token in seconds.",
          "type": "string",
          "format": "int64"
        },
        "isNewUser": {
          "type": "boolean",
          "description": "Whether the user is new."
        },
        "kind": {
          "default": "identitytoolkit#EmailLinkSigninResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#EmailLinkSigninResponse\"."
        },
        "idToken": {
          "type": "string",
          "description": "The STS id token to login the newly signed in user."
        },
        "localId": {
          "type": "string",
          "description": "The RP local ID of the user."
        }
      },
      "description": "Response of email signIn.",
      "type": "object",
      "id": "EmailLinkSigninResponse"
    },
    "DownloadAccountResponse": {
      "id": "DownloadAccountResponse",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#DownloadAccountResponse\".",
          "default": "identitytoolkit#DownloadAccountResponse"
        },
        "users": {
          "items": {
            "$ref": "UserInfo"
          },
          "type": "array",
          "description": "The user accounts data."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next page token. To be used in a subsequent request to return the next page of results."
        }
      },
      "description": "Response of downloading accounts in batch."
    }
  },
  "ownerName": "Google",
  "servicePath": "identitytoolkit/v3/relyingparty/",
  "revision": "20180723",
  "kind": "discovery#restDescription",
  "parameters": {
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "alt": {
      "description": "Data format for the response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "location": "query",
      "default": "json",
      "enum": [
        "json"
      ],
      "type": "string"
    },
    "quotaUser": {
      "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "userIp": {
      "location": "query",
      "type": "string",
      "description": "Deprecated. Please use quotaUser instead."
    }
  }
}
