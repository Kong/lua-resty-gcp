local decode = require("cjson").new().decode
return assert(decode([===[
{ "parameters": { "key": { "type": "string", "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location": "query" }, "alt": { "default": "json", "type": "string", "enumDescriptions": [ "Responses with Content-Type of application/json", "Media download with context-dependent Content-Type", "Responses with Content-Type of application/x-protobuf" ], "enum": [ "json", "media", "proto" ], "description": "Data format for response.", "location": "query" }, "callback": { "location": "query", "description": "JSONP", "type": "string" }, "fields": { "description": "Selector specifying which fields to include in a partial response.", "type": "string", "location": "query" }, "oauth_token": { "description": "OAuth 2.0 token for the current user.", "type": "string", "location": "query" }, "quotaUser": { "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "location": "query", "type": "string" }, "access_token": { "location": "query", "description": "OAuth access token.", "type": "string" }, "uploadType": { "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "location": "query", "type": "string" }, "prettyPrint": { "description": "Returns response with indentations and line breaks.", "default": "true", "location": "query", "type": "boolean" }, "upload_protocol": { "location": "query", "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").", "type": "string" }, "$.xgafv": { "location": "query", "enum": [ "1", "2" ], "enumDescriptions": [ "v1 error format", "v2 error format" ], "type": "string", "description": "V1 error format." } }, "ownerName": "Google", "resources": { "media": { "methods": { "download": { "parameters": { "name": { "type": "string", "description": "Required. The name of the attachment.", "pattern": "^notes/[^/]+/attachments/[^/]+$", "required": true, "location": "path" }, "mimeType": { "description": "The IANA MIME type format requested. The requested MIME type must be one specified in the attachment.mime_type. Required when downloading attachment media and ignored otherwise.", "location": "query", "type": "string" } }, "parameterOrder": [ "name" ], "scopes": [ "https://www.googleapis.com/auth/keep", "https://www.googleapis.com/auth/keep.readonly" ], "response": { "$ref": "Attachment" }, "supportsMediaDownload": true, "httpMethod": "GET", "id": "keep.media.download", "description": "Gets an attachment. To download attachment media via REST requires the alt=media query parameter. Returns a 400 bad request error if attachment media is not available in the requested MIME type.", "flatPath": "v1/notes/{notesId}/attachments/{attachmentsId}", "path": "v1/{+name}", "useMediaDownloadService": true } } }, "notes": { "resources": { "permissions": { "methods": { "batchDelete": { "parameterOrder": [ "parent" ], "description": "Deletes one or more permissions on the note. The specified entities will immediately lose access. A permission with the `OWNER` role can't be removed. If removing a permission fails, then the entire request fails and no changes are made. Returns a 400 bad request error if a specified permission does not exist on the note.", "scopes": [ "https://www.googleapis.com/auth/keep" ], "id": "keep.notes.permissions.batchDelete", "flatPath": "v1/notes/{notesId}/permissions:batchDelete", "request": { "$ref": "BatchDeletePermissionsRequest" }, "parameters": { "parent": { "type": "string", "location": "path", "description": "The parent resource shared by all permissions being deleted. Format: `notes/{note}` If this is set, the parent of all of the permissions specified in the DeletePermissionRequest messages must match this field.", "required": true, "pattern": "^notes/[^/]+$" } }, "response": { "$ref": "Empty" }, "httpMethod": "POST", "path": "v1/{+parent}/permissions:batchDelete" }, "batchCreate": { "path": "v1/{+parent}/permissions:batchCreate", "description": "Creates one or more permissions on the note. Only permissions with the `WRITER` role may be created. If adding any permission fails, then the entire request fails and no changes are made.", "parameters": { "parent": { "type": "string", "location": "path", "description": "The parent resource shared by all Permissions being created. Format: `notes/{note}` If this is set, the parent field in the CreatePermission messages must either be empty or match this field.", "required": true, "pattern": "^notes/[^/]+$" } }, "id": "keep.notes.permissions.batchCreate", "httpMethod": "POST", "flatPath": "v1/notes/{notesId}/permissions:batchCreate", "request": { "$ref": "BatchCreatePermissionsRequest" }, "scopes": [ "https://www.googleapis.com/auth/keep" ], "parameterOrder": [ "parent" ], "response": { "$ref": "BatchCreatePermissionsResponse" } } } } }, "methods": { "create": { "scopes": [ "https://www.googleapis.com/auth/keep" ], "response": { "$ref": "Note" }, "parameters": {}, "parameterOrder": [], "path": "v1/notes", "request": { "$ref": "Note" }, "id": "keep.notes.create", "flatPath": "v1/notes", "description": "Creates a new note.", "httpMethod": "POST" }, "get": { "scopes": [ "https://www.googleapis.com/auth/keep", "https://www.googleapis.com/auth/keep.readonly" ], "parameters": { "name": { "location": "path", "type": "string", "description": "Required. Name of the resource.", "required": true, "pattern": "^notes/[^/]+$" } }, "response": { "$ref": "Note" }, "parameterOrder": [ "name" ], "description": "Gets a note.", "httpMethod": "GET", "flatPath": "v1/notes/{notesId}", "id": "keep.notes.get", "path": "v1/{+name}" }, "list": { "parameters": { "filter": { "location": "query", "description": "Filter for list results. If no filter is supplied, the `trashed` filter is applied by default. Valid fields to filter by are: `create_time`, `update_time`, `trash_time`, and `trashed`. Filter syntax follows the [Google AIP filtering spec](https://aip.dev/160).", "type": "string" }, "pageSize": { "description": "The maximum number of results to return.", "format": "int32", "location": "query", "type": "integer" }, "pageToken": { "type": "string", "description": "The previous page's `next_page_token` field.", "location": "query" } }, "httpMethod": "GET", "description": "Lists notes. Every list call returns a page of results with `page_size` as the upper bound of returned items. A `page_size` of zero allows the server to choose the upper bound. The ListNotesResponse contains at most `page_size` entries. If there are more things left to list, it provides a `next_page_token` value. (Page tokens are opaque values.) To get the next page of results, copy the result's `next_page_token` into the next request's `page_token`. Repeat until the `next_page_token` returned with a page of results is empty. ListNotes return consistent results in the face of concurrent changes, or signals that it cannot with an ABORTED error.", "id": "keep.notes.list", "scopes": [ "https://www.googleapis.com/auth/keep", "https://www.googleapis.com/auth/keep.readonly" ], "flatPath": "v1/notes", "path": "v1/notes", "parameterOrder": [], "response": { "$ref": "ListNotesResponse" } }, "delete": { "parameters": { "name": { "description": "Required. Name of the note to delete.", "required": true, "type": "string", "pattern": "^notes/[^/]+$", "location": "path" } }, "scopes": [ "https://www.googleapis.com/auth/keep" ], "parameterOrder": [ "name" ], "response": { "$ref": "Empty" }, "path": "v1/{+name}", "flatPath": "v1/notes/{notesId}", "description": "Deletes a note. Caller must have the `OWNER` role on the note to delete. Deleting a note removes the resource immediately and cannot be undone. Any collaborators will lose access to the note.", "id": "keep.notes.delete", "httpMethod": "DELETE" } } } }, "canonicalName": "Keep", "ownerDomain": "google.com", "basePath": "", "discoveryVersion": "v1", "servicePath": "", "kind": "discovery#restDescription", "version_module": true, "baseUrl": "https://keep.googleapis.com/", "mtlsRootUrl": "https://keep.mtls.googleapis.com/", "fullyEncodeReservedExpansion": true, "name": "keep", "revision": "20220703", "description": "The Google Keep API is used in an enterprise environment to manage Google Keep content and resolve issues identified by cloud security software.", "schemas": { "ListItem": { "type": "object", "properties": { "checked": { "type": "boolean", "description": "Whether this item has been checked off or not." }, "childListItems": { "type": "array", "description": "If set, list of list items nested under this list item. Only one level of nesting is allowed.", "items": { "$ref": "ListItem" } }, "text": { "$ref": "TextContent", "description": "The text of this item. Length must be less than 1,000 characters." } }, "id": "ListItem", "description": "A single list item in a note's list." }, "User": { "type": "object", "properties": { "email": { "description": "The user's email.", "type": "string" } }, "description": "Describes a single user.", "id": "User" }, "Attachment": { "properties": { "mimeType": { "description": "The MIME types (IANA media types) in which the attachment is available.", "type": "array", "items": { "type": "string" } }, "name": { "description": "The resource name;", "type": "string" } }, "description": "An attachment to a note.", "id": "Attachment", "type": "object" }, "ListNotesResponse": { "properties": { "notes": { "items": { "$ref": "Note" }, "description": "A page of notes.", "type": "array" }, "nextPageToken": { "description": "Next page's `page_token` field.", "type": "string" } }, "id": "ListNotesResponse", "type": "object", "description": "The response when listing a page of notes." }, "Family": { "description": "Describes a single Google Family.", "type": "object", "properties": {}, "id": "Family" }, "Note": { "type": "object", "description": "A single note.", "id": "Note", "properties": { "updateTime": { "readOnly": true, "description": "Output only. When this note was last modified.", "type": "string", "format": "google-datetime" }, "attachments": { "description": "Output only. The attachments attached to this note.", "items": { "$ref": "Attachment" }, "type": "array", "readOnly": true }, "body": { "description": "The body of the note.", "$ref": "Section" }, "trashTime": { "type": "string", "readOnly": true, "format": "google-datetime", "description": "Output only. When this note was trashed. If `trashed`, the note is eventually deleted. If the note is not trashed, this field is not set (and the trashed field is `false`)." }, "permissions": { "items": { "$ref": "Permission" }, "readOnly": true, "description": "Output only. The list of permissions set on the note. Contains at least one entry for the note owner.", "type": "array" }, "createTime": { "description": "Output only. When this note was created.", "type": "string", "format": "google-datetime", "readOnly": true }, "title": { "type": "string", "description": "The title of the note. Length must be less than 1,000 characters." }, "name": { "type": "string", "description": "Output only. The resource name of this note. See general note on identifiers in KeepService.", "readOnly": true }, "trashed": { "type": "boolean", "description": "Output only. `true` if this note has been trashed. If trashed, the note is eventually deleted.", "readOnly": true } } }, "BatchCreatePermissionsResponse": { "properties": { "permissions": { "type": "array", "items": { "$ref": "Permission" }, "description": "Permissions created." } }, "type": "object", "id": "BatchCreatePermissionsResponse", "description": "The response for creating permissions on a note." }, "BatchCreatePermissionsRequest": { "id": "BatchCreatePermissionsRequest", "description": "The request to add one or more permissions on the note. Currently, only the `WRITER` role may be specified. If adding a permission fails, then the entire request fails and no changes are made.", "properties": { "requests": { "type": "array", "description": "The request message specifying the resources to create.", "items": { "$ref": "CreatePermissionRequest" } } }, "type": "object" }, "Empty": { "properties": {}, "type": "object", "id": "Empty", "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }" }, "CreatePermissionRequest": { "type": "object", "description": "The request to add a single permission on the note.", "id": "CreatePermissionRequest", "properties": { "parent": { "type": "string", "description": "Required. The parent note where this permission will be created. Format: `notes/{note}`" }, "permission": { "$ref": "Permission", "description": "Required. The permission to create. One of Permission.email, User.email or Group.email must be supplied." } } }, "Permission": { "properties": { "group": { "$ref": "Group", "description": "Output only. The group to which this role applies.", "readOnly": true }, "email": { "description": "The email associated with the member. If set on create, the `email` field in the `User` or `Group` message must either be empty or match this field. On read, may be unset if the member does not have an associated email.", "type": "string" }, "user": { "$ref": "User", "description": "Output only. The user to whom this role applies.", "readOnly": true }, "role": { "enum": [ "ROLE_UNSPECIFIED", "OWNER", "WRITER" ], "description": "The role granted by this permission. The role determines the entity’s ability to read, write, and share notes.", "enumDescriptions": [ "An undefined role.", "A role granting full access. This role cannot be added or removed. Defined by the creator of the note.", "A role granting the ability to contribute content and modify note permissions." ], "type": "string" }, "name": { "readOnly": true, "type": "string", "description": "Output only. The resource name." }, "family": { "description": "Output only. The Google Family to which this role applies.", "$ref": "Family", "readOnly": true }, "deleted": { "type": "boolean", "description": "Output only. Whether this member has been deleted. If the member is recovered, this value is set to false and the recovered member retains the role on the note.", "readOnly": true } }, "description": "A single permission on the note. Associates a `member` with a `role`.", "type": "object", "id": "Permission" }, "TextContent": { "description": "The block of text for a single text section or list item.", "type": "object", "properties": { "text": { "type": "string", "description": "The text of the note. The limits on this vary with the specific field using this type." } }, "id": "TextContent" }, "BatchDeletePermissionsRequest": { "description": "The request to remove one or more permissions from a note. A permission with the `OWNER` role can't be removed. If removing a permission fails, then the entire request fails and no changes are made. Returns a 400 bad request error if a specified permission does not exist on the note.", "id": "BatchDeletePermissionsRequest", "properties": { "names": { "type": "array", "items": { "type": "string" }, "description": "Required. The names of the permissions to delete. Format: `notes/{note}/permissions/{permission}`" } }, "type": "object" }, "Section": { "properties": { "list": { "$ref": "ListContent", "description": "Used if this section's content is a list." }, "text": { "$ref": "TextContent", "description": "Used if this section's content is a block of text. The length of the text content must be less than 20,000 characters." } }, "type": "object", "id": "Section", "description": "The content of the note." }, "Group": { "description": "Describes a single Group.", "properties": { "email": { "description": "The group email.", "type": "string" } }, "id": "Group", "type": "object" }, "ListContent": { "properties": { "listItems": { "type": "array", "items": { "$ref": "ListItem" }, "description": "The items in the list. The number of items must be less than 1,000." } }, "type": "object", "description": "The list of items for a single list note.", "id": "ListContent" } }, "auth": { "oauth2": { "scopes": { "https://www.googleapis.com/auth/keep.readonly": { "description": "View all your Google Keep data" }, "https://www.googleapis.com/auth/keep": { "description": "See, edit, create and permanently delete all your Google Keep data" } } } }, "icons": { "x32": "http://www.google.com/images/icons/product/search-32.gif", "x16": "http://www.google.com/images/icons/product/search-16.gif" }, "batchPath": "batch", "protocol": "rest", "version": "v1", "title": "Google Keep API", "id": "keep:v1", "rootUrl": "https://keep.googleapis.com/", "documentationLink": "https://developers.google.com/keep/api" }
]===]))
