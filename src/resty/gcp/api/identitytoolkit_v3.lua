local decode = require("cjson").new().decode
return assert(decode([===[
{ "icons": { "x32": "https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png", "x16": "https://www.gstatic.com/images/branding/product/1x/googleg_16dp.png" }, "id": "identitytoolkit:v3", "revision": "20180723", "kind": "discovery#restDescription", "auth": { "oauth2": { "scopes": { "https://www.googleapis.com/auth/cloud-platform": { "description": "View and manage your data across Google Cloud Platform services" }, "https://www.googleapis.com/auth/firebase": { "description": "View and administer all your Firebase data and settings" } } } }, "ownerName": "Google", "schemas": { "EmailTemplate": { "type": "object", "properties": { "from": { "description": "From address of the email.", "type": "string" }, "fromDisplayName": { "description": "From display name.", "type": "string" }, "body": { "description": "Email body.", "type": "string" }, "replyTo": { "type": "string", "description": "Reply-to address." }, "format": { "description": "Email body format.", "type": "string" }, "subject": { "description": "Subject of the email.", "type": "string" } }, "description": "Template for an email template.", "id": "EmailTemplate" }, "DownloadAccountResponse": { "id": "DownloadAccountResponse", "description": "Response of downloading accounts in batch.", "type": "object", "properties": { "kind": { "default": "identitytoolkit#DownloadAccountResponse", "description": "The fixed string \"identitytoolkit#DownloadAccountResponse\".", "type": "string" }, "users": { "description": "The user accounts data.", "type": "array", "items": { "$ref": "UserInfo" } }, "nextPageToken": { "type": "string", "description": "The next page token. To be used in a subsequent request to return the next page of results." } } }, "IdentitytoolkitRelyingpartyVerifyAssertionRequest": { "id": "IdentitytoolkitRelyingpartyVerifyAssertionRequest", "properties": { "idToken": { "type": "string", "description": "The GITKit token of the authenticated user." }, "pendingIdToken": { "type": "string", "description": "The GITKit token for the non-trusted IDP pending to be confirmed by the user." }, "tenantId": { "type": "string", "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from." }, "returnRefreshToken": { "description": "Whether to return refresh tokens.", "type": "boolean" }, "instanceId": { "type": "string", "description": "Instance id token of the app." }, "returnSecureToken": { "description": "Whether return sts id token and refresh token instead of gitkit token.", "type": "boolean" }, "returnIdpCredential": { "description": "Whether return 200 and IDP credential rather than throw exception when federated id is already linked.", "type": "boolean" }, "requestUri": { "type": "string", "description": "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP." }, "delegatedProjectNumber": { "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "type": "string", "format": "int64" }, "sessionId": { "type": "string", "description": "Session ID, which should match the one in previous createAuthUri request." }, "autoCreate": { "type": "boolean", "description": "When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist." }, "postBody": { "description": "The post body if the request is a HTTP POST.", "type": "string" }, "tenantProjectNumber": { "format": "uint64", "description": "Tenant project number to be used for idp discovery.", "type": "string" } }, "type": "object", "description": "Request to verify the IDP assertion." }, "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest": { "properties": { "returnSecureToken": { "type": "boolean", "description": "Whether return sts id token and refresh token instead of gitkit token." }, "instanceId": { "description": "Instance id token of the app.", "type": "string" }, "delegatedProjectNumber": { "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "type": "string", "format": "int64" }, "token": { "description": "The custom token to verify", "type": "string" } }, "id": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest", "description": "Request to verify a custom token", "type": "object" }, "IdentitytoolkitRelyingpartyGetProjectConfigResponse": { "id": "IdentitytoolkitRelyingpartyGetProjectConfigResponse", "properties": { "verifyEmailTemplate": { "description": "Verify email template.", "$ref": "EmailTemplate" }, "enableAnonymousUser": { "type": "boolean", "description": "Whether anonymous user is enabled." }, "changeEmailTemplate": { "description": "Change email template.", "$ref": "EmailTemplate" }, "dynamicLinksDomain": { "type": "string" }, "projectId": { "description": "Project ID of the relying party.", "type": "string" }, "legacyResetPasswordTemplate": { "description": "Legacy reset password email template.", "$ref": "EmailTemplate" }, "authorizedDomains": { "description": "Authorized domains.", "items": { "type": "string" }, "type": "array" }, "allowPasswordUser": { "type": "boolean", "description": "Whether to allow password user sign in or sign up." }, "resetPasswordTemplate": { "description": "Reset password email template.", "$ref": "EmailTemplate" }, "idpConfig": { "type": "array", "items": { "$ref": "IdpConfig" }, "description": "OAuth2 provider configuration." }, "apiKey": { "description": "Browser API key, needed when making http request to Apiary.", "type": "string" }, "useEmailSending": { "description": "Whether to use email sending provided by Firebear.", "type": "boolean" } }, "description": "Response of getting the project configuration.", "type": "object" }, "IdentitytoolkitRelyingpartyResetPasswordRequest": { "id": "IdentitytoolkitRelyingpartyResetPasswordRequest", "properties": { "email": { "description": "The email address of the user.", "type": "string" }, "oobCode": { "type": "string", "description": "The confirmation code." }, "oldPassword": { "description": "The old password inputted by the user.", "type": "string" }, "newPassword": { "type": "string", "description": "The new password inputted by the user." } }, "description": "Request to reset the password.", "type": "object" }, "GetRecaptchaParamResponse": { "type": "object", "properties": { "recaptchaStoken": { "description": "The stoken field for the recaptcha widget, used to request captcha challenge.", "type": "string" }, "recaptchaSiteKey": { "description": "Site key registered at recaptcha.", "type": "string" }, "kind": { "description": "The fixed string \"identitytoolkit#GetRecaptchaParamResponse\".", "default": "identitytoolkit#GetRecaptchaParamResponse", "type": "string" } }, "id": "GetRecaptchaParamResponse", "description": "Response of getting recaptcha param." }, "IdentitytoolkitRelyingpartyGetPublicKeysResponse": { "description": "Respone of getting public keys.", "id": "IdentitytoolkitRelyingpartyGetPublicKeysResponse", "additionalProperties": { "type": "string" }, "type": "object" }, "VerifyPasswordResponse": { "id": "VerifyPasswordResponse", "properties": { "registered": { "description": "Whether the email is registered.", "type": "boolean" }, "localId": { "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.", "type": "string" }, "displayName": { "description": "The name of the user.", "type": "string" }, "oauthExpireIn": { "format": "int32", "type": "integer", "description": "The lifetime in seconds of the OAuth2 access token." }, "photoUrl": { "description": "The URI of the user's photo at IdP", "type": "string" }, "kind": { "default": "identitytoolkit#VerifyPasswordResponse", "type": "string", "description": "The fixed string \"identitytoolkit#VerifyPasswordResponse\"." }, "oauthAccessToken": { "description": "The OAuth2 access token.", "type": "string" }, "idToken": { "type": "string", "description": "The GITKit token for authenticated user." }, "refreshToken": { "type": "string", "description": "If idToken is STS id token, then this field will be refresh token." }, "expiresIn": { "format": "int64", "type": "string", "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds." }, "email": { "description": "The email returned by the IdP. NOTE: The federated login user may not own the email.", "type": "string" }, "oauthAuthorizationCode": { "description": "The OAuth2 authorization code.", "type": "string" } }, "description": "Request of verifying the password.", "type": "object" }, "UserInfo": { "id": "UserInfo", "properties": { "disabled": { "type": "boolean", "description": "Whether the user is disabled." }, "email": { "description": "The email of the user.", "type": "string" }, "passwordUpdatedAt": { "format": "double", "description": "The timestamp when the password was last updated.", "type": "number" }, "customAttributes": { "type": "string", "description": "The custom attributes to be set in the user's id token." }, "salt": { "description": "The user's password salt.", "type": "string", "format": "byte" }, "screenName": { "description": "User's screen name at Twitter or login name at Github.", "type": "string" }, "lastLoginAt": { "description": "last login timestamp.", "type": "string", "format": "int64" }, "providerUserInfo": { "items": { "properties": { "displayName": { "description": "The user's display name at the IDP.", "type": "string" }, "providerId": { "description": "The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.", "type": "string" }, "phoneNumber": { "description": "User's phone number.", "type": "string" }, "rawId": { "description": "User's raw identifier directly returned from IDP.", "type": "string" }, "federatedId": { "type": "string", "description": "User's identifier at IDP." }, "photoUrl": { "type": "string", "description": "The user's photo url at the IDP." }, "email": { "type": "string", "description": "User's email at IDP." }, "screenName": { "description": "User's screen name at Twitter or login name at Github.", "type": "string" } }, "type": "object" }, "description": "The IDP of the user.", "type": "array" }, "rawPassword": { "description": "The user's plain text password.", "type": "string" }, "emailVerified": { "description": "Whether the email has been verified.", "type": "boolean" }, "photoUrl": { "type": "string", "description": "The URL of the user profile photo." }, "customAuth": { "description": "Whether the user is authenticated by the developer.", "type": "boolean" }, "validSince": { "description": "Timestamp in seconds for valid login token.", "format": "int64", "type": "string" }, "passwordHash": { "description": "The user's hashed password.", "format": "byte", "type": "string" }, "createdAt": { "description": "User creation timestamp.", "format": "int64", "type": "string" }, "localId": { "description": "The local ID of the user.", "type": "string" }, "displayName": { "type": "string", "description": "The name of the user." }, "phoneNumber": { "type": "string", "description": "User's phone number." }, "version": { "format": "int32", "description": "Version of the user's password.", "type": "integer" } }, "type": "object", "description": "Template for an individual account info." }, "IdentitytoolkitRelyingpartyCreateAuthUriRequest": { "id": "IdentitytoolkitRelyingpartyCreateAuthUriRequest", "type": "object", "description": "Request to get the IDP authentication URL.", "properties": { "authFlowType": { "description": "Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider.", "type": "string" }, "context": { "type": "string", "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback." }, "otaApp": { "description": "The native app package for OTA installation.", "type": "string" }, "appId": { "type": "string", "description": "The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS." }, "oauthConsumerKey": { "description": "The developer's consumer key for OpenId OAuth Extension", "type": "string" }, "oauthScope": { "description": "Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant", "type": "string" }, "clientId": { "type": "string", "description": "The relying party OAuth client ID." }, "identifier": { "description": "The email or federated ID of the user.", "type": "string" }, "openidRealm": { "type": "string", "description": "Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set." }, "tenantProjectNumber": { "format": "uint64", "type": "string", "description": "Tenant project number to be used for idp discovery." }, "tenantId": { "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.", "type": "string" }, "sessionId": { "description": "The session_id passed by client.", "type": "string" }, "customParameter": { "type": "object", "description": "The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.", "additionalProperties": { "description": "The customized query parameter.", "type": "string" } }, "continueUri": { "type": "string", "description": "The URI to which the IDP redirects the user after the federated login flow." }, "hostedDomain": { "description": "The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.", "type": "string" }, "providerId": { "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.", "type": "string" } } }, "VerifyAssertionResponse": { "type": "object", "description": "Response of verifying the IDP assertion.", "properties": { "emailVerified": { "description": "The value is true if the IDP is also the email provider. It means the user owns the email.", "type": "boolean" }, "emailRecycled": { "type": "boolean", "description": "It's true if the email is recycled." }, "fullName": { "description": "The full name of the user.", "type": "string" }, "language": { "type": "string", "description": "The language preference of the user." }, "oauthTokenSecret": { "type": "string", "description": "The OAuth1 access token secret." }, "oauthExpireIn": { "format": "int32", "type": "integer", "description": "The lifetime in seconds of the OAuth2 access token." }, "expiresIn": { "format": "int64", "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", "type": "string" }, "oauthIdToken": { "description": "The OIDC id token.", "type": "string" }, "needEmail": { "description": "Whether need client to supply email to complete the federated login flow.", "type": "boolean" }, "needConfirmation": { "type": "boolean", "description": "Whether the assertion is from a non-trusted IDP and need account linking confirmation." }, "federatedId": { "type": "string", "description": "The unique ID identifies the IdP account." }, "dateOfBirth": { "type": "string", "description": "The birth date of the IdP account." }, "appScheme": { "type": "string", "description": "The custom scheme used by mobile app." }, "oauthScope": { "type": "string", "description": "The scope for the OpenID OAuth extension." }, "context": { "type": "string", "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback." }, "originalEmail": { "type": "string", "description": "The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email." }, "photoUrl": { "type": "string", "description": "The URI of the public accessible profiel picture." }, "refreshToken": { "description": "If idToken is STS id token, then this field will be refresh token.", "type": "string" }, "kind": { "default": "identitytoolkit#VerifyAssertionResponse", "type": "string", "description": "The fixed string \"identitytoolkit#VerifyAssertionResponse\"." }, "firstName": { "description": "The first name of the user.", "type": "string" }, "displayName": { "type": "string", "description": "The display name of the user." }, "isNewUser": { "description": "True if it's a new user sign-in, false if it's a returning user.", "type": "boolean" }, "idToken": { "description": "The ID token.", "type": "string" }, "oauthAuthorizationCode": { "type": "string", "description": "The OAuth2 authorization code." }, "lastName": { "description": "The last name of the user.", "type": "string" }, "localId": { "type": "string", "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID." }, "nickName": { "description": "The nick name of the user.", "type": "string" }, "email": { "type": "string", "description": "The email returned by the IdP. NOTE: The federated login user may not own the email." }, "oauthAccessToken": { "description": "The OAuth2 access token.", "type": "string" }, "appInstallationUrl": { "type": "string", "description": "URL for OTA app installation." }, "oauthRequestToken": { "description": "The user approved request token for the OpenID OAuth extension.", "type": "string" }, "verifiedProvider": { "description": "When action is 'map', contains the idps which can be used for confirmation.", "items": { "type": "string" }, "type": "array" }, "rawUserInfo": { "type": "string", "description": "Raw IDP-returned user info." }, "providerId": { "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.", "type": "string" }, "errorMessage": { "type": "string", "description": "Client error code." }, "screenName": { "type": "string", "description": "The screen_name of a Twitter user or the login name at Github." }, "inputEmail": { "type": "string", "description": "It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email." }, "timeZone": { "description": "The timezone of the user.", "type": "string" }, "action": { "description": "The action code.", "type": "string" } }, "id": "VerifyAssertionResponse" }, "IdentitytoolkitRelyingpartySendVerificationCodeResponse": { "id": "IdentitytoolkitRelyingpartySendVerificationCodeResponse", "description": "Response for Identitytoolkit-SendVerificationCode", "properties": { "sessionInfo": { "description": "Encrypted session information", "type": "string" } }, "type": "object" }, "IdentitytoolkitRelyingpartyDownloadAccountRequest": { "properties": { "nextPageToken": { "type": "string", "description": "The token for the next page. This should be taken from the previous response." }, "targetProjectId": { "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential.", "type": "string" }, "delegatedProjectNumber": { "type": "string", "format": "int64", "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration." }, "maxResults": { "format": "uint32", "type": "integer", "description": "The max number of results to return in the response." } }, "id": "IdentitytoolkitRelyingpartyDownloadAccountRequest", "type": "object", "description": "Request to download user account in batch." }, "IdentitytoolkitRelyingpartyVerifyPasswordRequest": { "description": "Request to verify the password.", "type": "object", "properties": { "returnSecureToken": { "type": "boolean", "description": "Whether return sts id token and refresh token instead of gitkit token." }, "tenantId": { "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.", "type": "string" }, "instanceId": { "description": "Instance id token of the app.", "type": "string" }, "password": { "description": "The password inputed by the user.", "type": "string" }, "idToken": { "type": "string", "description": "The GITKit token of the authenticated user." }, "captchaResponse": { "type": "string", "description": "Response to the captcha." }, "pendingIdToken": { "type": "string", "description": "The GITKit token for the non-trusted IDP, which is to be confirmed by the user." }, "tenantProjectNumber": { "format": "uint64", "type": "string", "description": "Tenant project number to be used for idp discovery." }, "email": { "type": "string", "description": "The email of the user." }, "delegatedProjectNumber": { "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "type": "string", "format": "int64" }, "captchaChallenge": { "description": "The captcha challenge.", "type": "string" } }, "id": "IdentitytoolkitRelyingpartyVerifyPasswordRequest" }, "IdentitytoolkitRelyingpartyUploadAccountRequest": { "type": "object", "description": "Request to upload user account in batch.", "properties": { "signerKey": { "description": "The key for to hash the password.", "type": "string", "format": "byte" }, "delegatedProjectNumber": { "type": "string", "format": "int64", "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration." }, "blockSize": { "type": "integer", "format": "int32" }, "memoryCost": { "format": "int32", "type": "integer", "description": "Memory cost for hash calculation. Used by scrypt similar algorithms." }, "sanityCheck": { "type": "boolean", "description": "If true, backend will do sanity check(including duplicate email and federated id) when uploading account." }, "parallelization": { "type": "integer", "format": "int32" }, "cpuMemCost": { "description": "The following 4 fields are for standard scrypt algorithm.", "format": "int32", "type": "integer" }, "users": { "items": { "$ref": "UserInfo" }, "description": "The account info to be stored.", "type": "array" }, "rounds": { "format": "int32", "description": "Rounds for hash calculation. Used by scrypt and similar algorithms.", "type": "integer" }, "dkLen": { "format": "int32", "type": "integer" }, "targetProjectId": { "type": "string", "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential." }, "allowOverwrite": { "type": "boolean", "description": "Whether allow overwrite existing account when user local_id exists." }, "hashAlgorithm": { "description": "The password hash algorithm.", "type": "string" }, "saltSeparator": { "description": "The salt separator.", "type": "string", "format": "byte" } }, "id": "IdentitytoolkitRelyingpartyUploadAccountRequest" }, "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse": { "type": "object", "properties": { "localId": { "type": "string" }, "verificationProofExpiresIn": { "format": "int64", "type": "string" }, "refreshToken": { "type": "string" }, "temporaryProof": { "type": "string" }, "phoneNumber": { "type": "string" }, "isNewUser": { "type": "boolean" }, "verificationProof": { "type": "string" }, "temporaryProofExpiresIn": { "type": "string", "format": "int64" }, "idToken": { "type": "string" }, "expiresIn": { "type": "string", "format": "int64" } }, "description": "Response for Identitytoolkit-VerifyPhoneNumber", "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse" }, "IdentitytoolkitRelyingpartySendVerificationCodeRequest": { "properties": { "phoneNumber": { "type": "string", "description": "The phone number to send the verification code to in E.164 format." }, "iosSecret": { "type": "string", "description": "Secret delivered to iOS app via APNS." }, "recaptchaToken": { "description": "Recaptcha solution.", "type": "string" }, "iosReceipt": { "type": "string", "description": "Receipt of successful app token validation with APNS." } }, "type": "object", "id": "IdentitytoolkitRelyingpartySendVerificationCodeRequest", "description": "Request for Identitytoolkit-SendVerificationCode" }, "CreateAuthUriResponse": { "type": "object", "description": "Response of creating the IDP authentication URL.", "properties": { "authUri": { "description": "The URI used by the IDP to authenticate the user.", "type": "string" }, "kind": { "default": "identitytoolkit#CreateAuthUriResponse", "description": "The fixed string identitytoolkit#CreateAuthUriResponse\".", "type": "string" }, "registered": { "description": "Whether the user is registered if the identifier is an email.", "type": "boolean" }, "forExistingProvider": { "description": "True if the authUri is for user's existing provider.", "type": "boolean" }, "allProviders": { "type": "array", "description": "all providers the user has once used to do federated login", "items": { "type": "string" } }, "signinMethods": { "description": "All sign-in methods this user has used.", "items": { "type": "string" }, "type": "array" }, "captchaRequired": { "description": "True if captcha is required.", "type": "boolean" }, "providerId": { "type": "string", "description": "The provider ID of the auth URI." }, "sessionId": { "description": "Session ID which should be passed in the following verifyAssertion request.", "type": "string" } }, "id": "CreateAuthUriResponse" }, "IdentitytoolkitRelyingpartyDeleteAccountRequest": { "properties": { "localId": { "description": "The local ID of the user.", "type": "string" }, "delegatedProjectNumber": { "type": "string", "format": "int64", "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration." }, "idToken": { "type": "string", "description": "The GITKit token or STS id token of the authenticated user." } }, "id": "IdentitytoolkitRelyingpartyDeleteAccountRequest", "type": "object", "description": "Request to delete account." }, "IdentitytoolkitRelyingpartySignOutUserRequest": { "id": "IdentitytoolkitRelyingpartySignOutUserRequest", "type": "object", "description": "Request to sign out user.", "properties": { "localId": { "description": "The local ID of the user.", "type": "string" }, "instanceId": { "description": "Instance id token of the app.", "type": "string" } } }, "UploadAccountResponse": { "properties": { "error": { "items": { "type": "object", "properties": { "message": { "type": "string", "description": "Detailed error message for the account info." }, "index": { "format": "int32", "description": "The index of the malformed account, starting from 0.", "type": "integer" } } }, "description": "The error encountered while processing the account info.", "type": "array" }, "kind": { "description": "The fixed string \"identitytoolkit#UploadAccountResponse\".", "default": "identitytoolkit#UploadAccountResponse", "type": "string" } }, "id": "UploadAccountResponse", "description": "Respone of uploading accounts in batch.", "type": "object" }, "IdentitytoolkitRelyingpartySignupNewUserRequest": { "description": "Request to signup new user, create anonymous user or anonymous user reauth.", "type": "object", "properties": { "photoUrl": { "type": "string", "description": "The photo url of the user." }, "email": { "description": "The email of the user.", "type": "string" }, "displayName": { "description": "The name of the user.", "type": "string" }, "tenantId": { "type": "string", "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from." }, "tenantProjectNumber": { "format": "uint64", "type": "string", "description": "Tenant project number to be used for idp discovery." }, "idToken": { "description": "The GITKit token of the authenticated user.", "type": "string" }, "instanceId": { "type": "string", "description": "Instance id token of the app." }, "password": { "type": "string", "description": "The new password of the user." }, "captchaChallenge": { "type": "string", "description": "The captcha challenge." }, "disabled": { "description": "Whether to disable the user. Only can be used by service account.", "type": "boolean" }, "captchaResponse": { "description": "Response to the captcha.", "type": "string" }, "phoneNumber": { "description": "Privileged caller can create user with specified phone number.", "type": "string" }, "localId": { "type": "string", "description": "Privileged caller can create user with specified user id." }, "emailVerified": { "description": "Mark the email as verified or not. Only can be used by service account.", "type": "boolean" } }, "id": "IdentitytoolkitRelyingpartySignupNewUserRequest" }, "IdentitytoolkitRelyingpartySetProjectConfigRequest": { "properties": { "changeEmailTemplate": { "description": "Change email template.", "$ref": "EmailTemplate" }, "verifyEmailTemplate": { "description": "Verify email template.", "$ref": "EmailTemplate" }, "enableAnonymousUser": { "type": "boolean", "description": "Whether to enable anonymous user." }, "apiKey": { "type": "string", "description": "Browser API key, needed when making http request to Apiary." }, "legacyResetPasswordTemplate": { "$ref": "EmailTemplate", "description": "Legacy reset password email template." }, "authorizedDomains": { "description": "Authorized domains for widget redirect.", "items": { "type": "string" }, "type": "array" }, "useEmailSending": { "description": "Whether to use email sending provided by Firebear.", "type": "boolean" }, "idpConfig": { "items": { "$ref": "IdpConfig" }, "description": "Oauth2 provider configuration.", "type": "array" }, "delegatedProjectNumber": { "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "type": "string", "format": "int64" }, "resetPasswordTemplate": { "$ref": "EmailTemplate", "description": "Reset password email template." }, "allowPasswordUser": { "description": "Whether to allow password user sign in or sign up.", "type": "boolean" } }, "type": "object", "description": "Request to set the project configuration.", "id": "IdentitytoolkitRelyingpartySetProjectConfigRequest" }, "IdentitytoolkitRelyingpartySetAccountInfoRequest": { "properties": { "oobCode": { "description": "The out-of-band code of the change email request.", "type": "string" }, "displayName": { "type": "string", "description": "The name of the user." }, "delegatedProjectNumber": { "type": "string", "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "format": "int64" }, "deleteProvider": { "description": "The IDPs the user request to delete.", "type": "array", "items": { "type": "string" } }, "emailVerified": { "type": "boolean", "description": "Mark the email as verified or not." }, "email": { "description": "The email of the user.", "type": "string" }, "phoneNumber": { "type": "string", "description": "Privileged caller can update user with specified phone number." }, "localId": { "type": "string", "description": "The local ID of the user." }, "lastLoginAt": { "description": "Last login timestamp.", "format": "int64", "type": "string" }, "idToken": { "description": "The GITKit token of the authenticated user.", "type": "string" }, "provider": { "items": { "type": "string" }, "type": "array", "description": "The associated IDPs of the user." }, "customAttributes": { "description": "The custom attributes to be set in the user's id token.", "type": "string" }, "createdAt": { "description": "The timestamp when the account is created.", "type": "string", "format": "int64" }, "password": { "type": "string", "description": "The new password of the user." }, "captchaChallenge": { "type": "string", "description": "The captcha challenge." }, "disableUser": { "description": "Whether to disable the user.", "type": "boolean" }, "instanceId": { "type": "string", "description": "Instance id token of the app." }, "captchaResponse": { "description": "Response to the captcha.", "type": "string" }, "photoUrl": { "type": "string", "description": "The photo url of the user." }, "deleteAttribute": { "items": { "type": "string" }, "type": "array", "description": "The attributes users request to delete." }, "validSince": { "type": "string", "format": "int64", "description": "Timestamp in seconds for valid login token." }, "returnSecureToken": { "type": "boolean", "description": "Whether return sts id token and refresh token instead of gitkit token." }, "upgradeToFederatedLogin": { "description": "Mark the user to upgrade to federated login.", "type": "boolean" } }, "id": "IdentitytoolkitRelyingpartySetAccountInfoRequest", "description": "Request to set the account information.", "type": "object" }, "GetAccountInfoResponse": { "id": "GetAccountInfoResponse", "description": "Response of getting account information.", "properties": { "users": { "items": { "$ref": "UserInfo" }, "description": "The info of the users.", "type": "array" }, "kind": { "default": "identitytoolkit#GetAccountInfoResponse", "description": "The fixed string \"identitytoolkit#GetAccountInfoResponse\".", "type": "string" } }, "type": "object" }, "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest": { "description": "Request for Identitytoolkit-VerifyPhoneNumber", "properties": { "sessionInfo": { "description": "The session info previously returned by IdentityToolkit-SendVerificationCode.", "type": "string" }, "phoneNumber": { "type": "string" }, "temporaryProof": { "type": "string" }, "operation": { "type": "string" }, "idToken": { "type": "string" }, "code": { "type": "string" }, "verificationProof": { "type": "string" } }, "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest", "type": "object" }, "SetAccountInfoResponse": { "properties": { "providerUserInfo": { "description": "The user's profiles at the associated IdPs.", "type": "array", "items": { "type": "object", "properties": { "photoUrl": { "description": "The user's photo url at the IDP.", "type": "string" }, "providerId": { "description": "The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.", "type": "string" }, "displayName": { "type": "string", "description": "The user's display name at the IDP." }, "federatedId": { "description": "User's identifier at IDP.", "type": "string" } } } }, "kind": { "type": "string", "default": "identitytoolkit#SetAccountInfoResponse", "description": "The fixed string \"identitytoolkit#SetAccountInfoResponse\"." }, "newEmail": { "type": "string", "description": "The new email the user attempts to change to." }, "localId": { "type": "string", "description": "The local ID of the user." }, "expiresIn": { "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", "format": "int64", "type": "string" }, "idToken": { "description": "The Gitkit id token to login the newly sign up user.", "type": "string" }, "displayName": { "type": "string", "description": "The name of the user." }, "email": { "type": "string", "description": "The email of the user." }, "photoUrl": { "description": "The photo url of the user.", "type": "string" }, "emailVerified": { "type": "boolean", "description": "If email has been verified." }, "refreshToken": { "type": "string", "description": "If idToken is STS id token, then this field will be refresh token." }, "passwordHash": { "type": "string", "format": "byte", "description": "The user's hashed password." } }, "description": "Respone of setting the account information.", "id": "SetAccountInfoResponse", "type": "object" }, "IdentitytoolkitRelyingpartySignOutUserResponse": { "type": "object", "description": "Response of signing out user.", "properties": { "localId": { "type": "string", "description": "The local ID of the user." } }, "id": "IdentitytoolkitRelyingpartySignOutUserResponse" }, "IdentitytoolkitRelyingpartySetProjectConfigResponse": { "description": "Response of setting the project configuration.", "type": "object", "id": "IdentitytoolkitRelyingpartySetProjectConfigResponse", "properties": { "projectId": { "type": "string", "description": "Project ID of the relying party." } } }, "DeleteAccountResponse": { "description": "Respone of deleting account.", "id": "DeleteAccountResponse", "type": "object", "properties": { "kind": { "type": "string", "default": "identitytoolkit#DeleteAccountResponse", "description": "The fixed string \"identitytoolkit#DeleteAccountResponse\"." } } }, "Relyingparty": { "properties": { "androidMinimumVersion": { "description": "minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app", "type": "string" }, "androidInstallApp": { "description": "whether or not to install the android app on the device where the link is opened", "type": "boolean" }, "requestType": { "description": "The request type.", "type": "string" }, "challenge": { "type": "string", "description": "The recaptcha challenge presented to the user." }, "iOSBundleId": { "type": "string", "description": "the iOS bundle id of iOS app to handle the action code" }, "iOSAppStoreId": { "type": "string", "description": "iOS app store id to download the app if it's not already installed" }, "canHandleCodeInApp": { "description": "whether or not the app can handle the oob code without first going to web", "type": "boolean" }, "continueUrl": { "description": "The url to continue to the Gitkit app", "type": "string" }, "captchaResp": { "description": "The recaptcha response from the user.", "type": "string" }, "newEmail": { "description": "The new email if the code is for email change.", "type": "string" }, "userIp": { "description": "The IP address of the user.", "type": "string" }, "email": { "description": "The email of the user.", "type": "string" }, "kind": { "default": "identitytoolkit#relyingparty", "description": "The fixed string \"identitytoolkit#relyingparty\".", "type": "string" }, "androidPackageName": { "description": "android package name of the android app to handle the action code", "type": "string" }, "idToken": { "description": "The user's Gitkit login token for email change.", "type": "string" } }, "id": "Relyingparty", "type": "object", "description": "Request of getting a code for user confirmation (reset password, change email etc.)" }, "IdentitytoolkitRelyingpartyGetAccountInfoRequest": { "type": "object", "properties": { "delegatedProjectNumber": { "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.", "format": "int64", "type": "string" }, "idToken": { "type": "string", "description": "The GITKit token of the authenticated user." }, "phoneNumber": { "type": "array", "items": { "type": "string" }, "description": "Privileged caller can query users by specified phone number." }, "email": { "description": "The list of emails of the users to inquiry.", "type": "array", "items": { "type": "string" } }, "localId": { "type": "array", "description": "The list of local ID's of the users to inquiry.", "items": { "type": "string" } } }, "description": "Request to get the account information.", "id": "IdentitytoolkitRelyingpartyGetAccountInfoRequest" }, "SignupNewUserResponse": { "id": "SignupNewUserResponse", "type": "object", "properties": { "email": { "type": "string", "description": "The email of the user." }, "expiresIn": { "type": "string", "format": "int64", "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds." }, "idToken": { "description": "The Gitkit id token to login the newly sign up user.", "type": "string" }, "localId": { "type": "string", "description": "The RP local ID of the user." }, "displayName": { "description": "The name of the user.", "type": "string" }, "refreshToken": { "description": "If idToken is STS id token, then this field will be refresh token.", "type": "string" }, "kind": { "type": "string", "description": "The fixed string \"identitytoolkit#SignupNewUserResponse\".", "default": "identitytoolkit#SignupNewUserResponse" } }, "description": "Response of signing up new user, creating anonymous user or anonymous user reauth." }, "GetOobConfirmationCodeResponse": { "description": "Response of getting a code for user confirmation (reset password, change email etc.).", "type": "object", "id": "GetOobConfirmationCodeResponse", "properties": { "kind": { "type": "string", "description": "The fixed string \"identitytoolkit#GetOobConfirmationCodeResponse\".", "default": "identitytoolkit#GetOobConfirmationCodeResponse" }, "oobCode": { "description": "The code to be send to the user.", "type": "string" }, "email": { "description": "The email address that the email is sent to.", "type": "string" } } }, "EmailLinkSigninResponse": { "id": "EmailLinkSigninResponse", "properties": { "refreshToken": { "description": "The refresh token for the signed in user.", "type": "string" }, "isNewUser": { "description": "Whether the user is new.", "type": "boolean" }, "localId": { "type": "string", "description": "The RP local ID of the user." }, "email": { "type": "string", "description": "The user's email." }, "kind": { "type": "string", "description": "The fixed string \"identitytoolkit#EmailLinkSigninResponse\".", "default": "identitytoolkit#EmailLinkSigninResponse" }, "idToken": { "type": "string", "description": "The STS id token to login the newly signed in user." }, "expiresIn": { "format": "int64", "description": "Expiration time of STS id token in seconds.", "type": "string" } }, "type": "object", "description": "Response of email signIn." }, "ResetPasswordResponse": { "properties": { "requestType": { "type": "string", "description": "The request type." }, "kind": { "type": "string", "description": "The fixed string \"identitytoolkit#ResetPasswordResponse\".", "default": "identitytoolkit#ResetPasswordResponse" }, "email": { "type": "string", "description": "The user's email. If the out-of-band code is for email recovery, the user's original email." }, "newEmail": { "description": "If the out-of-band code is for email recovery, the user's new email.", "type": "string" } }, "id": "ResetPasswordResponse", "type": "object", "description": "Response of resetting the password." }, "IdentitytoolkitRelyingpartyEmailLinkSigninRequest": { "id": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest", "description": "Request to sign in with email.", "properties": { "email": { "description": "The email address of the user.", "type": "string" }, "oobCode": { "type": "string", "description": "The confirmation code." }, "idToken": { "description": "Token for linking flow.", "type": "string" } }, "type": "object" }, "IdpConfig": { "properties": { "provider": { "type": "string", "description": "OAuth2 provider." }, "clientId": { "type": "string", "description": "OAuth2 client ID." }, "secret": { "type": "string", "description": "OAuth2 client secret." }, "enabled": { "description": "Whether this IDP is enabled.", "type": "boolean" }, "experimentPercent": { "type": "integer", "description": "Percent of users who will be prompted/redirected federated login for this IDP.", "format": "int32" }, "whitelistedAudiences": { "items": { "type": "string" }, "description": "Whitelisted client IDs for audience check.", "type": "array" } }, "type": "object", "description": "Template for a single idp configuration.", "id": "IdpConfig" }, "VerifyCustomTokenResponse": { "properties": { "refreshToken": { "description": "If idToken is STS id token, then this field will be refresh token.", "type": "string" }, "kind": { "description": "The fixed string \"identitytoolkit#VerifyCustomTokenResponse\".", "type": "string", "default": "identitytoolkit#VerifyCustomTokenResponse" }, "isNewUser": { "type": "boolean", "description": "True if it's a new user sign-in, false if it's a returning user." }, "expiresIn": { "type": "string", "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.", "format": "int64" }, "idToken": { "description": "The GITKit token for authenticated user.", "type": "string" } }, "description": "Response from verifying a custom token", "id": "VerifyCustomTokenResponse", "type": "object" } }, "parameters": { "alt": { "default": "json", "description": "Data format for the response.", "location": "query", "type": "string", "enumDescriptions": [ "Responses with Content-Type of application/json" ], "enum": [ "json" ] }, "key": { "type": "string", "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location": "query" }, "prettyPrint": { "type": "boolean", "default": "true", "description": "Returns response with indentations and line breaks.", "location": "query" }, "fields": { "type": "string", "description": "Selector specifying which fields to include in a partial response.", "location": "query" }, "userIp": { "location": "query", "type": "string", "description": "Deprecated. Please use quotaUser instead." }, "quotaUser": { "type": "string", "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.", "location": "query" }, "oauth_token": { "location": "query", "type": "string", "description": "OAuth 2.0 token for the current user." } }, "ownerDomain": "google.com", "protocol": "rest", "resources": { "relyingparty": { "methods": { "getProjectConfig": { "path": "getProjectConfig", "parameters": { "projectNumber": { "description": "GCP project number of the request.", "type": "string", "location": "query" }, "delegatedProjectNumber": { "location": "query", "description": "Delegated GCP project number of the request.", "type": "string" } }, "description": "Get project configuration.", "response": { "$ref": "IdentitytoolkitRelyingpartyGetProjectConfigResponse" }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "id": "identitytoolkit.relyingparty.getProjectConfig", "httpMethod": "GET" }, "verifyPhoneNumber": { "description": "Verifies ownership of a phone number and creates/updates the user account accordingly.", "response": { "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse" }, "path": "verifyPhoneNumber", "httpMethod": "POST", "id": "identitytoolkit.relyingparty.verifyPhoneNumber", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "request": { "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest" } }, "getAccountInfo": { "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "path": "getAccountInfo", "description": "Returns the account info.", "request": { "$ref": "IdentitytoolkitRelyingpartyGetAccountInfoRequest" }, "httpMethod": "POST", "response": { "$ref": "GetAccountInfoResponse" }, "id": "identitytoolkit.relyingparty.getAccountInfo" }, "getOobConfirmationCode": { "path": "getOobConfirmationCode", "request": { "$ref": "Relyingparty" }, "description": "Get a code for user action confirmation.", "httpMethod": "POST", "id": "identitytoolkit.relyingparty.getOobConfirmationCode", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "response": { "$ref": "GetOobConfirmationCodeResponse" } }, "verifyPassword": { "description": "Verifies the user entered password.", "id": "identitytoolkit.relyingparty.verifyPassword", "httpMethod": "POST", "path": "verifyPassword", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "response": { "$ref": "VerifyPasswordResponse" }, "request": { "$ref": "IdentitytoolkitRelyingpartyVerifyPasswordRequest" } }, "getRecaptchaParam": { "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "httpMethod": "GET", "response": { "$ref": "GetRecaptchaParamResponse" }, "id": "identitytoolkit.relyingparty.getRecaptchaParam", "path": "getRecaptchaParam", "description": "Get recaptcha secure param." }, "setAccountInfo": { "description": "Set account info for a user.", "id": "identitytoolkit.relyingparty.setAccountInfo", "httpMethod": "POST", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "response": { "$ref": "SetAccountInfoResponse" }, "path": "setAccountInfo", "request": { "$ref": "IdentitytoolkitRelyingpartySetAccountInfoRequest" } }, "sendVerificationCode": { "httpMethod": "POST", "description": "Send SMS verification code.", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "path": "sendVerificationCode", "id": "identitytoolkit.relyingparty.sendVerificationCode", "request": { "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeRequest" }, "response": { "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeResponse" } }, "verifyCustomToken": { "path": "verifyCustomToken", "id": "identitytoolkit.relyingparty.verifyCustomToken", "response": { "$ref": "VerifyCustomTokenResponse" }, "request": { "$ref": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest" }, "httpMethod": "POST", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "description": "Verifies the developer asserted ID token." }, "signOutUser": { "description": "Sign out user.", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "id": "identitytoolkit.relyingparty.signOutUser", "response": { "$ref": "IdentitytoolkitRelyingpartySignOutUserResponse" }, "request": { "$ref": "IdentitytoolkitRelyingpartySignOutUserRequest" }, "httpMethod": "POST", "path": "signOutUser" }, "resetPassword": { "request": { "$ref": "IdentitytoolkitRelyingpartyResetPasswordRequest" }, "id": "identitytoolkit.relyingparty.resetPassword", "path": "resetPassword", "description": "Reset password for a user.", "httpMethod": "POST", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "response": { "$ref": "ResetPasswordResponse" } }, "getPublicKeys": { "response": { "$ref": "IdentitytoolkitRelyingpartyGetPublicKeysResponse" }, "httpMethod": "GET", "description": "Get token signing public key.", "id": "identitytoolkit.relyingparty.getPublicKeys", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "path": "publicKeys" }, "verifyAssertion": { "path": "verifyAssertion", "description": "Verifies the assertion returned by the IdP.", "response": { "$ref": "VerifyAssertionResponse" }, "id": "identitytoolkit.relyingparty.verifyAssertion", "request": { "$ref": "IdentitytoolkitRelyingpartyVerifyAssertionRequest" }, "httpMethod": "POST", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ] }, "deleteAccount": { "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "httpMethod": "POST", "request": { "$ref": "IdentitytoolkitRelyingpartyDeleteAccountRequest" }, "path": "deleteAccount", "description": "Delete user account.", "id": "identitytoolkit.relyingparty.deleteAccount", "response": { "$ref": "DeleteAccountResponse" } }, "downloadAccount": { "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/firebase" ], "response": { "$ref": "DownloadAccountResponse" }, "httpMethod": "POST", "id": "identitytoolkit.relyingparty.downloadAccount", "request": { "$ref": "IdentitytoolkitRelyingpartyDownloadAccountRequest" }, "description": "Batch download user accounts.", "path": "downloadAccount" }, "setProjectConfig": { "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "httpMethod": "POST", "description": "Set project configuration.", "response": { "$ref": "IdentitytoolkitRelyingpartySetProjectConfigResponse" }, "path": "setProjectConfig", "id": "identitytoolkit.relyingparty.setProjectConfig", "request": { "$ref": "IdentitytoolkitRelyingpartySetProjectConfigRequest" } }, "createAuthUri": { "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "response": { "$ref": "CreateAuthUriResponse" }, "description": "Creates the URI used by the IdP to authenticate the user.", "path": "createAuthUri", "request": { "$ref": "IdentitytoolkitRelyingpartyCreateAuthUriRequest" }, "httpMethod": "POST", "id": "identitytoolkit.relyingparty.createAuthUri" }, "signupNewUser": { "request": { "$ref": "IdentitytoolkitRelyingpartySignupNewUserRequest" }, "response": { "$ref": "SignupNewUserResponse" }, "id": "identitytoolkit.relyingparty.signupNewUser", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "description": "Signup new user.", "httpMethod": "POST", "path": "signupNewUser" }, "emailLinkSignin": { "id": "identitytoolkit.relyingparty.emailLinkSignin", "request": { "$ref": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest" }, "httpMethod": "POST", "response": { "$ref": "EmailLinkSigninResponse" }, "description": "Reset password for a user.", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "path": "emailLinkSignin" }, "uploadAccount": { "response": { "$ref": "UploadAccountResponse" }, "path": "uploadAccount", "scopes": [ "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/firebase" ], "id": "identitytoolkit.relyingparty.uploadAccount", "request": { "$ref": "IdentitytoolkitRelyingpartyUploadAccountRequest" }, "description": "Batch upload existing user accounts.", "httpMethod": "POST" } } } }, "servicePath": "identitytoolkit/v3/relyingparty/", "description": "Help the third party sites to implement federated login.", "canonicalName": "Identity Toolkit", "version": "v3", "basePath": "/identitytoolkit/v3/relyingparty/", "rootUrl": "https://www.googleapis.com/", "name": "identitytoolkit", "baseUrl": "https://www.googleapis.com/identitytoolkit/v3/relyingparty/", "batchPath": "batch/identitytoolkit/v3", "etag": "\"9eZ1uxVRThTDhLJCZHhqs3eQWz4/taa97NuhcHSAt0fUktvGBcH-OqE\"", "documentationLink": "https://developers.google.com/identity-toolkit/v3/", "title": "Google Identity Toolkit API", "discoveryVersion": "v1" }
]===]))
