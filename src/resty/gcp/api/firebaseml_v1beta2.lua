local decode = require("cjson").new().decode
return assert(decode([===[
{ "protocol": "rest", "title": "Firebase ML API", "version": "v1beta2", "fullyEncodeReservedExpansion": true, "name": "firebaseml", "icons": { "x32": "http://www.google.com/images/icons/product/search-32.gif", "x16": "http://www.google.com/images/icons/product/search-16.gif" }, "baseUrl": "https://firebaseml.googleapis.com/", "servicePath": "", "revision": "20220711", "discoveryVersion": "v1", "rootUrl": "https://firebaseml.googleapis.com/", "id": "firebaseml:v1beta2", "batchPath": "batch", "resources": { "projects": { "resources": { "models": { "methods": { "download": { "parameterOrder": [ "name" ], "response": { "$ref": "DownloadModelResponse" }, "parameters": { "name": { "type": "string", "pattern": "^projects/[^/]+/models/[^/]+$", "required": true, "description": "Required. The name of the model to download. The name must have the form `projects/{project}/models/{model}`", "location": "path" } }, "httpMethod": "GET", "path": "v1beta2/{+name}:download", "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}:download", "description": "Gets Download information for a model. This is meant for downloading model resources onto devices. It gives very limited information about the model.", "id": "firebaseml.projects.models.download" }, "list": { "parameters": { "parent": { "description": "Required. The name of the parent to list models for. The parent must have the form `projects/{project_id}'", "pattern": "^projects/[^/]+$", "type": "string", "required": true, "location": "path" }, "pageToken": { "location": "query", "type": "string", "description": "The next_page_token value returned from a previous List request, if any." }, "pageSize": { "description": "The maximum number of items to return", "location": "query", "format": "int32", "type": "integer" }, "filter": { "description": "A filter for the list e.g. 'tags: abc' to list models which are tagged with \"abc\"", "type": "string", "location": "query" } }, "response": { "$ref": "ListModelsResponse" }, "id": "firebaseml.projects.models.list", "parameterOrder": [ "parent" ], "flatPath": "v1beta2/projects/{projectsId}/models", "httpMethod": "GET", "description": "Lists the models", "path": "v1beta2/{+parent}/models", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ] }, "patch": { "parameters": { "name": { "type": "string", "pattern": "^projects/[^/]+/models/[^/]+$", "location": "path", "required": true, "description": "The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model." }, "updateMask": { "location": "query", "description": "The update mask", "format": "google-fieldmask", "type": "string" } }, "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}", "response": { "$ref": "Operation" }, "path": "v1beta2/{+name}", "id": "firebaseml.projects.models.patch", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "parameterOrder": [ "name" ], "request": { "$ref": "Model" }, "httpMethod": "PATCH", "description": "Updates a model. The longrunning operation will eventually return a Model." }, "get": { "description": "Gets a model resource.", "httpMethod": "GET", "parameters": { "name": { "description": "Required. The name of the model to get. The name must have the form `projects/{project_id}/models/{model_id}`", "location": "path", "required": true, "type": "string", "pattern": "^projects/[^/]+/models/[^/]+$" } }, "response": { "$ref": "Model" }, "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}", "id": "firebaseml.projects.models.get", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "path": "v1beta2/{+name}", "parameterOrder": [ "name" ] }, "create": { "httpMethod": "POST", "id": "firebaseml.projects.models.create", "request": { "$ref": "Model" }, "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "parameters": { "parent": { "location": "path", "description": "Required. The parent project resource where the model is to be created. The parent must have the form `projects/{project_id}`", "required": true, "pattern": "^projects/[^/]+$", "type": "string" } }, "response": { "$ref": "Operation" }, "path": "v1beta2/{+parent}/models", "parameterOrder": [ "parent" ], "description": "Creates a model in Firebase ML. The longrunning operation will eventually return a Model", "flatPath": "v1beta2/projects/{projectsId}/models" }, "delete": { "parameterOrder": [ "name" ], "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}", "httpMethod": "DELETE", "path": "v1beta2/{+name}", "id": "firebaseml.projects.models.delete", "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "response": { "$ref": "Empty" }, "parameters": { "name": { "type": "string", "description": "Required. The name of the model to delete. The name must have the form `projects/{project_id}/models/{model_id}`", "location": "path", "required": true, "pattern": "^projects/[^/]+/models/[^/]+$" } }, "description": "Deletes a model" } } }, "operations": { "methods": { "get": { "scopes": [ "https://www.googleapis.com/auth/cloud-platform" ], "httpMethod": "GET", "flatPath": "v1beta2/projects/{projectsId}/operations/{operationsId}", "parameters": { "name": { "required": true, "type": "string", "location": "path", "pattern": "^projects/[^/]+/operations/[^/]+$", "description": "The name of the operation resource." } }, "id": "firebaseml.projects.operations.get", "response": { "$ref": "Operation" }, "parameterOrder": [ "name" ], "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.", "path": "v1beta2/{+name}" } } } } } }, "ownerName": "Google", "mtlsRootUrl": "https://firebaseml.mtls.googleapis.com/", "canonicalName": "Firebase ML", "ownerDomain": "google.com", "documentationLink": "https://firebase.google.com", "basePath": "", "parameters": { "prettyPrint": { "type": "boolean", "location": "query", "default": "true", "description": "Returns response with indentations and line breaks." }, "callback": { "location": "query", "type": "string", "description": "JSONP" }, "uploadType": { "type": "string", "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "location": "query" }, "access_token": { "location": "query", "description": "OAuth access token.", "type": "string" }, "alt": { "default": "json", "location": "query", "enumDescriptions": [ "Responses with Content-Type of application/json", "Media download with context-dependent Content-Type", "Responses with Content-Type of application/x-protobuf" ], "description": "Data format for response.", "type": "string", "enum": [ "json", "media", "proto" ] }, "$.xgafv": { "location": "query", "type": "string", "enum": [ "1", "2" ], "description": "V1 error format.", "enumDescriptions": [ "v1 error format", "v2 error format" ] }, "oauth_token": { "location": "query", "description": "OAuth 2.0 token for the current user.", "type": "string" }, "upload_protocol": { "type": "string", "location": "query", "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")." }, "quotaUser": { "location": "query", "type": "string", "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters." }, "fields": { "location": "query", "type": "string", "description": "Selector specifying which fields to include in a partial response." }, "key": { "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location": "query", "type": "string" } }, "auth": { "oauth2": { "scopes": { "https://www.googleapis.com/auth/cloud-platform": { "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account." } } } }, "schemas": { "ModelOperationMetadata": { "description": "This is returned in the longrunning operations for create/update.", "id": "ModelOperationMetadata", "properties": { "name": { "type": "string", "description": "The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}`" }, "basicOperationStatus": { "enum": [ "BASIC_OPERATION_STATUS_UNSPECIFIED", "BASIC_OPERATION_STATUS_UPLOADING", "BASIC_OPERATION_STATUS_VERIFYING" ], "type": "string", "enumDescriptions": [ "The status is unspecified", "The model file is being uploaded", "The model file is being verified" ] } }, "type": "object" }, "Model": { "properties": { "createTime": { "type": "string", "description": "Output only. Timestamp when this model was created in Firebase ML.", "format": "google-datetime", "readOnly": true }, "state": { "description": "State common to all model types. Includes publishing and validation information.", "$ref": "ModelState" }, "modelHash": { "description": "Output only. The model_hash will change if a new file is available for download.", "readOnly": true, "type": "string" }, "name": { "description": "The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.", "type": "string" }, "tfliteModel": { "description": "A TFLite Model", "$ref": "TfLiteModel" }, "activeOperations": { "description": "Output only. Lists operation ids associated with this model whose status is NOT done.", "readOnly": true, "type": "array", "items": { "$ref": "Operation" } }, "updateTime": { "description": "Output only. Timestamp when this model was updated in Firebase ML.", "format": "google-datetime", "readOnly": true, "type": "string" }, "tags": { "type": "array", "description": "User defined tags which can be used to group/filter models during listing", "items": { "type": "string" } }, "displayName": { "type": "string", "description": "Required. The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter." }, "etag": { "type": "string", "readOnly": true, "description": "Output only. See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3" } }, "id": "Model", "type": "object", "description": "An ML model hosted in Firebase ML" }, "Status": { "id": "Status", "properties": { "details": { "type": "array", "items": { "type": "object", "additionalProperties": { "description": "Properties of the object. Contains field @type with type URL.", "type": "any" } }, "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use." }, "code": { "type": "integer", "format": "int32", "description": "The status code, which should be an enum value of google.rpc.Code." }, "message": { "type": "string", "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client." } }, "type": "object", "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)." }, "DownloadModelResponse": { "properties": { "modelFormat": { "type": "string", "description": "Output only. The format of the model being downloaded.", "enumDescriptions": [ "Unknown format", "TFLite model" ], "readOnly": true, "enum": [ "MODEL_FORMAT_UNSPECIFIED", "TFLITE" ] }, "sizeBytes": { "readOnly": true, "format": "int64", "description": "Output only. The size of the file(s), if this information is available.", "type": "string" }, "expireTime": { "type": "string", "readOnly": true, "format": "google-datetime", "description": "Output only. The time that the download URI link expires. If the link has expired, the REST call must be repeated." }, "downloadUri": { "description": "Output only. A download URI for the model/zip file.", "readOnly": true, "type": "string" } }, "description": "The response for downloading a model to device.", "id": "DownloadModelResponse", "type": "object" }, "Operation": { "description": "This resource represents a long-running operation that is the result of a network API call.", "type": "object", "properties": { "done": { "type": "boolean", "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available." }, "response": { "type": "object", "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.", "additionalProperties": { "description": "Properties of the object. Contains field @type with type URL.", "type": "any" } }, "metadata": { "type": "object", "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.", "additionalProperties": { "description": "Properties of the object. Contains field @type with type URL.", "type": "any" } }, "name": { "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.", "type": "string" }, "error": { "$ref": "Status", "description": "The error result of the operation in case of failure or cancellation." } }, "id": "Operation" }, "TfLiteModel": { "id": "TfLiteModel", "properties": { "gcsTfliteUri": { "type": "string", "description": "The TfLite file containing the model. (Stored in Google Cloud). The gcs_tflite_uri should have form: gs://some-bucket/some-model.tflite Note: If you update the file in the original location, it is necessary to call UpdateModel for ML to pick up and validate the updated file." }, "automlModel": { "type": "string", "description": "The AutoML model id referencing a model you created with the AutoML API. The name should have format 'projects//locations//models/' (This is the model resource name returned from the AutoML API)" }, "sizeBytes": { "description": "Output only. The size of the TFLite model", "readOnly": true, "type": "string" } }, "description": "Information that is specific to TfLite models.", "type": "object" }, "ListModelsResponse": { "properties": { "models": { "description": "The list of models", "type": "array", "items": { "$ref": "Model" } }, "nextPageToken": { "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.", "type": "string" } }, "description": "The response for list models", "type": "object", "id": "ListModelsResponse" }, "Empty": { "type": "object", "properties": {}, "id": "Empty", "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }" }, "ModelState": { "type": "object", "description": "State common to all model types. Includes publishing and validation information.", "id": "ModelState", "properties": { "validationError": { "$ref": "Status", "description": "Output only. Indicates the latest validation error on the model if any. A model may have validation errors if there were problems during the model creation/update. e.g. in the case of a TfLiteModel, if a tflite model file was missing or in the wrong format. This field will be empty for valid models.", "readOnly": true }, "published": { "type": "boolean", "description": "Indicates if this model has been published." } } } }, "kind": "discovery#restDescription", "version_module": true, "description": "Access custom machine learning models hosted via Firebase ML." }
]===]))
