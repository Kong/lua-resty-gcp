local decode = require("cjson").new().decode
return assert(decode([===[
{ "batchPath": "batch", "rootUrl": "https://groupsmigration.googleapis.com/", "schemas": { "Groups": { "description": "JSON response template for groups migration API.", "properties": { "kind": { "description": "The kind of insert resource this is.", "type": "string" }, "responseCode": { "type": "string", "description": "The status of the insert request." } }, "type": "object", "id": "Groups" } }, "auth": { "oauth2": { "scopes": { "https://www.googleapis.com/auth/apps.groups.migration": { "description": "Upload messages to any Google group in your domain" } } } }, "icons": { "x32": "http://www.google.com/images/icons/product/search-32.gif", "x16": "http://www.google.com/images/icons/product/search-16.gif" }, "servicePath": "", "ownerName": "Google", "canonicalName": "Groups Migration", "kind": "discovery#restDescription", "description": "The Groups Migration API allows domain administrators to archive emails into Google groups.", "name": "groupsmigration", "resources": { "archive": { "methods": { "insert": { "httpMethod": "POST", "supportsMediaUpload": true, "parameters": { "groupId": { "location": "path", "type": "string", "required": true, "description": "The group ID" } }, "id": "groupsmigration.archive.insert", "parameterOrder": [ "groupId" ], "scopes": [ "https://www.googleapis.com/auth/apps.groups.migration" ], "flatPath": "groups/v1/groups/{groupId}/archive", "path": "groups/v1/groups/{groupId}/archive", "mediaUpload": { "maxSize": "26214400", "protocols": { "simple": { "path": "/upload/groups/v1/groups/{groupId}/archive", "multipart": true } }, "accept": [ "message/rfc822" ] }, "response": { "$ref": "Groups" }, "description": "Inserts a new mail into the archive of the Google group." } } } }, "basePath": "", "discoveryVersion": "v1", "protocol": "rest", "id": "groupsmigration:v1", "version": "v1", "baseUrl": "https://groupsmigration.googleapis.com/", "documentationLink": "https://developers.google.com/google-apps/groups-migration/", "parameters": { "fields": { "location": "query", "type": "string", "description": "Selector specifying which fields to include in a partial response." }, "upload_protocol": { "location": "query", "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").", "type": "string" }, "quotaUser": { "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.", "location": "query", "type": "string" }, "prettyPrint": { "description": "Returns response with indentations and line breaks.", "type": "boolean", "default": "true", "location": "query" }, "callback": { "location": "query", "type": "string", "description": "JSONP" }, "access_token": { "description": "OAuth access token.", "location": "query", "type": "string" }, "key": { "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "type": "string", "location": "query" }, "alt": { "enumDescriptions": [ "Responses with Content-Type of application/json", "Media download with context-dependent Content-Type", "Responses with Content-Type of application/x-protobuf" ], "default": "json", "description": "Data format for response.", "location": "query", "enum": [ "json", "media", "proto" ], "type": "string" }, "$.xgafv": { "enumDescriptions": [ "v1 error format", "v2 error format" ], "description": "V1 error format.", "location": "query", "enum": [ "1", "2" ], "type": "string" }, "oauth_token": { "location": "query", "description": "OAuth 2.0 token for the current user.", "type": "string" }, "uploadType": { "location": "query", "type": "string", "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")." } }, "title": "Groups Migration API", "revision": "20220609", "mtlsRootUrl": "https://groupsmigration.mtls.googleapis.com/", "ownerDomain": "google.com" }
]===]))
