{
  "schemas": {
    "Request": {
      "properties": {
        "deleteItem": {
          "description": "Delete an item.",
          "$ref": "DeleteItemRequest"
        },
        "createItem": {
          "$ref": "CreateItemRequest",
          "description": "Create a new item."
        },
        "updateItem": {
          "$ref": "UpdateItemRequest",
          "description": "Update an item."
        },
        "moveItem": {
          "$ref": "MoveItemRequest",
          "description": "Move an item to a specified location."
        },
        "updateFormInfo": {
          "description": "Update Form's Info.",
          "$ref": "UpdateFormInfoRequest"
        },
        "updateSettings": {
          "$ref": "UpdateSettingsRequest",
          "description": "Updates the Form's settings."
        }
      },
      "id": "Request",
      "description": "The kinds of update requests that can be made.",
      "type": "object"
    },
    "ScaleQuestion": {
      "id": "ScaleQuestion",
      "properties": {
        "high": {
          "type": "integer",
          "description": "Required. The highest possible value for the scale.",
          "format": "int32"
        },
        "lowLabel": {
          "type": "string",
          "description": "The label to display describing the lowest point on the scale."
        },
        "highLabel": {
          "type": "string",
          "description": "The label to display describing the highest point on the scale."
        },
        "low": {
          "type": "integer",
          "format": "int32",
          "description": "Required. The lowest possible value for the scale."
        }
      },
      "type": "object",
      "description": "A scale question. The user has a range of numeric values to choose from."
    },
    "TextAnswers": {
      "type": "object",
      "description": "A question's answers as text.",
      "id": "TextAnswers",
      "properties": {
        "answers": {
          "type": "array",
          "items": {
            "$ref": "TextAnswer"
          },
          "description": "Output only. Answers to a question. For multiple-value ChoiceQuestions, each answer is a separate value.",
          "readOnly": true
        }
      }
    },
    "QuestionItem": {
      "id": "QuestionItem",
      "properties": {
        "question": {
          "$ref": "Question",
          "description": "Required. The displayed question."
        },
        "image": {
          "$ref": "Image",
          "description": "The image displayed within the question."
        }
      },
      "description": "A form item containing a single question.",
      "type": "object"
    },
    "MediaProperties": {
      "description": "Properties of the media.",
      "id": "MediaProperties",
      "type": "object",
      "properties": {
        "alignment": {
          "enum": [
            "ALIGNMENT_UNSPECIFIED",
            "LEFT",
            "RIGHT",
            "CENTER"
          ],
          "type": "string",
          "description": "Position of the media.",
          "enumDescriptions": [
            "Default value. Unused.",
            "Left align.",
            "Right align.",
            "Center."
          ]
        },
        "width": {
          "type": "integer",
          "description": "The width of the media in pixels. When the media is displayed, it is scaled to the smaller of this value or the width of the displayed form. The original aspect ratio of the media is preserved. If a width is not specified when the media is added to the form, it is set to the width of the media source. Width must be between 0 and 740, inclusive. Setting width to 0 or unspecified is only permitted when updating the media source.",
          "format": "int32"
        }
      }
    },
    "VideoLink": {
      "type": "object",
      "description": "Link to a video.",
      "properties": {
        "displayText": {
          "description": "Required. The display text for the link.",
          "type": "string"
        },
        "youtubeUri": {
          "type": "string",
          "description": "The URI of a YouTube video."
        }
      },
      "id": "VideoLink"
    },
    "ExtraMaterial": {
      "id": "ExtraMaterial",
      "description": "Supplementary material to the feedback.",
      "type": "object",
      "properties": {
        "video": {
          "$ref": "VideoLink",
          "description": "Video feedback."
        },
        "link": {
          "description": "Text feedback.",
          "$ref": "TextLink"
        }
      }
    },
    "Grid": {
      "id": "Grid",
      "type": "object",
      "properties": {
        "columns": {
          "$ref": "ChoiceQuestion",
          "description": "Required. The choices shared by each question in the grid. In other words, the values of the columns. Only `CHECK_BOX` and `RADIO` choices are allowed."
        },
        "shuffleQuestions": {
          "type": "boolean",
          "description": "If `true`, the questions are randomly ordered. In other words, the rows appear in a different order for every respondent."
        }
      },
      "description": "A grid of choices (radio or check boxes) with each row constituting a separate question. Each row has the same choices, which are shown as the columns."
    },
    "ImageItem": {
      "type": "object",
      "properties": {
        "image": {
          "description": "Required. The image displayed in the item.",
          "$ref": "Image"
        }
      },
      "id": "ImageItem",
      "description": "An item containing an image."
    },
    "Grade": {
      "type": "object",
      "description": "Grade information associated with a respondent's answer to a question.",
      "id": "Grade",
      "properties": {
        "correct": {
          "type": "boolean",
          "description": "Output only. Whether the question was answered correctly or not. A zero-point score is not enough to infer incorrectness, since a correctly answered question could be worth zero points.",
          "readOnly": true
        },
        "score": {
          "type": "number",
          "description": "Output only. The numeric score awarded for the answer.",
          "format": "double",
          "readOnly": true
        },
        "feedback": {
          "description": "Output only. Additional feedback given for an answer.",
          "readOnly": true,
          "$ref": "Feedback"
        }
      }
    },
    "Grading": {
      "id": "Grading",
      "properties": {
        "correctAnswers": {
          "description": "Required. The answer key for the question. Responses are automatically graded based on this field.",
          "$ref": "CorrectAnswers"
        },
        "whenWrong": {
          "description": "The feedback displayed for incorrect responses. This feedback can only be set for multiple choice questions that have correct answers provided.",
          "$ref": "Feedback"
        },
        "pointValue": {
          "format": "int32",
          "description": "Required. The maximum number of points a respondent can automatically get for a correct answer. This must not be negative.",
          "type": "integer"
        },
        "generalFeedback": {
          "description": "The feedback displayed for all answers. This is commonly used for short answer questions when a quiz owner wants to quickly give respondents some sense of whether they answered the question correctly before they've had a chance to officially grade the response. General feedback cannot be set for automatically graded multiple choice questions.",
          "$ref": "Feedback"
        },
        "whenRight": {
          "description": "The feedback displayed for correct responses. This feedback can only be set for multiple choice questions that have correct answers provided.",
          "$ref": "Feedback"
        }
      },
      "type": "object",
      "description": "Grading for a single question"
    },
    "Option": {
      "id": "Option",
      "properties": {
        "isOther": {
          "type": "boolean",
          "description": "Whether the option is \"other\". Currently only applies to `RADIO` and `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem."
        },
        "value": {
          "description": "Required. The choice as presented to the user.",
          "type": "string"
        },
        "goToAction": {
          "description": "Section navigation type.",
          "enum": [
            "GO_TO_ACTION_UNSPECIFIED",
            "NEXT_SECTION",
            "RESTART_FORM",
            "SUBMIT_FORM"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value. Unused.",
            "Go to the next section.",
            "Go back to the beginning of the form.",
            "Submit form immediately."
          ]
        },
        "image": {
          "$ref": "Image",
          "description": "Display image as an option."
        },
        "goToSectionId": {
          "description": "Item ID of section header to go to.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "An option for a Choice question."
    },
    "TextAnswer": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The answer value. Formatting used for different kinds of question: * ChoiceQuestion * `RADIO` or `DROP_DOWN`: A single string corresponding to the option that was selected. * `CHECKBOX`: Multiple strings corresponding to each option that was selected. * TextQuestion: The text that the user entered. * ScaleQuestion: A string containing the number that was selected. * DateQuestion * Without time or year: MM-DD e.g. \"05-19\" * With year: YYYY-MM-DD e.g. \"1986-05-19\" * With time: MM-DD HH:MM e.g. \"05-19 14:51\" * With year and time: YYYY-MM-DD HH:MM e.g. \"1986-05-19 14:51\" * TimeQuestion: String with time or duration in HH:MM format e.g. \"14:51\" * RowQuestion within QuestionGroupItem: The answer for each row of a QuestionGroupItem is represented as a separate Answer. Each will contain one string for `RADIO`-type choices or multiple strings for `CHECKBOX` choices."
        }
      },
      "id": "TextAnswer",
      "description": "An answer to a question represented as text."
    },
    "UpdateSettingsRequest": {
      "type": "object",
      "properties": {
        "updateMask": {
          "type": "string",
          "format": "google-fieldmask",
          "description": "Required. Only values named in this mask are changed. At least one field must be specified. The root `settings` is implied and should not be specified. A single `\"*\"` can be used as short-hand for updating every field."
        },
        "settings": {
          "$ref": "FormSettings",
          "description": "Required. The settings to update with."
        }
      },
      "id": "UpdateSettingsRequest",
      "description": "Update Form's FormSettings."
    },
    "Form": {
      "description": "A Google Forms document. A form is created in Drive, and deleting a form or changing its access protections is done via the [Drive API](https://developers.google.com/drive/api/v3/about-sdk).",
      "id": "Form",
      "type": "object",
      "properties": {
        "info": {
          "description": "Required. The title and description of the form.",
          "$ref": "Info"
        },
        "settings": {
          "description": "The form's settings. This must be updated with UpdateSettingsRequest; it is ignored during `forms.create` and UpdateFormInfoRequest.",
          "$ref": "FormSettings"
        },
        "linkedSheetId": {
          "readOnly": true,
          "description": "Output only. The ID of the linked Google Sheet which is accumulating responses from this Form (if such a Sheet exists).",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Item"
          },
          "description": "Required. A list of the form's items, which can include section headers, questions, embedded media, etc.",
          "type": "array"
        },
        "formId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The form ID."
        },
        "revisionId": {
          "type": "string",
          "description": "Output only. The revision ID of the form. Used in the WriteControl in update requests to identify the revision on which the changes are based. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the form has not changed. Conversely, a changed ID (for the same form and user) usually means the form has been updated; however, a changed ID can also be due to internal factors such as ID format changes.",
          "readOnly": true
        },
        "responderUri": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The form URI to share with responders. This opens a page that allows the user to submit responses but not edit the questions."
        }
      }
    },
    "DeleteItemRequest": {
      "type": "object",
      "id": "DeleteItemRequest",
      "properties": {
        "location": {
          "description": "Required. The location of the item to delete.",
          "$ref": "Location"
        }
      },
      "description": "Delete an item in a form."
    },
    "BatchUpdateFormResponse": {
      "properties": {
        "writeControl": {
          "$ref": "WriteControl",
          "description": "The updated write control after applying the request."
        },
        "replies": {
          "description": "The reply of the updates. This maps 1:1 with the update requests, although replies to some requests may be empty.",
          "items": {
            "$ref": "Response"
          },
          "type": "array"
        },
        "form": {
          "$ref": "Form",
          "description": "Based on the bool request field `include_form_in_response`, a form with all applied mutations/updates is returned or not. This may be later than the revision ID created by these changes."
        }
      },
      "id": "BatchUpdateFormResponse",
      "type": "object",
      "description": "Response to a BatchUpdateFormRequest."
    },
    "ChoiceQuestion": {
      "type": "object",
      "id": "ChoiceQuestion",
      "properties": {
        "options": {
          "type": "array",
          "description": "Required. List of options that a respondent must choose from.",
          "items": {
            "$ref": "Option"
          }
        },
        "type": {
          "enumDescriptions": [
            "Default value. Unused.",
            "Radio buttons: All choices are shown to the user, who can only pick one of them.",
            "Checkboxes: All choices are shown to the user, who can pick any number of them.",
            "Drop-down menu: The choices are only shown to the user on demand, otherwise only the current choice is shown. Only one option can be chosen."
          ],
          "type": "string",
          "enum": [
            "CHOICE_TYPE_UNSPECIFIED",
            "RADIO",
            "CHECKBOX",
            "DROP_DOWN"
          ],
          "description": "Required. The type of choice question."
        },
        "shuffle": {
          "type": "boolean",
          "description": "Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last."
        }
      },
      "description": "A radio/checkbox/dropdown question."
    },
    "UpdateItemRequest": {
      "type": "object",
      "description": "Update an item in a form.",
      "properties": {
        "item": {
          "$ref": "Item",
          "description": "Required. New values for the item. Note that item and question IDs are used if they are provided (and are in the field mask). If an ID is blank (and in the field mask) a new ID is generated. This means you can modify an item by getting the form via forms.get, modifying your local copy of that item to be how you want it, and using UpdateItemRequest to write it back, with the IDs being the same (or not in the field mask)."
        },
        "location": {
          "$ref": "Location",
          "description": "Required. The location identifying the item to update."
        },
        "updateMask": {
          "description": "Required. Only values named in this mask are changed.",
          "type": "string",
          "format": "google-fieldmask"
        }
      },
      "id": "UpdateItemRequest"
    },
    "ListFormResponsesResponse": {
      "description": "Response to a ListFormResponsesRequest.",
      "id": "ListFormResponsesResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "If set, there are more responses. To get the next page of responses, provide this as `page_token` in a future request.",
          "type": "string"
        },
        "responses": {
          "items": {
            "$ref": "FormResponse"
          },
          "description": "The returned responses.",
          "type": "array"
        }
      }
    },
    "MoveItemRequest": {
      "id": "MoveItemRequest",
      "properties": {
        "newLocation": {
          "$ref": "Location",
          "description": "Required. The new location for the item."
        },
        "originalLocation": {
          "$ref": "Location",
          "description": "Required. The location of the item to move."
        }
      },
      "description": "Move an item in a form.",
      "type": "object"
    },
    "Image": {
      "description": "Data representing an image.",
      "properties": {
        "contentUri": {
          "readOnly": true,
          "description": "Output only. A URI from which you can download the image; this is valid only for a limited time.",
          "type": "string"
        },
        "sourceUri": {
          "description": "Input only. The source URI is the URI used to insert the image. The source URI can be empty when fetched.",
          "type": "string"
        },
        "altText": {
          "description": "A description of the image that is shown on hover and read by screenreaders.",
          "type": "string"
        },
        "properties": {
          "description": "Properties of an image.",
          "$ref": "MediaProperties"
        }
      },
      "type": "object",
      "id": "Image"
    },
    "FileUploadQuestion": {
      "type": "object",
      "description": "A file upload question. The API currently does not support creating file upload questions.",
      "id": "FileUploadQuestion",
      "properties": {
        "folderId": {
          "type": "string",
          "description": "Required. The ID of the Drive folder where uploaded files are stored."
        },
        "types": {
          "items": {
            "enum": [
              "FILE_TYPE_UNSPECIFIED",
              "ANY",
              "DOCUMENT",
              "PRESENTATION",
              "SPREADSHEET",
              "DRAWING",
              "PDF",
              "IMAGE",
              "VIDEO",
              "AUDIO"
            ],
            "type": "string",
            "enumDescriptions": [
              "Default value. Unused.",
              "No restrictions on type.",
              "A Google Docs document.",
              "A Google Slides presentation.",
              "A Google Sheets spreadsheet.",
              "A drawing.",
              "A PDF.",
              "An image.",
              "A video.",
              "An audio file."
            ]
          },
          "description": "File types accepted by this question.",
          "type": "array"
        },
        "maxFiles": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of files that can be uploaded for this question in a single response."
        },
        "maxFileSize": {
          "description": "Maximum number of bytes allowed for any single file uploaded to this question.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "BatchUpdateFormRequest": {
      "description": "A batch of updates to perform on a form. All the specified updates are made or none of them are.",
      "type": "object",
      "properties": {
        "requests": {
          "items": {
            "$ref": "Request"
          },
          "type": "array",
          "description": "Required. The update requests of this batch."
        },
        "includeFormInResponse": {
          "type": "boolean",
          "description": "Whether to return an updated version of the model in the response."
        },
        "writeControl": {
          "description": "Provides control over how write requests are executed.",
          "$ref": "WriteControl"
        }
      },
      "id": "BatchUpdateFormRequest"
    },
    "PageBreakItem": {
      "id": "PageBreakItem",
      "properties": {},
      "type": "object",
      "description": "A page break. The title and description of this item are shown at the top of the new page."
    },
    "ListWatchesResponse": {
      "description": "The response of a ListWatchesRequest.",
      "type": "object",
      "properties": {
        "watches": {
          "description": "The returned watches.",
          "type": "array",
          "items": {
            "$ref": "Watch"
          }
        }
      },
      "id": "ListWatchesResponse"
    },
    "CreateWatchRequest": {
      "description": "Create a new watch.",
      "id": "CreateWatchRequest",
      "properties": {
        "watchId": {
          "type": "string",
          "description": "The ID to use for the watch. If specified, the ID must not already be in use. If not specified, an ID is generated. This value should be 4-63 characters, and valid characters are /a-z-/."
        },
        "watch": {
          "description": "Required. The watch object. No ID should be set on this object; use `watch_id` instead.",
          "$ref": "Watch"
        }
      },
      "type": "object"
    },
    "Watch": {
      "description": "A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew",
      "properties": {
        "eventType": {
          "type": "string",
          "enumDescriptions": [
            "Unspecified event type. This value should not be used.",
            "The schema event type. A watch with this event type will be notified about changes to form content and settings.",
            "The responses event type. A watch with this event type will be notified when form responses are submitted."
          ],
          "description": "Required. Which event type to watch for.",
          "enum": [
            "EVENT_TYPE_UNSPECIFIED",
            "SCHEMA",
            "RESPONSES"
          ]
        },
        "expireTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future."
        },
        "state": {
          "enumDescriptions": [
            "Unspecified state.",
            "Watch is active.",
            "The watch is suspended due to an error that may be resolved. The watch will continue to exist until it expires. To attempt to reactivate the watch a call can be made to watches.renew"
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "SUSPENDED"
          ],
          "readOnly": true,
          "description": "Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.",
          "type": "string"
        },
        "id": {
          "readOnly": true,
          "description": "Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.",
          "type": "string"
        },
        "errorType": {
          "description": "Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.",
          "enum": [
            "ERROR_TYPE_UNSPECIFIED",
            "PROJECT_NOT_AUTHORIZED",
            "NO_USER_ACCESS",
            "OTHER_ERRORS"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "Unspecified error type.",
            "The cloud project does not have access to the form being watched. This occurs if the user has revoked the authorization for your project to access their form(s). Watches with this error will not be retried. To attempt to begin watching the form again a call can be made to watches.renew",
            "The user that granted access no longer has access to the form being watched. Watches with this error will not be retried. To attempt to begin watching the form again a call can be made to watches.renew",
            "Another type of error has occurred. Whether notifications will continue depends on the watch state."
          ],
          "type": "string"
        },
        "target": {
          "$ref": "WatchTarget",
          "description": "Required. Where to send the notification."
        },
        "createTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Timestamp of when this was created."
        }
      },
      "type": "object",
      "id": "Watch"
    },
    "Answer": {
      "properties": {
        "textAnswers": {
          "readOnly": true,
          "description": "Output only. The specific answers as text.",
          "$ref": "TextAnswers"
        },
        "grade": {
          "readOnly": true,
          "description": "Output only. The grade for the answer if the form was a quiz.",
          "$ref": "Grade"
        },
        "fileUploadAnswers": {
          "description": "Output only. The answers to a file upload question.",
          "readOnly": true,
          "$ref": "FileUploadAnswers"
        },
        "questionId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The question's ID. See also Question.question_id."
        }
      },
      "type": "object",
      "description": "The submitted answer for a question.",
      "id": "Answer"
    },
    "DateQuestion": {
      "id": "DateQuestion",
      "type": "object",
      "description": "A date question. Date questions default to just month + day.",
      "properties": {
        "includeTime": {
          "type": "boolean",
          "description": "Whether to include the time as part of the question."
        },
        "includeYear": {
          "description": "Whether to include the year as part of the question.",
          "type": "boolean"
        }
      }
    },
    "UpdateFormInfoRequest": {
      "type": "object",
      "id": "UpdateFormInfoRequest",
      "properties": {
        "updateMask": {
          "type": "string",
          "description": "Required. Only values named in this mask are changed. At least one field must be specified. The root `info` is implied and should not be specified. A single `\"*\"` can be used as short-hand for updating every field.",
          "format": "google-fieldmask"
        },
        "info": {
          "$ref": "Info",
          "description": "The info to update."
        }
      },
      "description": "Update Form's Info."
    },
    "Location": {
      "id": "Location",
      "type": "object",
      "properties": {
        "index": {
          "description": "The index of an item in the form. This must be in the range [0..*N*), where *N* is the number of items in the form.",
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "A specific location in a form."
    },
    "WriteControl": {
      "id": "WriteControl",
      "type": "object",
      "description": "Provides control over how write requests are executed.",
      "properties": {
        "requiredRevisionId": {
          "description": "The revision ID of the form that the write request is applied to. If this is not the latest revision of the form, the request is not processed and returns a 400 bad request error.",
          "type": "string"
        },
        "targetRevisionId": {
          "type": "string",
          "description": "The target revision ID of the form that the write request is applied to. If changes have occurred after this revision, the changes in this update request are transformed against those changes. This results in a new revision of the form that incorporates both the changes in the request and the intervening changes, with the server resolving conflicting changes. The target revision ID may only be used to write to recent versions of a form. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 (Bad Request Error). The request may be retried after reading the latest version of the form. In most cases a target revision ID remains valid for several minutes after it is read, but for frequently-edited forms this window may be shorter."
        }
      }
    },
    "TextLink": {
      "description": "Link for text.",
      "id": "TextLink",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Required. The URI."
        },
        "displayText": {
          "type": "string",
          "description": "Required. Display text for the URI."
        }
      },
      "type": "object"
    },
    "Feedback": {
      "id": "Feedback",
      "properties": {
        "text": {
          "type": "string",
          "description": "Required. The main text of the feedback."
        },
        "material": {
          "items": {
            "$ref": "ExtraMaterial"
          },
          "type": "array",
          "description": "Additional information provided as part of the feedback, often used to point the respondent to more reading and resources."
        }
      },
      "type": "object",
      "description": "Feedback for a respondent about their response to a question."
    },
    "CreateItemRequest": {
      "description": "Create an item in a form.",
      "properties": {
        "item": {
          "$ref": "Item",
          "description": "Required. The item to create."
        },
        "location": {
          "description": "Required. Where to place the new item.",
          "$ref": "Location"
        }
      },
      "type": "object",
      "id": "CreateItemRequest"
    },
    "CreateItemResponse": {
      "id": "CreateItemResponse",
      "description": "The result of creating an item.",
      "type": "object",
      "properties": {
        "itemId": {
          "description": "The ID of the created item.",
          "type": "string"
        },
        "questionId": {
          "type": "array",
          "description": "The ID of the question created as part of this item, for a question group it lists IDs of all the questions created for this item.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Video": {
      "description": "Data representing a video.",
      "properties": {
        "properties": {
          "$ref": "MediaProperties",
          "description": "Properties of a video."
        },
        "youtubeUri": {
          "description": "Required. A YouTube URI.",
          "type": "string"
        }
      },
      "id": "Video",
      "type": "object"
    },
    "CorrectAnswer": {
      "description": "A single correct answer for a question. For multiple-valued (`CHECKBOX`) questions, several `CorrectAnswer`s may be needed to represent a single correct response option.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Required. The correct answer value. See the documentation for TextAnswer.value for details on how various value types are formatted.",
          "type": "string"
        }
      },
      "id": "CorrectAnswer"
    },
    "Info": {
      "type": "object",
      "description": "The general information for a form.",
      "properties": {
        "title": {
          "type": "string",
          "description": "Required. The title of the form which is visible to responders."
        },
        "description": {
          "description": "The description of the form.",
          "type": "string"
        },
        "documentTitle": {
          "readOnly": true,
          "description": "Output only. The title of the document which is visible in Drive. If `Info.title` is empty, `document_title` may appear in its place in the Google Forms UI and be visible to responders. `document_title` can be set on create, but cannot be modified by a batchUpdate request. Please use the [Google Drive API](https://developers.google.com/drive/api/v3/reference/files/update) if you need to programmatically update `document_title`.",
          "type": "string"
        }
      },
      "id": "Info"
    },
    "FormResponse": {
      "properties": {
        "answers": {
          "additionalProperties": {
            "$ref": "Answer"
          },
          "readOnly": true,
          "type": "object",
          "description": "Output only. The actual answers to the questions, keyed by question_id."
        },
        "respondentEmail": {
          "type": "string",
          "description": "Output only. The email address (if collected) for the respondent.",
          "readOnly": true
        },
        "responseId": {
          "readOnly": true,
          "description": "Output only. The response ID.",
          "type": "string"
        },
        "totalScore": {
          "type": "number",
          "format": "double",
          "description": "Output only. The total number of points the respondent received for their submission Only set if the form was a quiz and the response was graded. This includes points automatically awarded via autograding adjusted by any manual corrections entered by the form owner.",
          "readOnly": true
        },
        "formId": {
          "readOnly": true,
          "description": "Output only. The form ID.",
          "type": "string"
        },
        "lastSubmittedTime": {
          "description": "Output only. Timestamp for the most recent time the response was submitted. Does not track changes to grades.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "createTime": {
          "format": "google-datetime",
          "readOnly": true,
          "type": "string",
          "description": "Output only. Timestamp for the first time the response was submitted."
        }
      },
      "description": "A form response.",
      "id": "FormResponse",
      "type": "object"
    },
    "CorrectAnswers": {
      "id": "CorrectAnswers",
      "type": "object",
      "description": "The answer key for a question.",
      "properties": {
        "answers": {
          "items": {
            "$ref": "CorrectAnswer"
          },
          "description": "A list of correct answers. A quiz response can be automatically graded based on these answers. For single-valued questions, a response is marked correct if it matches any value in this list (in other words, multiple correct answers are possible). For multiple-valued (`CHECKBOX`) questions, a response is marked correct if it contains exactly the values in this list.",
          "type": "array"
        }
      }
    },
    "Question": {
      "type": "object",
      "id": "Question",
      "description": "Any question. The specific type of question is known by its `kind`.",
      "properties": {
        "rowQuestion": {
          "description": "A row of a QuestionGroupItem.",
          "$ref": "RowQuestion"
        },
        "required": {
          "description": "Whether the question must be answered in order for a respondent to submit their response.",
          "type": "boolean"
        },
        "choiceQuestion": {
          "description": "A respondent can choose from a pre-defined set of options.",
          "$ref": "ChoiceQuestion"
        },
        "fileUploadQuestion": {
          "$ref": "FileUploadQuestion",
          "description": "A respondent can upload one or more files."
        },
        "grading": {
          "description": "Grading setup for the question.",
          "$ref": "Grading"
        },
        "scaleQuestion": {
          "description": "A respondent can choose a number from a range.",
          "$ref": "ScaleQuestion"
        },
        "questionId": {
          "type": "string",
          "description": "Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned."
        },
        "timeQuestion": {
          "$ref": "TimeQuestion",
          "description": "A respondent can enter a time."
        },
        "dateQuestion": {
          "$ref": "DateQuestion",
          "description": "A respondent can enter a date."
        },
        "textQuestion": {
          "$ref": "TextQuestion",
          "description": "A respondent can enter a free text response."
        }
      }
    },
    "TimeQuestion": {
      "id": "TimeQuestion",
      "type": "object",
      "properties": {
        "duration": {
          "description": "`true` if the question is about an elapsed time. Otherwise it is about a time of day.",
          "type": "boolean"
        }
      },
      "description": "A time question."
    },
    "Item": {
      "type": "object",
      "properties": {
        "pageBreakItem": {
          "$ref": "PageBreakItem",
          "description": "Starts a new page with a title."
        },
        "questionItem": {
          "$ref": "QuestionItem",
          "description": "Poses a question to the user."
        },
        "imageItem": {
          "description": "Displays an image on the page.",
          "$ref": "ImageItem"
        },
        "title": {
          "description": "The title of the item.",
          "type": "string"
        },
        "videoItem": {
          "description": "Displays a video on the page.",
          "$ref": "VideoItem"
        },
        "description": {
          "type": "string",
          "description": "The description of the item."
        },
        "itemId": {
          "type": "string",
          "description": "The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned."
        },
        "questionGroupItem": {
          "$ref": "QuestionGroupItem",
          "description": "Poses one or more questions to the user with a single major prompt."
        },
        "textItem": {
          "description": "Displays a title and description on the page.",
          "$ref": "TextItem"
        }
      },
      "id": "Item",
      "description": "A single item of the form. `kind` defines which kind of item it is."
    },
    "QuizSettings": {
      "description": "Settings related to quiz forms and grading. These must be updated with the UpdateSettingsRequest.",
      "properties": {
        "isQuiz": {
          "description": "Whether this form is a quiz or not. When true, responses are graded based on question Grading. Upon setting to false, all question Grading is deleted.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "QuizSettings"
    },
    "WatchTarget": {
      "properties": {
        "topic": {
          "description": "A Pub/Sub topic. To receive notifications, the topic must grant publish privileges to the Forms service account `serviceAccount:forms-notifications@system.gserviceaccount.com`. Only the project that owns a topic may create a watch with it. Pub/Sub delivery guarantees should be considered.",
          "$ref": "CloudPubsubTopic"
        }
      },
      "description": "The target for notification delivery.",
      "type": "object",
      "id": "WatchTarget"
    },
    "TextQuestion": {
      "id": "TextQuestion",
      "type": "object",
      "description": "A text-based question.",
      "properties": {
        "paragraph": {
          "description": "Whether the question is a paragraph question or not. If not, the question is a short text question.",
          "type": "boolean"
        }
      }
    },
    "CloudPubsubTopic": {
      "id": "CloudPubsubTopic",
      "type": "object",
      "properties": {
        "topicName": {
          "type": "string",
          "description": "Required. A fully qualified Pub/Sub topic name to publish the events to. This topic must be owned by the calling project and already exist in Pub/Sub."
        }
      },
      "description": "A Pub/Sub topic."
    },
    "RowQuestion": {
      "properties": {
        "title": {
          "description": "Required. The title for the single row in the QuestionGroupItem.",
          "type": "string"
        }
      },
      "description": "Configuration for a question that is part of a question group.",
      "id": "RowQuestion",
      "type": "object"
    },
    "FileUploadAnswer": {
      "properties": {
        "fileName": {
          "type": "string",
          "description": "Output only. The file name, as stored in Google Drive on upload.",
          "readOnly": true
        },
        "mimeType": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The MIME type of the file, as stored in Google Drive on upload."
        },
        "fileId": {
          "type": "string",
          "description": "Output only. The ID of the Google Drive file.",
          "readOnly": true
        }
      },
      "id": "FileUploadAnswer",
      "type": "object",
      "description": "Info for a single file submitted to a file upload question."
    },
    "TextItem": {
      "description": "A text item.",
      "type": "object",
      "id": "TextItem",
      "properties": {}
    },
    "Response": {
      "properties": {
        "createItem": {
          "description": "The result of creating an item.",
          "$ref": "CreateItemResponse"
        }
      },
      "description": "A single response from an update.",
      "type": "object",
      "id": "Response"
    },
    "FileUploadAnswers": {
      "id": "FileUploadAnswers",
      "type": "object",
      "description": "All submitted files for a FileUpload question.",
      "properties": {
        "answers": {
          "items": {
            "$ref": "FileUploadAnswer"
          },
          "type": "array",
          "readOnly": true,
          "description": "Output only. All submitted files for a FileUpload question."
        }
      }
    },
    "FormSettings": {
      "type": "object",
      "description": "A form's settings.",
      "properties": {
        "quizSettings": {
          "description": "Settings related to quiz forms and grading.",
          "$ref": "QuizSettings"
        }
      },
      "id": "FormSettings"
    },
    "VideoItem": {
      "description": "An item containing a video.",
      "type": "object",
      "properties": {
        "caption": {
          "description": "The text displayed below the video.",
          "type": "string"
        },
        "video": {
          "description": "Required. The video displayed in the item.",
          "$ref": "Video"
        }
      },
      "id": "VideoItem"
    },
    "QuestionGroupItem": {
      "id": "QuestionGroupItem",
      "properties": {
        "image": {
          "description": "The image displayed within the question group above the specific questions.",
          "$ref": "Image"
        },
        "grid": {
          "$ref": "Grid",
          "description": "The question group is a grid with rows of multiple choice questions that share the same options. When `grid` is set, all questions in the group must be of kind `row`."
        },
        "questions": {
          "type": "array",
          "items": {
            "$ref": "Question"
          },
          "description": "Required. A list of questions that belong in this question group. A question must only belong to one group. The `kind` of the group may affect what types of questions are allowed."
        }
      },
      "description": "Defines a question that comprises multiple questions grouped together.",
      "type": "object"
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
    },
    "RenewWatchRequest": {
      "type": "object",
      "properties": {},
      "description": "Renew an existing Watch for seven days.",
      "id": "RenewWatchRequest"
    }
  },
  "resources": {
    "forms": {
      "methods": {
        "batchUpdate": {
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/forms.body"
          ],
          "parameters": {
            "formId": {
              "description": "Required. The form ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "v1/forms/{formId}:batchUpdate",
          "httpMethod": "POST",
          "response": {
            "$ref": "BatchUpdateFormResponse"
          },
          "path": "v1/forms/{formId}:batchUpdate",
          "request": {
            "$ref": "BatchUpdateFormRequest"
          },
          "id": "forms.forms.batchUpdate",
          "parameterOrder": [
            "formId"
          ],
          "description": "Change the form with a batch of updates."
        },
        "create": {
          "response": {
            "$ref": "Form"
          },
          "request": {
            "$ref": "Form"
          },
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/forms.body"
          ],
          "flatPath": "v1/forms",
          "parameterOrder": [],
          "parameters": {},
          "path": "v1/forms",
          "id": "forms.forms.create",
          "httpMethod": "POST",
          "description": "Create a new form using the title given in the provided form message in the request. *Important:* Only the form.info.title and form.info.document_title fields are copied to the new form. All other fields including the form description, items and settings are disallowed. To create a new form and add items, you must first call forms.create to create an empty form with a title and (optional) document title, and then call forms.update to add the items."
        },
        "get": {
          "id": "forms.forms.get",
          "flatPath": "v1/forms/{formId}",
          "path": "v1/forms/{formId}",
          "response": {
            "$ref": "Form"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/forms.body",
            "https://www.googleapis.com/auth/forms.body.readonly"
          ],
          "parameterOrder": [
            "formId"
          ],
          "description": "Get a form.",
          "parameters": {
            "formId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Required. The form ID."
            }
          }
        }
      },
      "resources": {
        "responses": {
          "methods": {
            "list": {
              "flatPath": "v1/forms/{formId}/responses",
              "parameters": {
                "formId": {
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the Form whose responses to list.",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of responses to return. The service may return fewer than this value. If unspecified or zero, at most 5000 responses are returned."
                },
                "pageToken": {
                  "location": "query",
                  "description": "A page token returned by a previous list response. If this field is set, the form and the values of the filter must be the same as for the original request.",
                  "type": "string"
                },
                "filter": {
                  "location": "query",
                  "description": "Which form responses to return. Currently, the only supported filters are: * timestamp \u003e *N* which means to get all form responses submitted after (but not at) timestamp *N*. * timestamp \u003e= *N* which means to get all form responses submitted at and after timestamp *N*. For both supported filters, timestamp must be formatted in RFC3339 UTC \"Zulu\" format. Examples: \"2014-10-02T15:01:23Z\" and \"2014-10-02T15:01:23.045123456Z\".",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "ListFormResponsesResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/forms.responses.readonly"
              ],
              "id": "forms.forms.responses.list",
              "path": "v1/forms/{formId}/responses",
              "parameterOrder": [
                "formId"
              ],
              "httpMethod": "GET",
              "description": "List a form's responses."
            },
            "get": {
              "path": "v1/forms/{formId}/responses/{responseId}",
              "description": "Get one response from the form.",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/forms.responses.readonly"
              ],
              "parameterOrder": [
                "formId",
                "responseId"
              ],
              "response": {
                "$ref": "FormResponse"
              },
              "parameters": {
                "formId": {
                  "type": "string",
                  "description": "Required. The form ID.",
                  "required": true,
                  "location": "path"
                },
                "responseId": {
                  "location": "path",
                  "required": true,
                  "description": "Required. The response ID within the form.",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "id": "forms.forms.responses.get",
              "flatPath": "v1/forms/{formId}/responses/{responseId}"
            }
          }
        },
        "watches": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/forms.body",
                "https://www.googleapis.com/auth/forms.body.readonly",
                "https://www.googleapis.com/auth/forms.responses.readonly"
              ],
              "description": "Delete a watch.",
              "id": "forms.forms.watches.delete",
              "path": "v1/forms/{formId}/watches/{watchId}",
              "parameterOrder": [
                "formId",
                "watchId"
              ],
              "parameters": {
                "watchId": {
                  "location": "path",
                  "required": true,
                  "description": "Required. The ID of the Watch to delete.",
                  "type": "string"
                },
                "formId": {
                  "description": "Required. The ID of the Form.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1/forms/{formId}/watches/{watchId}",
              "response": {
                "$ref": "Empty"
              }
            },
            "renew": {
              "parameters": {
                "watchId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. The ID of the Watch to renew."
                },
                "formId": {
                  "location": "path",
                  "description": "Required. The ID of the Form.",
                  "required": true,
                  "type": "string"
                }
              },
              "request": {
                "$ref": "RenewWatchRequest"
              },
              "parameterOrder": [
                "formId",
                "watchId"
              ],
              "response": {
                "$ref": "Watch"
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/forms.body",
                "https://www.googleapis.com/auth/forms.body.readonly",
                "https://www.googleapis.com/auth/forms.responses.readonly"
              ],
              "flatPath": "v1/forms/{formId}/watches/{watchId}:renew",
              "description": "Renew an existing watch for seven days. The state of the watch after renewal is `ACTIVE`, and the `expire_time` is seven days from the renewal. Renewing a watch in an error state (e.g. `SUSPENDED`) succeeds if the error is no longer present, but fail otherwise. After a watch has expired, RenewWatch returns `NOT_FOUND`.",
              "id": "forms.forms.watches.renew",
              "path": "v1/forms/{formId}/watches/{watchId}:renew"
            },
            "create": {
              "httpMethod": "POST",
              "response": {
                "$ref": "Watch"
              },
              "description": "Create a new watch. If a watch ID is provided, it must be unused. For each invoking project, the per form limit is one watch per Watch.EventType. A watch expires seven days after it is created (see Watch.expire_time).",
              "flatPath": "v1/forms/{formId}/watches",
              "parameters": {
                "formId": {
                  "required": true,
                  "description": "Required. ID of the Form to watch.",
                  "location": "path",
                  "type": "string"
                }
              },
              "id": "forms.forms.watches.create",
              "parameterOrder": [
                "formId"
              ],
              "request": {
                "$ref": "CreateWatchRequest"
              },
              "path": "v1/forms/{formId}/watches",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/forms.body",
                "https://www.googleapis.com/auth/forms.body.readonly",
                "https://www.googleapis.com/auth/forms.responses.readonly"
              ]
            },
            "list": {
              "response": {
                "$ref": "ListWatchesResponse"
              },
              "httpMethod": "GET",
              "path": "v1/forms/{formId}/watches",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/forms.body",
                "https://www.googleapis.com/auth/forms.body.readonly",
                "https://www.googleapis.com/auth/forms.responses.readonly"
              ],
              "description": "Return a list of the watches owned by the invoking project. The maximum number of watches is two: For each invoker, the limit is one for each event type per form.",
              "flatPath": "v1/forms/{formId}/watches",
              "parameterOrder": [
                "formId"
              ],
              "id": "forms.forms.watches.list",
              "parameters": {
                "formId": {
                  "required": true,
                  "description": "Required. ID of the Form whose watches to list.",
                  "type": "string",
                  "location": "path"
                }
              }
            }
          }
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "protocol": "rest",
  "baseUrl": "https://forms.googleapis.com/",
  "description": "Reads and writes Google Forms and responses.",
  "id": "forms:v1",
  "rootUrl": "https://forms.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/forms.responses.readonly": {
          "description": "See all responses to your Google Forms forms"
        },
        "https://www.googleapis.com/auth/forms.body.readonly": {
          "description": "See all your Google Forms forms"
        },
        "https://www.googleapis.com/auth/drive.file": {
          "description": "See, edit, create, and delete only the specific Google Drive files you use with this app"
        },
        "https://www.googleapis.com/auth/forms.body": {
          "description": "See, edit, create, and delete all your Google Forms forms"
        },
        "https://www.googleapis.com/auth/drive": {
          "description": "See, edit, create, and delete all of your Google Drive files"
        },
        "https://www.googleapis.com/auth/drive.readonly": {
          "description": "See and download all your Google Drive files"
        }
      }
    }
  },
  "revision": "20220802",
  "mtlsRootUrl": "https://forms.mtls.googleapis.com/",
  "canonicalName": "Forms",
  "documentationLink": "https://developers.google.com/forms/api",
  "basePath": "",
  "version": "v1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "version_module": true,
  "batchPath": "batch",
  "parameters": {
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "description": "Data format for response.",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    }
  },
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "title": "Google Forms API",
  "servicePath": "",
  "discoveryVersion": "v1",
  "name": "forms"
}
