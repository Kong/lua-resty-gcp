local decode = require("cjson").new().decode
return assert(decode([===[
{ "documentationLink": "https://developers.google.com/blogger/docs/3.0/getting_started", "version": "v2", "ownerDomain": "google.com", "schemas": { "PostList": { "properties": { "items": { "description": "The list of Posts for this Blog.", "type": "array", "items": { "$ref": "Post" } }, "prevPageToken": { "type": "string", "description": "Pagination token to fetch the previous page, if one exists." }, "etag": { "type": "string", "description": "Etag of the response." }, "kind": { "description": "The kind of this entity. Always blogger#postList.", "type": "string" }, "nextPageToken": { "type": "string", "description": "Pagination token to fetch the next page, if one exists." } }, "type": "object", "id": "PostList" }, "Comment": { "properties": { "blog": { "type": "object", "properties": { "id": { "description": "The identifier of the blog containing this comment.", "type": "string" } }, "description": "Data about the blog containing this comment." }, "kind": { "type": "string", "description": "The kind of this entry. Always blogger#comment." }, "updated": { "description": "RFC 3339 date-time when this comment was last updated.", "type": "string" }, "status": { "enumDescriptions": [ "", "", "", "" ], "description": "The status of the comment (only populated for admin users).", "enum": [ "LIVE", "EMPTIED", "PENDING", "SPAM" ], "type": "string" }, "inReplyTo": { "type": "object", "description": "Data about the comment this is in reply to.", "properties": { "id": { "description": "The identified of the parent of this comment.", "type": "string" } } }, "published": { "description": "RFC 3339 date-time when this comment was published.", "type": "string" }, "selfLink": { "description": "The API REST URL to fetch this resource from.", "type": "string" }, "author": { "type": "object", "properties": { "id": { "description": "The identifier of the creator.", "type": "string" }, "url": { "description": "The URL of the creator's Profile page.", "type": "string" }, "displayName": { "description": "The display name.", "type": "string" }, "image": { "description": "The creator's avatar.", "type": "object", "properties": { "url": { "type": "string", "description": "The creator's avatar URL." } } } }, "description": "The author of this Comment." }, "post": { "properties": { "id": { "description": "The identifier of the post containing this comment.", "type": "string" } }, "type": "object", "description": "Data about the post containing this comment." }, "content": { "description": "The actual content of the comment. May include HTML markup.", "type": "string" }, "id": { "type": "string", "description": "The identifier for this resource." } }, "id": "Comment", "type": "object" }, "BlogPerUserInfo": { "type": "object", "properties": { "kind": { "type": "string", "description": "The kind of this entity. Always blogger#blogPerUserInfo." }, "hasAdminAccess": { "description": "True if the user has Admin level access to the blog.", "type": "boolean" }, "role": { "enum": [ "VIEW_TYPE_UNSPECIFIED", "READER", "AUTHOR", "ADMIN" ], "description": "Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).", "enumDescriptions": [ "", "", "", "" ], "type": "string" }, "photosAlbumKey": { "type": "string", "description": "The Photo Album Key for the user when adding photos to the blog." }, "userId": { "type": "string", "description": "ID of the User." }, "blogId": { "type": "string", "description": "ID of the Blog resource." } }, "id": "BlogPerUserInfo" }, "Post": { "id": "Post", "type": "object", "properties": { "updated": { "type": "string", "description": "RFC 3339 date-time when this Post was last updated." }, "images": { "items": { "properties": { "url": { "type": "string" } }, "type": "object" }, "description": "Display image for the Post.", "type": "array" }, "id": { "type": "string", "description": "The identifier of this Post." }, "labels": { "items": { "type": "string" }, "type": "array", "description": "The list of labels this Post was tagged with." }, "selfLink": { "type": "string", "description": "The API REST URL to fetch this resource from." }, "content": { "type": "string", "description": "The content of the Post. May contain HTML markup." }, "kind": { "description": "The kind of this entity. Always blogger#post.", "type": "string" }, "customMetaData": { "description": "The JSON meta-data for the Post.", "type": "string" }, "blog": { "description": "Data about the blog containing this Post.", "type": "object", "properties": { "id": { "type": "string", "description": "The identifier of the Blog that contains this Post." } } }, "published": { "type": "string", "description": "RFC 3339 date-time when this Post was published." }, "replies": { "properties": { "totalItems": { "type": "string", "format": "int64", "description": "The count of comments on this post." }, "selfLink": { "description": "The URL of the comments on this post.", "type": "string" }, "items": { "description": "The List of Comments for this Post.", "items": { "$ref": "Comment" }, "type": "array" } }, "description": "The container of comments on this Post.", "type": "object" }, "readerComments": { "description": "Comment control and display setting for readers of this post.", "enum": [ "ALLOW", "DONT_ALLOW_SHOW_EXISTING", "DONT_ALLOW_HIDE_EXISTING" ], "type": "string", "enumDescriptions": [ "", "", "" ] }, "author": { "properties": { "displayName": { "description": "The display name.", "type": "string" }, "id": { "type": "string", "description": "The identifier of the creator." }, "image": { "properties": { "url": { "description": "The creator's avatar URL.", "type": "string" } }, "type": "object", "description": "The creator's avatar." }, "url": { "type": "string", "description": "The URL of the creator's Profile page." } }, "description": "The author of this Post.", "type": "object" }, "location": { "description": "The location for geotagged posts.", "properties": { "name": { "description": "Location name.", "type": "string" }, "lat": { "format": "double", "type": "number", "description": "Location's latitude." }, "span": { "description": "Location's viewport span. Can be used when rendering a map preview.", "type": "string" }, "lng": { "format": "double", "description": "Location's longitude.", "type": "number" } }, "type": "object" }, "titleLink": { "description": "The title link URL, similar to atom's related link.", "type": "string" }, "title": { "type": "string", "description": "The title of the Post." }, "etag": { "type": "string", "description": "Etag of the resource." }, "status": { "description": "Status of the post. Only set for admin-level requests.", "type": "string", "enumDescriptions": [ "", "", "", "" ], "enum": [ "LIVE", "DRAFT", "SCHEDULED", "SOFT_TRASHED" ] }, "url": { "description": "The URL where this Post is displayed.", "type": "string" } } }, "User": { "properties": { "blogs": { "description": "The container of blogs for this user.", "type": "object", "properties": { "selfLink": { "description": "The URL of the Blogs for this user.", "type": "string" } } }, "url": { "description": "The user's profile page.", "type": "string" }, "locale": { "properties": { "variant": { "type": "string", "description": "The language variant this blog is authored in." }, "language": { "type": "string", "description": "The language this blog is authored in." }, "country": { "description": "The country this blog's locale is set to.", "type": "string" } }, "type": "object", "description": "This user's locale" }, "displayName": { "description": "The display name.", "type": "string" }, "about": { "type": "string", "description": "Profile summary information." }, "created": { "type": "string", "description": "The timestamp of when this profile was created, in seconds since epoch." }, "selfLink": { "description": "The API REST URL to fetch this resource from.", "type": "string" }, "kind": { "type": "string", "description": "The kind of this entity. Always blogger#user." }, "id": { "description": "The identifier for this User.", "type": "string" } }, "id": "User", "type": "object" }, "PageList": { "id": "PageList", "properties": { "etag": { "type": "string", "description": "Etag of the response." }, "nextPageToken": { "type": "string", "description": "Pagination token to fetch the next page, if one exists." }, "items": { "items": { "$ref": "Page" }, "description": "The list of Pages for a Blog.", "type": "array" }, "kind": { "description": "The kind of this entity. Always blogger#pageList.", "type": "string" } }, "type": "object" }, "CommentList": { "id": "CommentList", "type": "object", "properties": { "items": { "items": { "$ref": "Comment" }, "description": "The List of Comments for a Post.", "type": "array" }, "nextPageToken": { "type": "string", "description": "Pagination token to fetch the next page, if one exists." }, "etag": { "description": "Etag of the response.", "type": "string" }, "kind": { "description": "The kind of this entry. Always blogger#commentList.", "type": "string" }, "prevPageToken": { "type": "string", "description": "Pagination token to fetch the previous page, if one exists." } } }, "Blog": { "type": "object", "properties": { "locale": { "description": "The locale this Blog is set to.", "type": "object", "properties": { "variant": { "type": "string", "description": "The language variant this blog is authored in." }, "language": { "description": "The language this blog is authored in.", "type": "string" }, "country": { "type": "string", "description": "The country this blog's locale is set to." } } }, "description": { "type": "string", "description": "The description of this blog. This is displayed underneath the title." }, "name": { "description": "The name of this blog. This is displayed as the title.", "type": "string" }, "status": { "enum": [ "LIVE", "DELETED" ], "enumDescriptions": [ "", "" ], "description": "The status of the blog.", "type": "string" }, "customMetaData": { "description": "The JSON custom meta-data for the Blog.", "type": "string" }, "published": { "description": "RFC 3339 date-time when this blog was published.", "type": "string" }, "selfLink": { "description": "The API REST URL to fetch this resource from.", "type": "string" }, "id": { "type": "string", "description": "The identifier for this resource." }, "pages": { "type": "object", "properties": { "totalItems": { "format": "int32", "type": "integer", "description": "The count of pages in this blog." }, "selfLink": { "description": "The URL of the container for pages in this blog.", "type": "string" } }, "description": "The container of pages in this blog." }, "posts": { "description": "The container of posts in this blog.", "properties": { "totalItems": { "type": "integer", "format": "int32", "description": "The count of posts in this blog." }, "selfLink": { "description": "The URL of the container for posts in this blog.", "type": "string" }, "items": { "items": { "$ref": "Post" }, "description": "The List of Posts for this Blog.", "type": "array" } }, "type": "object" }, "url": { "type": "string", "description": "The URL where this blog is published." }, "updated": { "description": "RFC 3339 date-time when this blog was last updated.", "type": "string" }, "kind": { "type": "string", "description": "The kind of this entry. Always blogger#blog." } }, "id": "Blog" }, "BlogUserInfo": { "properties": { "kind": { "type": "string", "description": "The kind of this entity. Always blogger#blogUserInfo." }, "blog": { "$ref": "Blog", "description": "The Blog resource." }, "blog_user_info": { "$ref": "BlogPerUserInfo", "description": "Information about a User for the Blog." } }, "id": "BlogUserInfo", "type": "object" }, "Page": { "id": "Page", "properties": { "etag": { "description": "Etag of the resource.", "type": "string" }, "content": { "type": "string", "description": "The body content of this Page, in HTML." }, "selfLink": { "description": "The API REST URL to fetch this resource from.", "type": "string" }, "updated": { "type": "string", "description": "RFC 3339 date-time when this Page was last updated." }, "id": { "description": "The identifier for this resource.", "type": "string" }, "title": { "description": "The title of this entity. This is the name displayed in the Admin user interface.", "type": "string" }, "status": { "description": "The status of the page for admin resources (either LIVE or DRAFT).", "enumDescriptions": [ "", "", "" ], "enum": [ "LIVE", "DRAFT", "SOFT_TRASHED" ], "type": "string" }, "author": { "type": "object", "properties": { "displayName": { "type": "string", "description": "The display name." }, "image": { "properties": { "url": { "type": "string", "description": "The creator's avatar URL." } }, "type": "object", "description": "The creator's avatar." }, "url": { "type": "string", "description": "The URL of the creator's Profile page." }, "id": { "description": "The identifier of the creator.", "type": "string" } }, "description": "The author of this Page." }, "url": { "type": "string", "description": "The URL that this Page is displayed at." }, "published": { "type": "string", "description": "RFC 3339 date-time when this Page was published." }, "blog": { "description": "Data about the blog containing this Page.", "type": "object", "properties": { "id": { "type": "string", "description": "The identifier of the blog containing this page." } } }, "kind": { "description": "The kind of this entity. Always blogger#page.", "type": "string" } }, "type": "object" }, "BlogList": { "properties": { "kind": { "description": "The kind of this entity. Always blogger#blogList.", "type": "string" }, "items": { "items": { "$ref": "Blog" }, "type": "array", "description": "The list of Blogs this user has Authorship or Admin rights over." }, "blogUserInfos": { "items": { "$ref": "BlogUserInfo" }, "description": "Admin level list of blog per-user information.", "type": "array" } }, "type": "object", "id": "BlogList" } }, "servicePath": "", "basePath": "", "mtlsRootUrl": "https://blogger.mtls.googleapis.com/", "auth": { "oauth2": { "scopes": { "https://www.googleapis.com/auth/blogger": { "description": "Manage your Blogger account" } } } }, "fullyEncodeReservedExpansion": true, "rootUrl": "https://blogger.googleapis.com/", "id": "blogger:v2", "kind": "discovery#restDescription", "baseUrl": "https://blogger.googleapis.com/", "description": "The Blogger API provides access to posts, comments and pages of a Blogger blog.", "canonicalName": "Blogger", "batchPath": "batch", "icons": { "x32": "http://www.google.com/images/icons/product/search-32.gif", "x16": "http://www.google.com/images/icons/product/search-16.gif" }, "ownerName": "Google", "protocol": "rest", "parameters": { "prettyPrint": { "default": "true", "location": "query", "type": "boolean", "description": "Returns response with indentations and line breaks." }, "access_token": { "location": "query", "description": "OAuth access token.", "type": "string" }, "upload_protocol": { "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").", "type": "string", "location": "query" }, "alt": { "location": "query", "enumDescriptions": [ "Responses with Content-Type of application/json", "Media download with context-dependent Content-Type", "Responses with Content-Type of application/x-protobuf" ], "type": "string", "description": "Data format for response.", "enum": [ "json", "media", "proto" ], "default": "json" }, "quotaUser": { "location": "query", "type": "string", "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters." }, "uploadType": { "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").", "location": "query", "type": "string" }, "callback": { "type": "string", "description": "JSONP", "location": "query" }, "key": { "type": "string", "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", "location": "query" }, "oauth_token": { "location": "query", "description": "OAuth 2.0 token for the current user.", "type": "string" }, "$.xgafv": { "location": "query", "enum": [ "1", "2" ], "enumDescriptions": [ "v1 error format", "v2 error format" ], "type": "string", "description": "V1 error format." }, "fields": { "location": "query", "type": "string", "description": "Selector specifying which fields to include in a partial response." } }, "title": "Blogger API", "resources": { "users": { "methods": { "get": { "flatPath": "v2/users/{userId}", "description": "Gets a user by user id.", "response": { "$ref": "User" }, "scopes": [ "https://www.googleapis.com/auth/blogger" ], "parameters": { "userId": { "location": "path", "required": true, "type": "string" } }, "id": "blogger.users.get", "httpMethod": "GET", "path": "v2/users/{userId}", "parameterOrder": [ "userId" ] } } }, "pages": { "methods": { "list": { "httpMethod": "GET", "description": "Lists pages.", "flatPath": "v2/blogs/{blogId}/pages", "scopes": [ "https://www.googleapis.com/auth/blogger" ], "parameters": { "fetchBodies": { "type": "boolean", "location": "query" }, "blogId": { "required": true, "location": "path", "type": "string" } }, "response": { "$ref": "PageList" }, "id": "blogger.pages.list", "parameterOrder": [ "blogId" ], "path": "v2/blogs/{blogId}/pages" }, "get": { "path": "v2/blogs/{blogId}/pages/{pageId}", "parameterOrder": [ "blogId", "pageId" ], "scopes": [ "https://www.googleapis.com/auth/blogger" ], "flatPath": "v2/blogs/{blogId}/pages/{pageId}", "httpMethod": "GET", "response": { "$ref": "Page" }, "description": "Gets a page by blog id and page id.", "parameters": { "pageId": { "required": true, "location": "path", "type": "string" }, "blogId": { "required": true, "location": "path", "type": "string" } }, "id": "blogger.pages.get" } } }, "blogs": { "methods": { "get": { "parameterOrder": [ "blogId" ], "scopes": [ "https://www.googleapis.com/auth/blogger" ], "parameters": { "blogId": { "type": "string", "location": "path", "required": true } }, "path": "v2/blogs/{blogId}", "flatPath": "v2/blogs/{blogId}", "httpMethod": "GET", "response": { "$ref": "Blog" }, "description": "Gets a blog by id.", "id": "blogger.blogs.get" }, "list": { "httpMethod": "GET", "response": { "$ref": "BlogList" }, "parameterOrder": [ "userId" ], "description": "Lists blogs by user id, possibly filtered.", "path": "v2/users/{userId}/blogs", "parameters": { "userId": { "type": "string", "location": "path", "required": true } }, "flatPath": "v2/users/{userId}/blogs", "scopes": [ "https://www.googleapis.com/auth/blogger" ], "id": "blogger.blogs.list" } } }, "comments": { "methods": { "list": { "parameters": { "fetchBodies": { "location": "query", "type": "boolean" }, "postId": { "location": "path", "required": true, "type": "string" }, "startDate": { "type": "string", "location": "query" }, "blogId": { "required": true, "type": "string", "location": "path" }, "pageToken": { "type": "string", "location": "query" }, "maxResults": { "location": "query", "type": "integer", "format": "uint32" } }, "parameterOrder": [ "blogId", "postId" ], "path": "v2/blogs/{blogId}/posts/{postId}/comments", "response": { "$ref": "CommentList" }, "description": "Lists comments.", "httpMethod": "GET", "scopes": [ "https://www.googleapis.com/auth/blogger" ], "id": "blogger.comments.list", "flatPath": "v2/blogs/{blogId}/posts/{postId}/comments" }, "get": { "parameterOrder": [ "blogId", "postId", "commentId" ], "httpMethod": "GET", "path": "v2/blogs/{blogId}/posts/{postId}/comments/{commentId}", "flatPath": "v2/blogs/{blogId}/posts/{postId}/comments/{commentId}", "response": { "$ref": "Comment" }, "description": "Gets a comment by blog id, post id and comment id.", "parameters": { "blogId": { "type": "string", "required": true, "location": "path" }, "commentId": { "type": "string", "location": "path", "required": true }, "postId": { "required": true, "location": "path", "type": "string" } }, "scopes": [ "https://www.googleapis.com/auth/blogger" ], "id": "blogger.comments.get" } } }, "posts": { "methods": { "list": { "parameterOrder": [ "blogId" ], "id": "blogger.posts.list", "httpMethod": "GET", "parameters": { "pageToken": { "location": "query", "type": "string" }, "startDate": { "location": "query", "type": "string" }, "maxResults": { "type": "integer", "format": "uint32", "location": "query" }, "blogId": { "required": true, "type": "string", "location": "path" }, "fetchBodies": { "type": "boolean", "location": "query" } }, "flatPath": "v2/blogs/{blogId}/posts", "description": "Lists posts.", "path": "v2/blogs/{blogId}/posts", "response": { "$ref": "PostList" }, "scopes": [ "https://www.googleapis.com/auth/blogger" ] }, "get": { "response": { "$ref": "Post" }, "parameterOrder": [ "blogId", "postId" ], "parameters": { "postId": { "type": "string", "location": "path", "required": true }, "blogId": { "type": "string", "required": true, "location": "path" } }, "scopes": [ "https://www.googleapis.com/auth/blogger" ], "flatPath": "v2/blogs/{blogId}/posts/{postId}", "description": "Gets a post by blog id and post id", "httpMethod": "GET", "path": "v2/blogs/{blogId}/posts/{postId}", "id": "blogger.posts.get" } } } }, "name": "blogger", "discoveryVersion": "v1", "revision": "20220711" }
]===]))
